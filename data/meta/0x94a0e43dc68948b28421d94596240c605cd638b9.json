{
	"Language": "Solidity",
	"Source": "/**\r\n *Submitted for verification at Etherscan.io on 2019-08-14\r\n*/\r\n\r\npragma solidity ^0.5.10;\r\n\r\n\r\ncontract InstaLottos\r\n{\r\n  \r\n    address payable private manager;\r\n    \r\n    uint private betamount;\r\n    \r\n    uint private playercount;\r\n    \r\n    uint private lowerbound;\r\n    \r\n    uint private upperbound;\r\n    \r\n    bool private contractactive;\r\n    \r\n    bool private contractpause;\r\n   \r\n    event Playlottery(uint cbalance, uint rndm,uint pcount);\r\n    \r\n    constructor() public\r\n    {\r\n\r\n        manager = msg.sender;\r\n        \r\n        contractactive = true;\r\n        \r\n        contractpause = false;\r\n        \r\n        betamount = 0.005 ether;\r\n        \r\n        playercount = 0;\r\n        \r\n        lowerbound = 1;\r\n    \r\n        upperbound = 100;\r\n    }\r\n    \r\n    modifier onlyManager()\r\n    {\r\n        require(msg.sender == manager);\r\n        _;\r\n    }\r\n    \r\n   \r\n    function getcontractactive() public view returns (bool)\r\n    {\r\n        return contractactive;\r\n    }\r\n    \r\n    \r\n     function getcontractpause() public view returns (bool)\r\n    {\r\n        return contractpause;\r\n    }\r\n    \r\n    function getbetamount() public view returns (uint)\r\n    {\r\n        return betamount;\r\n    }\r\n  \r\n    \r\n    function getplayercount() public view returns (uint)\r\n    {\r\n        return playercount;\r\n    }\r\n    \r\n    function getupperbound() public view returns(uint)\r\n    {\r\n        return upperbound;\r\n    }\r\n    \r\n\r\n    function getmanager() public view returns(address)\r\n    {\r\n        return manager;\r\n    }\r\n    \r\n    function getcontractbalance() public view returns(uint)\r\n    {\r\n      \r\n        return address(this).balance;\r\n    }\r\n    \r\n    function setbetamount(uint btamt) public onlyManager\r\n    {\r\n        betamount = btamt;\r\n    }\r\n    \r\n    function setupperbound(uint upbound) public onlyManager\r\n    {\r\n        upperbound = upbound;\r\n    }\r\n    \r\n\r\n    function setcontractpause(bool pas) public onlyManager\r\n    {\r\n        if (pas == false)\r\n        {\r\n            contractactive = true;\r\n        }\r\n        contractpause = pas;\r\n    }\r\n    \r\n    \r\n    function setmanager(address payable newmngr) public onlyManager\r\n    {\r\n        manager = newmngr;\r\n    }\r\n    \r\n    \r\n    function playlottery(uint playnum) public payable\r\n    {\r\n        require(contractactive==true);\r\n        require(playnum >=lowerbound && playnum <=upperbound);\r\n        require(msg.value == betamount);\r\n        \r\n        playercount++;\r\n        \r\n        uint rnd = random(msg.sender,playnum);\r\n        \r\n        if (playnum == rnd)\r\n        {\r\n            settlewin(msg.sender);\r\n            emit Playlottery(getcontractbalance(),rnd,playercount);\r\n            \r\n            if (contractpause == true)\r\n            {\r\n                contractactive = false;\r\n            }\r\n            \r\n            return;\r\n        }\r\n        \r\n        emit Playlottery(getcontractbalance(),rnd,playercount);\r\n        \r\n        return;\r\n        \r\n    }\r\n    \r\n    function settlewin(address payable msgsender) private\r\n    {\r\n        address payable winner = msgsender;\r\n        \r\n        uint cb = address(this).balance;\r\n\r\n            if (cb <= (betamount * 2))\r\n            {\r\n                    //Transfer the contract balance to the winner.\r\n                    winner.transfer(cb);\r\n            }\r\n            else if (cb <=(betamount*3))\r\n            {\r\n            \twinner.transfer((betamount*2));\r\n            }\r\n            else\r\n            {\r\n                    uint cbnow = cb - betamount;\r\n                    uint cb90 = cbnow * 90/100;\r\n                    uint cb10 = cbnow - cb90;\r\n                    manager.transfer(cb10);\r\n                    winner.transfer(cb90);\r\n            }\r\n            \r\n            playercount = 0;\r\n    }\r\n    \r\n    function random(address msgsender,uint numplayed) private view returns (uint)\r\n    {\r\n        uint tmp = uint256(keccak256(abi.encodePacked(block.difficulty,block.timestamp,block.number,playercount,msgsender,numplayed)));\r\n        return  (tmp % upperbound)+1;\r\n    }\r\n    \r\n    function destroyContract() public onlyManager\r\n    { \r\n            selfdestruct(manager); //Balance sent to the manager\r\n    }\r\n    \r\n   \r\n    function () external\r\n    {\r\n       \r\n       \r\n    }\r\n    \r\n}",
	"ContractName": "InstaLottos"
}