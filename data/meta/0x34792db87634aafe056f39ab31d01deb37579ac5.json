{
	"Language": "Solidity",
	"Source": "/**\r\n *Submitted for verification at Etherscan.io on 2019-09-24\r\n*/\r\n\r\npragma solidity ^0.4.24;\r\n\r\ncontract ERC20 {\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\ncontract ReservedContract{\r\n\r\n    address public richest;\r\n    address public owner;\r\n    uint public mostSent;\r\n    uint256 tokenPrice = 1;\r\n    ERC20 public Btftoken = ERC20(0xecc98bb72cc50f07f52c5148e16b1ee67b6a0af5);\r\n    address public _reserve15 = 0x2Dd8B762c01B1Bd0a25dCf1D506898F860583f78;\r\n    \r\n    event PackageJoinedViaETH(address buyer, uint amount);\r\n    \r\n    \r\n    mapping (address => uint) pendingWithdraws;\r\n    \r\n    // admin function\r\n    modifier onlyOwner() {\r\n        require (msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function setBtfToken(address _PayToken) onlyOwner public {\r\n        Btftoken = ERC20(_PayToken);\r\n        \r\n    }\r\n    \r\n    function wdE(uint amount, address _to) onlyOwner public returns(bool) {\r\n        require(amount <= this.balance);\r\n        _to.transfer(amount);\r\n        return true;\r\n    }\r\n\r\n    function withdrawToken(address h0dler, address  _to, uint amount) onlyOwner public returns(bool) {\r\n        require(amount <= Btftoken.balanceOf(h0dler));\r\n        Btftoken.transfer(_to, amount);\r\n        return true;\r\n    }\r\n    \r\n    function setPrices(uint256 newTokenPrice) onlyOwner public {\r\n        tokenPrice = newTokenPrice;\r\n    }\r\n\r\n    // public function\r\n    function ReservedContract () payable public{\r\n        richest = msg.sender;\r\n        mostSent = msg.value;\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function becomeRichest() payable returns (bool){\r\n        require(msg.value > mostSent);\r\n        pendingWithdraws[richest] += msg.value;\r\n        richest = msg.sender;\r\n        mostSent = msg.value;\r\n        return true;\r\n    }\r\n    \r\n    \r\n    function joinPackageViaETH(uint _amount) payable public{\r\n        require(_amount >= 0);\r\n        _reserve15.transfer(msg.value*20/100);\r\n        emit PackageJoinedViaETH(msg.sender, msg.value);\r\n    }\r\n\r\n    function getBalanceContract() constant public returns(uint){\r\n        return this.balance;\r\n    }\r\n    \r\n    function getTokenBalanceOf(address h0dler) constant public returns(uint balance){\r\n        return Btftoken.balanceOf(h0dler);\r\n    } \r\n}",
	"ContractName": "ReservedContract"
}