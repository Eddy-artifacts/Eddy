{
	"Language": "Solidity",
	"Source": "/**\r\n *Submitted for verification at Etherscan.io on 2019-12-14\r\n*/\r\n\r\n/**\r\n *Submitted for verification at Etherscan.io on 2019-09-09\r\n * BEB dapp for www.betbeb.com\r\n*/\r\npragma solidity^0.4.24;  \r\ninterface tokenTransfer {\r\n    function transfer(address receiver, uint amount);\r\n    function transferFrom(address _from, address _to, uint256 _value);\r\n    function balanceOf(address receiver) returns(uint256);\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n \r\n    function Ownable () public {\r\n        owner = msg.sender;\r\n    }\r\n \r\n    modifier onlyOwner {\r\n        require (msg.sender == owner);\r\n        _;\r\n    }\r\n \r\n    /**\r\n     * @param  newOwner address\r\n     */\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        if (newOwner != address(0)) {\r\n        owner = newOwner;\r\n      }\r\n    }\r\n}\r\n\r\ncontract bebBUY is Ownable{\r\ntokenTransfer public bebTokenTransfer; //\u4ee3\u5e01 \r\n    uint8 decimals = 18;\r\n    uint256 bebethex=88;//eth-beb\r\n    uint256 BEBmax;\r\n    mapping(address=>uint256)public bebOf;\r\n    function bebBUY(address _tokenAddress){\r\n         bebTokenTransfer = tokenTransfer(_tokenAddress);\r\n     }\r\n     function querBalance()public view returns(uint256){\r\n         return this.balance;\r\n     }\r\n    //buyBeb-eth\r\n    function buyBeb() payable public {\r\n        uint256 amount = msg.value;\r\n        uint256 _transfer=amount/bebethex;\r\n        require(getTokenBalance()>=_transfer);\r\n        //bebOf[_addr]+=_transfer;\r\n        //require(bebOf[_addr]<=BEBmax,\"Limited purchase of ICO smart contract\");\r\n        bebTokenTransfer.transfer(msg.sender,_transfer);  \r\n    }\r\n    function getTokenBalance() public view returns(uint256){\r\n         return bebTokenTransfer.balanceOf(address(this));\r\n    }\r\n    function ETHwithdrawal(uint256 amount) payable  onlyOwner {\r\n       uint256 _amount=amount* 10 ** 18;\r\n       require(this.balance>=_amount,\"Insufficient contract balance\");\r\n      owner.transfer(_amount);\r\n    }\r\n    function setBEBex(uint256 _value,uint256 _BEBMAX)onlyOwner{\r\n        bebethex=_value;\r\n        BEBmax=_BEBMAX* 10 ** 18;\r\n    }\r\n    function ()payable{\r\n        \r\n    }\r\n}",
	"ContractName": "bebBUY"
}