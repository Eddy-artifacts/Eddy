{
	"Language": "Solidity",
	"Source": "/**\r\n *Submitted for verification at Etherscan.io on 2017-12-06\r\n*/\r\n\r\npragma solidity ^0.4.17;\r\n/*\r\n\tREA Lottery Wheel Contract\r\n\r\n\tThe constructor sets last_hash to some initial value.\r\n\tEvery call to spin() will increase the round_count by one and\r\n\ta put a new \"random\" hash into the storage map \"hashes\".\r\n\tspin() accepts an argument which can be used to introdue more \"randomness\".\r\n\r\n\tThe community can participate by sending small amounts of Eth (no matter the value)\r\n\tto the smart contract. The value sent together with timestamp and blocknumber increase\r\n\tthe \"randomness\".\r\n\r\n\tThe outcome of round <n> can be retrived via call to get_hash(<n>).  \r\n\r\n\tWARNING and DISCLAIMER: \r\n\tWe fully understand the fact that Ethereum Smart Contracts\r\n\tby design of Ethereum Blockchain and Solidity language work\r\n\tin a determenistic and predictable way. \r\n\r\n\tThe block number and the timestamp are not random variables in\r\n\ta mathematical sense. Even worse, the interested miners can \r\n\taffect the outcome by not including the contract transaction\r\n\tin a current block if they are not happy about the outcome \r\n\t(since miners in theory know the outcome of every contract transaction\r\n\tbefore the transaction is included in a block). \r\n\r\n\t2017 Pavel Metelitsyn\r\n\r\n*/\r\n\r\ncontract REALotteryWheel{\r\n    \r\n    uint16 public round_count = 0;\r\n    bytes32 public last_hash;\r\n    address public controller;\r\n    \r\n    mapping (uint16 => bytes32) public hashes;\r\n    \r\n    function REALotteryWheel() public {\r\n        controller = msg.sender;\r\n        last_hash = keccak256(block.number, now);    \r\n    }\r\n    \r\n    function do_spin(bytes32 s) internal {\r\n        round_count = round_count + 1;\r\n        last_hash = keccak256(block.number,now,s);\r\n        hashes[round_count] = last_hash;\r\n    }\r\n\r\n    function spin(bytes32 s) public { \r\n    \tif(controller != msg.sender) revert();\r\n    \tdo_spin(s);\r\n    }\r\n\r\n    function get_hash (uint16 i) constant returns (bytes32){\r\n        return hashes[i];\r\n    }\r\n    \r\n    function () payable {\r\n        do_spin(bytes32(msg.value));\r\n    }\r\n    \r\n}",
	"ContractName": "REALotteryWheel"
}