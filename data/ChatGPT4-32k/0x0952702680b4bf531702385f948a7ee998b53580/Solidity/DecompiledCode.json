{
	"address": "0x0952702680b4bf531702385f948a7ee998b53580",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here's a Solidity contract that matches the provided decompiled code:\n\n```solidity\npragma solidity ^0.8.3;\n\ncontract MyContract {\n    uint256 private _deadline;\n    uint256 private _amountRaised;\n    uint256 private _price;\n    mapping (address => uint256) private _balanceOf;\n    address payable private _payoutAddr;\n    bool private _fallback;\n    address private _tokenReward;\n\n    event FundTransfer(address indexed beneficiary, uint256 amount, bool isContribution);\n\n    function deadline() public view returns (uint256) { \n        return _deadline;\n    }\n\n    function payoutAddr() public view returns (address) { \n        return _payoutAddr;\n    }\n\n    function tokenReward() public view returns (address) { \n        return _tokenReward;\n    }\n\n    function balanceOf(address owner) public view returns (uint256) { \n        return _balanceOf[owner];\n    }\n\n    function amountRaised() public view returns (uint256) { \n        return _amountRaised;\n    }\n\n    function price() public view returns (uint256) { \n        return _price;\n    }\n\n    function closeSale() public { \n        require(block.timestamp >= _deadline, \"Sale is not yet over\");\n        _fallback = true;\n    }\n\n    function safeWithdrawal() public { \n        require(block.timestamp >= _deadline && _payoutAddr == msg.sender, \"Only payout address can withdraw after deadline\");\n        (bool success, ) = _payoutAddr.call{value: _amountRaised}(\"\");\n        if (success) {\n            emit FundTransfer(_payoutAddr, _amountRaised, false);\n        }\n    }\n\n    function fallback() public payable { \n        require(!_fallback, \"Sale is over\");\n        _balanceOf[msg.sender] += msg.value;\n        _amountRaised += msg.value;\n        \n        // Assuming _tokenReward is an ERC20 token\n        ERC20 token = ERC20(_tokenReward);\n        require(token.transfer(msg.sender, msg.value * _price), \"Token transfer failed\");\n        emit FundTransfer(msg.sender, msg.value, true);\n    }\n}\n\ninterface ERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n}\n```\n\nPlease note that you might need to adjust the contract according to your specific needs and use case, especially the part related to the `_tokenReward`. In this code, I assumed `_tokenReward` is an ERC20 token, but in your case, it might be different.",
				"role": "assistant"
			}
		}
	],
	"created": 1701462973,
	"id": "chatcmpl-8R4X7DYZ2lSsTgtmadHozBSVrqdFD",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.24 02:56 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _deadline; // STORAGE[0x1]\nuint256 _amountRaised; // STORAGE[0x2]\nuint256 _price; // STORAGE[0x3]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x5]\naddress _payoutAddr; // STORAGE[0x0] bytes 0 to 19\nuint8 _fallback; // STORAGE[0x6] bytes 0 to 0\naddress _tokenReward; // STORAGE[0x4] bytes 0 to 19\n\n// Events\nFundTransfer(address, uint256, bool);\n\nfunction deadline() public nonPayable { \n    return _deadline;\n}\n\nfunction payoutAddr() public nonPayable { \n    return _payoutAddr;\n}\n\nfunction tokenReward() public nonPayable { \n    return _tokenReward;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction amountRaised() public nonPayable { \n    return _amountRaised;\n}\n\nfunction price() public nonPayable { \n    return _price;\n}\n\nfunction closeSale() public nonPayable { \n    if (block.timestamp >= _deadline) {\n        _fallback = 1;\n    }\n}\n\nfunction safeWithdrawal() public nonPayable { \n    if (block.timestamp >= _deadline) {\n        if (_payoutAddr == msg.sender) {\n            v0 = _payoutAddr.call().value(_amountRaised).gas(!_amountRaised * 2300);\n            if (v0) {\n                emit FundTransfer(_payoutAddr, _amountRaised, 0);\n            }\n        }\n    }\n}\n\nfunction fallback() public payable { \n    require(!_fallback);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] + msg.value;\n    _amountRaised = _amountRaised + msg.value;\n    require(_tokenReward.code.size);\n    v0 = _tokenReward.transfer(msg.sender, msg.value * _price).gas(msg.gas - 710);\n    require(v0);\n    emit FundTransfer(msg.sender, msg.value, 1);\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (0x29dcb0cf == function_selector) {\n            deadline();\n        } else if (0x36c4ff7a == function_selector) {\n            payoutAddr();\n        } else if (0x6e66f6e9 == function_selector) {\n            tokenReward();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x7b3e5e7b == function_selector) {\n            amountRaised();\n        } else if (0xa035b1fe == function_selector) {\n            price();\n        } else if (0xee55efee == function_selector) {\n            closeSale();\n        } else if (0xfd6b7ef8 == function_selector) {\n            safeWithdrawal();\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.24 02:56 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _deadline; // STORAGE[0x1]\nuint256 _amountRaised; // STORAGE[0x2]\nuint256 _price; // STORAGE[0x3]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x5]\naddress _payoutAddr; // STORAGE[0x0] bytes 0 to 19\nuint8 _fallback; // STORAGE[0x6] bytes 0 to 0\naddress _tokenReward; // STORAGE[0x4] bytes 0 to 19\n\n// Events\nFundTransfer(address, uint256, bool);\n\nfunction deadline() public nonPayable { \n    return _deadline;\n}\n\nfunction payoutAddr() public nonPayable { \n    return _payoutAddr;\n}\n\nfunction tokenReward() public nonPayable { \n    return _tokenReward;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction amountRaised() public nonPayable { \n    return _amountRaised;\n}\n\nfunction price() public nonPayable { \n    return _price;\n}\n\nfunction closeSale() public nonPayable { \n    if (block.timestamp >= _deadline) {\n        _fallback = 1;\n    }\n}\n\nfunction safeWithdrawal() public nonPayable { \n    if (block.timestamp >= _deadline) {\n        if (_payoutAddr == msg.sender) {\n            v0 = _payoutAddr.call().value(_amountRaised).gas(!_amountRaised * 2300);\n            if (v0) {\n                emit FundTransfer(_payoutAddr, _amountRaised, 0);\n            }\n        }\n    }\n}\n\nfunction fallback() public payable { \n    require(!_fallback);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] + msg.value;\n    _amountRaised = _amountRaised + msg.value;\n    require(_tokenReward.code.size);\n    v0 = _tokenReward.transfer(msg.sender, msg.value * _price).gas(msg.gas - 710);\n    require(v0);\n    emit FundTransfer(msg.sender, msg.value, 1);\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (0x29dcb0cf == function_selector) {\n            deadline();\n        } else if (0x36c4ff7a == function_selector) {\n            payoutAddr();\n        } else if (0x6e66f6e9 == function_selector) {\n            tokenReward();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x7b3e5e7b == function_selector) {\n            amountRaised();\n        } else if (0xa035b1fe == function_selector) {\n            price();\n        } else if (0xee55efee == function_selector) {\n            closeSale();\n        } else if (0xfd6b7ef8 == function_selector) {\n            safeWithdrawal();\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.24 02:56 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _deadline; // STORAGE[0x1]\nuint256 _amountRaised; // STORAGE[0x2]\nuint256 _price; // STORAGE[0x3]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x5]\naddress _payoutAddr; // STORAGE[0x0] bytes 0 to 19\nuint8 _fallback; // STORAGE[0x6] bytes 0 to 0\naddress _tokenReward; // STORAGE[0x4] bytes 0 to 19\n\n// Events\nFundTransfer(address, uint256, bool);\n\nfunction deadline() public nonPayable { \n    return _deadline;\n}\n\nfunction payoutAddr() public nonPayable { \n    return _payoutAddr;\n}\n\nfunction tokenReward() public nonPayable { \n    return _tokenReward;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction amountRaised() public nonPayable { \n    return _amountRaised;\n}\n\nfunction price() public nonPayable { \n    return _price;\n}\n\nfunction closeSale() public nonPayable { \n    if (block.timestamp >= _deadline) {\n        _fallback = 1;\n    }\n}\n\nfunction safeWithdrawal() public nonPayable { \n    if (block.timestamp >= _deadline) {\n        if (_payoutAddr == msg.sender) {\n            v0 = _payoutAddr.call().value(_amountRaised).gas(!_amountRaised * 2300);\n            if (v0) {\n                emit FundTransfer(_payoutAddr, _amountRaised, 0);\n            }\n        }\n    }\n}\n\nfunction fallback() public payable { \n    require(!_fallback);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] + msg.value;\n    _amountRaised = _amountRaised + msg.value;\n    require(_tokenReward.code.size);\n    v0 = _tokenReward.transfer(msg.sender, msg.value * _price).gas(msg.gas - 710);\n    require(v0);\n    emit FundTransfer(msg.sender, msg.value, 1);\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (0x29dcb0cf == function_selector) {\n            deadline();\n        } else if (0x36c4ff7a == function_selector) {\n            payoutAddr();\n        } else if (0x6e66f6e9 == function_selector) {\n            tokenReward();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x7b3e5e7b == function_selector) {\n            amountRaised();\n        } else if (0xa035b1fe == function_selector) {\n            price();\n        } else if (0xee55efee == function_selector) {\n            closeSale();\n        } else if (0xfd6b7ef8 == function_selector) {\n            safeWithdrawal();\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 42.16893410682678,
	"usage": {
		"completion_tokens": 517,
		"prompt_tokens": 769,
		"total_tokens": 1286
	}
}