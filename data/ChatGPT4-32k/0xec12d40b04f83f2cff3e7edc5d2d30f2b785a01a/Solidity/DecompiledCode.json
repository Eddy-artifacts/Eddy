{
	"address": "0xec12d40b04f83f2cff3e7edc5d2d30f2b785a01a",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Below is the equivalent Solidity contract code:\n\n```solidity\npragma solidity >=0.5.0;\n\ncontract Adoption {\n    address payable public owner;\n    address[16] public adopters;\n    uint256[16] public prices;\n\n    constructor() public {\n        owner = msg.sender;\n        for (uint i = 0; i < 16; i++) {\n            prices[i] = 1 ether; // initial adoption price\n        }\n    }\n\n    function adopt(uint petId) public payable returns (uint) {\n        require(petId >= 0 && petId <= 15, \"Invalid pet ID.\");\n        require(msg.value >= prices[petId], \"Insufficient value sent for adoption.\");\n\n        // Increase the adoption price by 20%\n        prices[petId] *= 120;\n        prices[petId] /= 100;\n\n        adopters[petId] = msg.sender;\n        return petId;\n    }\n\n    function getAdopters() public view returns (address[16] memory) {\n        return adopters;\n    }\n\n    function getPrice(uint petId) public view returns (uint) {\n        require(petId >= 0 && petId <= 15, \"Invalid pet ID.\");\n        return prices[petId];\n    }\n\n    function withdraw() public {\n        require(msg.sender == owner, \"Only the contract owner can withdraw funds.\");\n        owner.transfer(address(this).balance);\n    }\n\n    function() external payable {\n        revert();\n    }\n}\n```\nPlease note that this is a simplified version that does not handle cases where the contract receives funds without the `adopt` function being called, or where the contract receives more funds than the adoption price. Those scenarios are not covered in the decompiled code. The contract also does not provide a way to change the owner, or to rescue funds sent to the contract by mistake.",
				"role": "assistant"
			}
		}
	],
	"created": 1701470767,
	"id": "chatcmpl-8R6YpR5DMW5mKlYRiyVnfK0tqfQ5S",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.25 07:12 UTC\n\n// Data structures and variables inferred from the use of storage instructions\naddress _owner; // STORAGE[0x20] bytes 0 to 19\n\n\nfunction adopters(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    assert(varg0 < 16);\n    return address(STORAGE[varg0 + 0]);\n}\n\nfunction adopt(uint256 varg0) public payable { \n    require(msg.data.length - 4 >= 32);\n    v0 = v1 = varg0 >= 0;\n    if (v1) {\n        v0 = v2 = varg0 <= 15;\n    }\n    require(v0);\n    assert(varg0 < 16);\n    require(msg.value >= STORAGE[varg0 + 16]);\n    assert(varg0 < 16);\n    STORAGE[varg0 + 16] = STORAGE[varg0 + 16] * 120;\n    assert(varg0 < 16);\n    assert(100);\n    STORAGE[varg0 + 16] = STORAGE[varg0 + 16] / 100;\n    assert(varg0 < 16);\n    STORAGE[varg0 + 0] = msg.sender | ~0xffffffffffffffffffffffffffffffffffffffff & STORAGE[varg0 + 0];\n    return varg0;\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction prices(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    assert(varg0 < 16);\n    return STORAGE[varg0 + 16];\n}\n\nfunction fallback() public payable { \n    revert();\n}\n\nfunction withdraw() public nonPayable { \n    require(msg.sender == _owner);\n    v0 = msg.sender.call().value((address(this)).balance).gas(!(address(this)).balance * 2300);\n    require(v0); // checks call status, propagates error data on error\n}\n\nfunction getAdopters() public nonPayable { \n    MEM[64] = MEM[64] + 512;\n    MEM[(MEM[64]) len 512] = this.code[this.code.size len 512];\n    MEM[64] = MEM[64] + 512;\n    MEM[(MEM[64]) len 512] = this.code[this.code.size len 512];\n    v0 = v1 = 0;\n    v2 = v3 = 16;\n    v4 = v5 = MEM[64];\n    MEM[64] = v5 + 512;\n    if (16) {\n        do {\n            MEM[v4] = address(STORAGE[v0]);\n            v4 += 32;\n            v0 += 1;\n        } while (v5 + 512 <= v4);\n    }\n    v6 = v7 = MEM[64];\n    MEM[64] = v7 + 512;\n    if (16) {\n        do {\n            MEM[v6] = STORAGE[v2];\n            v6 += 32;\n            v2 += 1;\n        } while (v7 + 512 <= v6);\n    }\n    v8 = v9 = 0;\n    while (v8 < 512) {\n        MEM[MEM[64] + v8] = MEM[v5 + v8];\n        v8 = v8 + 32;\n    }\n    v10 = v11 = 0;\n    while (v10 < 512) {\n        MEM[512 + MEM[64] + v10] = MEM[v7 + v10];\n        v10 = v10 + 32;\n    }\n    return MEM[(MEM[64]) len 1024];\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x3ccfd60b == function_selector) {\n            withdraw();\n        } else if (0x3de4eb17 == function_selector) {\n            getAdopters();\n        } else if (0x43ae80d3 == function_selector) {\n            adopters(uint256);\n        } else if (0x8588b2c5 == function_selector) {\n            adopt(uint256);\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0xbc31c1c1 == function_selector) {\n            prices(uint256);\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.25 07:12 UTC\n\n// Data structures and variables inferred from the use of storage instructions\naddress _owner; // STORAGE[0x20] bytes 0 to 19\n\n\nfunction adopters(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    assert(varg0 < 16);\n    return address(STORAGE[varg0 + 0]);\n}\n\nfunction adopt(uint256 varg0) public payable { \n    require(msg.data.length - 4 >= 32);\n    v0 = v1 = varg0 >= 0;\n    if (v1) {\n        v0 = v2 = varg0 <= 15;\n    }\n    require(v0);\n    assert(varg0 < 16);\n    require(msg.value >= STORAGE[varg0 + 16]);\n    assert(varg0 < 16);\n    STORAGE[varg0 + 16] = STORAGE[varg0 + 16] * 120;\n    assert(varg0 < 16);\n    assert(100);\n    STORAGE[varg0 + 16] = STORAGE[varg0 + 16] / 100;\n    assert(varg0 < 16);\n    STORAGE[varg0 + 0] = msg.sender | ~0xffffffffffffffffffffffffffffffffffffffff & STORAGE[varg0 + 0];\n    return varg0;\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction prices(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    assert(varg0 < 16);\n    return STORAGE[varg0 + 16];\n}\n\nfunction fallback() public payable { \n    revert();\n}\n\nfunction withdraw() public nonPayable { \n    require(msg.sender == _owner);\n    v0 = msg.sender.call().value((address(this)).balance).gas(!(address(this)).balance * 2300);\n    require(v0); // checks call status, propagates error data on error\n}\n\nfunction getAdopters() public nonPayable { \n    MEM[64] = MEM[64] + 512;\n    MEM[(MEM[64]) len 512] = this.code[this.code.size len 512];\n    MEM[64] = MEM[64] + 512;\n    MEM[(MEM[64]) len 512] = this.code[this.code.size len 512];\n    v0 = v1 = 0;\n    v2 = v3 = 16;\n    v4 = v5 = MEM[64];\n    MEM[64] = v5 + 512;\n    if (16) {\n        do {\n            MEM[v4] = address(STORAGE[v0]);\n            v4 += 32;\n            v0 += 1;\n        } while (v5 + 512 <= v4);\n    }\n    v6 = v7 = MEM[64];\n    MEM[64] = v7 + 512;\n    if (16) {\n        do {\n            MEM[v6] = STORAGE[v2];\n            v6 += 32;\n            v2 += 1;\n        } while (v7 + 512 <= v6);\n    }\n    v8 = v9 = 0;\n    while (v8 < 512) {\n        MEM[MEM[64] + v8] = MEM[v5 + v8];\n        v8 = v8 + 32;\n    }\n    v10 = v11 = 0;\n    while (v10 < 512) {\n        MEM[512 + MEM[64] + v10] = MEM[v7 + v10];\n        v10 = v10 + 32;\n    }\n    return MEM[(MEM[64]) len 1024];\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x3ccfd60b == function_selector) {\n            withdraw();\n        } else if (0x3de4eb17 == function_selector) {\n            getAdopters();\n        } else if (0x43ae80d3 == function_selector) {\n            adopters(uint256);\n        } else if (0x8588b2c5 == function_selector) {\n            adopt(uint256);\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0xbc31c1c1 == function_selector) {\n            prices(uint256);\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.25 07:12 UTC\n\n// Data structures and variables inferred from the use of storage instructions\naddress _owner; // STORAGE[0x20] bytes 0 to 19\n\n\nfunction adopters(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    assert(varg0 < 16);\n    return address(STORAGE[varg0 + 0]);\n}\n\nfunction adopt(uint256 varg0) public payable { \n    require(msg.data.length - 4 >= 32);\n    v0 = v1 = varg0 >= 0;\n    if (v1) {\n        v0 = v2 = varg0 <= 15;\n    }\n    require(v0);\n    assert(varg0 < 16);\n    require(msg.value >= STORAGE[varg0 + 16]);\n    assert(varg0 < 16);\n    STORAGE[varg0 + 16] = STORAGE[varg0 + 16] * 120;\n    assert(varg0 < 16);\n    assert(100);\n    STORAGE[varg0 + 16] = STORAGE[varg0 + 16] / 100;\n    assert(varg0 < 16);\n    STORAGE[varg0 + 0] = msg.sender | ~0xffffffffffffffffffffffffffffffffffffffff & STORAGE[varg0 + 0];\n    return varg0;\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction prices(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    assert(varg0 < 16);\n    return STORAGE[varg0 + 16];\n}\n\nfunction fallback() public payable { \n    revert();\n}\n\nfunction withdraw() public nonPayable { \n    require(msg.sender == _owner);\n    v0 = msg.sender.call().value((address(this)).balance).gas(!(address(this)).balance * 2300);\n    require(v0); // checks call status, propagates error data on error\n}\n\nfunction getAdopters() public nonPayable { \n    MEM[64] = MEM[64] + 512;\n    MEM[(MEM[64]) len 512] = this.code[this.code.size len 512];\n    MEM[64] = MEM[64] + 512;\n    MEM[(MEM[64]) len 512] = this.code[this.code.size len 512];\n    v0 = v1 = 0;\n    v2 = v3 = 16;\n    v4 = v5 = MEM[64];\n    MEM[64] = v5 + 512;\n    if (16) {\n        do {\n            MEM[v4] = address(STORAGE[v0]);\n            v4 += 32;\n            v0 += 1;\n        } while (v5 + 512 <= v4);\n    }\n    v6 = v7 = MEM[64];\n    MEM[64] = v7 + 512;\n    if (16) {\n        do {\n            MEM[v6] = STORAGE[v2];\n            v6 += 32;\n            v2 += 1;\n        } while (v7 + 512 <= v6);\n    }\n    v8 = v9 = 0;\n    while (v8 < 512) {\n        MEM[MEM[64] + v8] = MEM[v5 + v8];\n        v8 = v8 + 32;\n    }\n    v10 = v11 = 0;\n    while (v10 < 512) {\n        MEM[512 + MEM[64] + v10] = MEM[v7 + v10];\n        v10 = v10 + 32;\n    }\n    return MEM[(MEM[64]) len 1024];\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x3ccfd60b == function_selector) {\n            withdraw();\n        } else if (0x3de4eb17 == function_selector) {\n            getAdopters();\n        } else if (0x43ae80d3 == function_selector) {\n            adopters(uint256);\n        } else if (0x8588b2c5 == function_selector) {\n            adopt(uint256);\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0xbc31c1c1 == function_selector) {\n            prices(uint256);\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 12.741798400878906,
	"usage": {
		"completion_tokens": 383,
		"prompt_tokens": 1052,
		"total_tokens": 1435
	}
}