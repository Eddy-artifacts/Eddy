{
	"address": "0xf5ac04111dfecaf859071c4a424ebcda1379825b",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is the Solidity contract code based on the decompiled EVM Bytecode:\n\n```solidity\npragma solidity ^0.5.16;\n\ncontract Crowdfunding {\n    uint256 public _fundingGoal;\n    uint256 public _amountRaised;\n    uint256 public _deadline;\n    uint256 public _price;\n    mapping (address => uint256) public _balanceOf;\n    address payable public _beneficiary;\n    bool public goalReached = false;\n    IERC20 public _tokenReward;\n\n    event FundTransfer(address backer, uint256 amount, bool isContribution);\n    event GoalReached(address recipient, uint256 totalAmountRaised);\n\n    constructor(\n        uint256 fundingGoal,\n        uint256 deadline,\n        uint256 price,\n        address payable beneficiary,\n        IERC20 tokenReward\n    ) public {\n        _fundingGoal = fundingGoal;\n        _deadline = deadline;\n        _price = price;\n        _beneficiary = beneficiary;\n        _tokenReward = tokenReward;\n    }\n\n    function checkGoalReached() public { \n        if (_amountRaised >= _fundingGoal) {\n            goalReached = true;\n            emit GoalReached(_beneficiary, _amountRaised);\n        }\n    }\n\n    function safeWithdrawal() public { \n        require(_beneficiary == msg.sender, \"Only beneficiary can withdraw\");\n        if (!goalReached) {\n            uint amount = _balanceOf[msg.sender];\n            _balanceOf[msg.sender] = 0;\n            if (!_beneficiary.send(amount)) {\n                _balanceOf[msg.sender] = amount;\n            } else {\n                emit FundTransfer(_beneficiary, amount, false);\n            }\n        }\n\n        if (goalReached && _beneficiary == msg.sender) {\n            if (_beneficiary.send(_amountRaised)) {\n                emit FundTransfer(_beneficiary, _amountRaised, false);\n            } else {\n                goalReached = false;\n            }\n        }\n    }\n\n    function () external payable {\n        require(!goalReached);\n        uint256 amount = msg.value;\n        _balanceOf[msg.sender] += amount;\n        _amountRaised += amount;\n        _tokenReward.transfer(msg.sender, amount / _price);\n        emit FundTransfer(msg.sender, amount, true);\n    }\n}\n\ninterface IERC20 {\n    function transfer(address recipient, uint256 amount) external returns (bool);\n}\n```\n\nNote: The original EVM Bytecode seems to have a function selector mechanism. This has been omitted in the Solidity code as it's not a usual practice in Solidity. Also, the original code seems to be dealing with ERC20 tokens, so an interface `IERC20` is added to interact with these tokens.",
				"role": "assistant"
			}
		}
	],
	"created": 1701470160,
	"id": "chatcmpl-8R6P2MgBFX0HdfyfVgGN8Fe0fe5LW",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.23 07:55 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _fundingGoal; // STORAGE[0x1]\nuint256 _amountRaised; // STORAGE[0x2]\nuint256 _deadline; // STORAGE[0x3]\nuint256 _price; // STORAGE[0x4]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x6]\naddress _beneficiary; // STORAGE[0x0] bytes 0 to 19\nuint8 stor_4_0_0; // STORAGE[0x4] bytes 0 to 0\nuint8 stor_7_0_0; // STORAGE[0x7] bytes 0 to 0\nuint8 ___function_selector__; // STORAGE[0x7] bytes 1 to 1\naddress _tokenReward; // STORAGE[0x5] bytes 0 to 19\n\n// Events\nFundTransfer(address, uint256, bool);\nGoalReached(address, uint256);\n\nfunction checkGoalReached() public nonPayable { \n    if (_amountRaised >= _fundingGoal) {\n        stor_7_0_0 = 1;\n        emit GoalReached(_beneficiary, _amountRaised);\n    }\n    ___function_selector__ = 1;\n}\n\nfunction deadline() public nonPayable { \n    return _deadline;\n}\n\nfunction beneficiary() public nonPayable { \n    return _beneficiary;\n}\n\nfunction tokenReward() public nonPayable { \n    return _tokenReward;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction fundingGoal() public nonPayable { \n    return _fundingGoal;\n}\n\nfunction amountRaised() public nonPayable { \n    return _amountRaised;\n}\n\nfunction price() public nonPayable { \n    return _price;\n}\n\nfunction safeWithdrawal() public nonPayable { \n    if (_beneficiary == msg.sender) {\n        v0 = _beneficiary.call().value(_amountRaised).gas(!_amountRaised * 2300);\n        if (!v0) {\n            stor_7_0_0 = 0;\n        } else {\n            emit FundTransfer(_beneficiary, _amountRaised, 0);\n        }\n    }\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length) {\n        if (0x1cb3b20 == function_selector) {\n            checkGoalReached();\n        } else if (0x29dcb0cf == function_selector) {\n            deadline();\n        } else if (0x38af3eed == function_selector) {\n            beneficiary();\n        } else if (0x6e66f6e9 == function_selector) {\n            tokenReward();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x7a3a0e84 == function_selector) {\n            fundingGoal();\n        } else if (0x7b3e5e7b == function_selector) {\n            amountRaised();\n        } else if (0xa035b1fe == function_selector) {\n            price();\n        } else if (0xfd6b7ef8 == function_selector) {\n            safeWithdrawal();\n        }\n    }\n    require(!___function_selector__);\n    require(msg.value == 0xaa87bee538000);\n    require(_balanceOf[msg.sender] == 0);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] + msg.value;\n    _amountRaised = _amountRaised + msg.value;\n    assert(stor_4_0_0);\n    require(_tokenReward.code.size);\n    v0 = _tokenReward.transfer(msg.sender, msg.value / _price * 0xf4240).gas(msg.gas - 710);\n    require(v0);\n    emit FundTransfer(msg.sender, msg.value, 1);\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.23 07:55 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _fundingGoal; // STORAGE[0x1]\nuint256 _amountRaised; // STORAGE[0x2]\nuint256 _deadline; // STORAGE[0x3]\nuint256 _price; // STORAGE[0x4]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x6]\naddress _beneficiary; // STORAGE[0x0] bytes 0 to 19\nuint8 stor_4_0_0; // STORAGE[0x4] bytes 0 to 0\nuint8 stor_7_0_0; // STORAGE[0x7] bytes 0 to 0\nuint8 ___function_selector__; // STORAGE[0x7] bytes 1 to 1\naddress _tokenReward; // STORAGE[0x5] bytes 0 to 19\n\n// Events\nFundTransfer(address, uint256, bool);\nGoalReached(address, uint256);\n\nfunction checkGoalReached() public nonPayable { \n    if (_amountRaised >= _fundingGoal) {\n        stor_7_0_0 = 1;\n        emit GoalReached(_beneficiary, _amountRaised);\n    }\n    ___function_selector__ = 1;\n}\n\nfunction deadline() public nonPayable { \n    return _deadline;\n}\n\nfunction beneficiary() public nonPayable { \n    return _beneficiary;\n}\n\nfunction tokenReward() public nonPayable { \n    return _tokenReward;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction fundingGoal() public nonPayable { \n    return _fundingGoal;\n}\n\nfunction amountRaised() public nonPayable { \n    return _amountRaised;\n}\n\nfunction price() public nonPayable { \n    return _price;\n}\n\nfunction safeWithdrawal() public nonPayable { \n    if (_beneficiary == msg.sender) {\n        v0 = _beneficiary.call().value(_amountRaised).gas(!_amountRaised * 2300);\n        if (!v0) {\n            stor_7_0_0 = 0;\n        } else {\n            emit FundTransfer(_beneficiary, _amountRaised, 0);\n        }\n    }\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length) {\n        if (0x1cb3b20 == function_selector) {\n            checkGoalReached();\n        } else if (0x29dcb0cf == function_selector) {\n            deadline();\n        } else if (0x38af3eed == function_selector) {\n            beneficiary();\n        } else if (0x6e66f6e9 == function_selector) {\n            tokenReward();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x7a3a0e84 == function_selector) {\n            fundingGoal();\n        } else if (0x7b3e5e7b == function_selector) {\n            amountRaised();\n        } else if (0xa035b1fe == function_selector) {\n            price();\n        } else if (0xfd6b7ef8 == function_selector) {\n            safeWithdrawal();\n        }\n    }\n    require(!___function_selector__);\n    require(msg.value == 0xaa87bee538000);\n    require(_balanceOf[msg.sender] == 0);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] + msg.value;\n    _amountRaised = _amountRaised + msg.value;\n    assert(stor_4_0_0);\n    require(_tokenReward.code.size);\n    v0 = _tokenReward.transfer(msg.sender, msg.value / _price * 0xf4240).gas(msg.gas - 710);\n    require(v0);\n    emit FundTransfer(msg.sender, msg.value, 1);\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.23 07:55 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _fundingGoal; // STORAGE[0x1]\nuint256 _amountRaised; // STORAGE[0x2]\nuint256 _deadline; // STORAGE[0x3]\nuint256 _price; // STORAGE[0x4]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x6]\naddress _beneficiary; // STORAGE[0x0] bytes 0 to 19\nuint8 stor_4_0_0; // STORAGE[0x4] bytes 0 to 0\nuint8 stor_7_0_0; // STORAGE[0x7] bytes 0 to 0\nuint8 ___function_selector__; // STORAGE[0x7] bytes 1 to 1\naddress _tokenReward; // STORAGE[0x5] bytes 0 to 19\n\n// Events\nFundTransfer(address, uint256, bool);\nGoalReached(address, uint256);\n\nfunction checkGoalReached() public nonPayable { \n    if (_amountRaised >= _fundingGoal) {\n        stor_7_0_0 = 1;\n        emit GoalReached(_beneficiary, _amountRaised);\n    }\n    ___function_selector__ = 1;\n}\n\nfunction deadline() public nonPayable { \n    return _deadline;\n}\n\nfunction beneficiary() public nonPayable { \n    return _beneficiary;\n}\n\nfunction tokenReward() public nonPayable { \n    return _tokenReward;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction fundingGoal() public nonPayable { \n    return _fundingGoal;\n}\n\nfunction amountRaised() public nonPayable { \n    return _amountRaised;\n}\n\nfunction price() public nonPayable { \n    return _price;\n}\n\nfunction safeWithdrawal() public nonPayable { \n    if (_beneficiary == msg.sender) {\n        v0 = _beneficiary.call().value(_amountRaised).gas(!_amountRaised * 2300);\n        if (!v0) {\n            stor_7_0_0 = 0;\n        } else {\n            emit FundTransfer(_beneficiary, _amountRaised, 0);\n        }\n    }\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length) {\n        if (0x1cb3b20 == function_selector) {\n            checkGoalReached();\n        } else if (0x29dcb0cf == function_selector) {\n            deadline();\n        } else if (0x38af3eed == function_selector) {\n            beneficiary();\n        } else if (0x6e66f6e9 == function_selector) {\n            tokenReward();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x7a3a0e84 == function_selector) {\n            fundingGoal();\n        } else if (0x7b3e5e7b == function_selector) {\n            amountRaised();\n        } else if (0xa035b1fe == function_selector) {\n            price();\n        } else if (0xfd6b7ef8 == function_selector) {\n            safeWithdrawal();\n        }\n    }\n    require(!___function_selector__);\n    require(msg.value == 0xaa87bee538000);\n    require(_balanceOf[msg.sender] == 0);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] + msg.value;\n    _amountRaised = _amountRaised + msg.value;\n    assert(stor_4_0_0);\n    require(_tokenReward.code.size);\n    v0 = _tokenReward.transfer(msg.sender, msg.value / _price * 0xf4240).gas(msg.gas - 710);\n    require(v0);\n    emit FundTransfer(msg.sender, msg.value, 1);\n}\n.",
	"status": "1",
	"time_cost": 26.30566096305847,
	"usage": {
		"completion_tokens": 548,
		"prompt_tokens": 937,
		"total_tokens": 1485
	}
}