{
	"address": "0x4480451c0aad4b97e837465d3ea618f976970df0",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Below is the Solidity version of the given decompiled code:\n\n```solidity\npragma solidity ^0.6.12;\n\ncontract MyContract {\n    uint256 private stor_2;\n    uint256 private stor_3;\n    mapping (address => uint256) private _invested;\n    mapping (address => uint256) private _atBlock;\n    address payable private _fallback;\n    address payable private stor_1_0_19;\n\n    function invested(address varg0) public view returns(uint256) { \n        return _invested[varg0];\n    }\n\n    function atBlock(address varg0) public view returns(uint256) { \n        return _atBlock[varg0];\n    }\n\n    function fallback() public payable { \n        bool v0 = _fallback.send(msg.value / 10);\n        require(v0);\n        if (_invested[msg.sender] > 0) {\n            bool v1 = msg.sender.send(_invested[msg.sender] * 5 / 100 * (block.number - _atBlock[msg.sender]) / 5900);\n            require(v1); \n        }\n        if (msg.data.length == 0) {\n            bool v2 = stor_1_0_19.send(stor_2 * msg.value / 100);\n            require(v2); \n        } else {\n            if (msg.sender == address(uint160(uint256(keccak256(abi.encodePacked(msg.data)))))) {\n                bool v4 = stor_1_0_19.send(stor_2 * msg.value / 100);\n                require(v4); \n            } else {\n                bool v5 = msg.sender.send(msg.value * stor_3 / 100);\n                require(v5);\n                bool v6 = address(uint160(uint256(keccak256(abi.encodePacked(msg.data))))).send(msg.value * stor_2 / 100);\n                require(v6); \n            }\n        }\n        _atBlock[msg.sender] = block.number;\n        _invested[msg.sender] += msg.value;\n    }\n\n    fallback() external payable {\n        fallback();\n    }\n\n    receive() external payable {\n        fallback();\n    }\n}\n```\nPlease note that the above Solidity code is a rough approximation of the given pseudo-decompiled code. The actual implementation might be different based on the original contract's functionality.",
				"role": "assistant"
			}
		}
	],
	"created": 1701471248,
	"id": "chatcmpl-8R6ga7IMYDAI41P6sbSF57dtBDJbK",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.23 16:05 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 stor_2; // STORAGE[0x2]\nuint256 stor_3; // STORAGE[0x3]\nmapping (uint256 => [uint256]) _invested; // STORAGE[0x4]\nmapping (uint256 => [uint256]) _atBlock; // STORAGE[0x5]\naddress _fallback; // STORAGE[0x0] bytes 0 to 19\naddress stor_1_0_19; // STORAGE[0x1] bytes 0 to 19\n\n\nfunction invested(address varg0) public nonPayable { \n    return _invested[varg0];\n}\n\nfunction atBlock(address varg0) public nonPayable { \n    return _atBlock[varg0];\n}\n\nfunction fallback() public payable { \n    v0 = _fallback.call().value(msg.value / 10).gas(!(msg.value / 10) * 2300);\n    require(v0); // checks call status, propagates error data on error\n    if (_invested[msg.sender]) {\n        v1 = msg.sender.call().value(_invested[msg.sender] * 5 / 100 * (block.number - _atBlock[msg.sender]) / 5900).gas(2300 * !(_invested[msg.sender] * 5 / 100 * (block.number - _atBlock[msg.sender]) / 5900));\n        require(v1); // checks call status, propagates error data on error\n    }\n    if (!msg.data.length) {\n        v2 = stor_1_0_19.call().value(stor_2 * msg.value / 100).gas(2300 * !(stor_2 * msg.value / 100));\n        require(v2); // checks call status, propagates error data on error\n    } else {\n        v3 = new bytes[](msg.data.length);\n        CALLDATACOPY(v3.data, 0, msg.data.length);\n        if (msg.sender == address(MEM[20 + v3])) {\n            v4 = stor_1_0_19.call().value(stor_2 * msg.value / 100).gas(2300 * !(stor_2 * msg.value / 100));\n            require(v4); // checks call status, propagates error data on error\n        } else {\n            v5 = msg.sender.call().value(msg.value * stor_3 / 100).gas(!(msg.value * stor_3 / 100) * 2300);\n            require(v5); // checks call status, propagates error data on error\n            v6 = address(MEM[20 + v3]).call().value(msg.value * stor_2 / 100).gas(!(msg.value * stor_2 / 100) * 2300);\n            require(v6); // checks call status, propagates error data on error\n        }\n        goto 0x28a;\n    }\n    _atBlock[msg.sender] = block.number;\n    _invested[msg.sender] += msg.value;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x66b3f6bf) {\n            invested(address);\n        } else if (0x8aac1362 == function_selector) {\n            atBlock(address);\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.23 16:05 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 stor_2; // STORAGE[0x2]\nuint256 stor_3; // STORAGE[0x3]\nmapping (uint256 => [uint256]) _invested; // STORAGE[0x4]\nmapping (uint256 => [uint256]) _atBlock; // STORAGE[0x5]\naddress _fallback; // STORAGE[0x0] bytes 0 to 19\naddress stor_1_0_19; // STORAGE[0x1] bytes 0 to 19\n\n\nfunction invested(address varg0) public nonPayable { \n    return _invested[varg0];\n}\n\nfunction atBlock(address varg0) public nonPayable { \n    return _atBlock[varg0];\n}\n\nfunction fallback() public payable { \n    v0 = _fallback.call().value(msg.value / 10).gas(!(msg.value / 10) * 2300);\n    require(v0); // checks call status, propagates error data on error\n    if (_invested[msg.sender]) {\n        v1 = msg.sender.call().value(_invested[msg.sender] * 5 / 100 * (block.number - _atBlock[msg.sender]) / 5900).gas(2300 * !(_invested[msg.sender] * 5 / 100 * (block.number - _atBlock[msg.sender]) / 5900));\n        require(v1); // checks call status, propagates error data on error\n    }\n    if (!msg.data.length) {\n        v2 = stor_1_0_19.call().value(stor_2 * msg.value / 100).gas(2300 * !(stor_2 * msg.value / 100));\n        require(v2); // checks call status, propagates error data on error\n    } else {\n        v3 = new bytes[](msg.data.length);\n        CALLDATACOPY(v3.data, 0, msg.data.length);\n        if (msg.sender == address(MEM[20 + v3])) {\n            v4 = stor_1_0_19.call().value(stor_2 * msg.value / 100).gas(2300 * !(stor_2 * msg.value / 100));\n            require(v4); // checks call status, propagates error data on error\n        } else {\n            v5 = msg.sender.call().value(msg.value * stor_3 / 100).gas(!(msg.value * stor_3 / 100) * 2300);\n            require(v5); // checks call status, propagates error data on error\n            v6 = address(MEM[20 + v3]).call().value(msg.value * stor_2 / 100).gas(!(msg.value * stor_2 / 100) * 2300);\n            require(v6); // checks call status, propagates error data on error\n        }\n        goto 0x28a;\n    }\n    _atBlock[msg.sender] = block.number;\n    _invested[msg.sender] += msg.value;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x66b3f6bf) {\n            invested(address);\n        } else if (0x8aac1362 == function_selector) {\n            atBlock(address);\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.23 16:05 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 stor_2; // STORAGE[0x2]\nuint256 stor_3; // STORAGE[0x3]\nmapping (uint256 => [uint256]) _invested; // STORAGE[0x4]\nmapping (uint256 => [uint256]) _atBlock; // STORAGE[0x5]\naddress _fallback; // STORAGE[0x0] bytes 0 to 19\naddress stor_1_0_19; // STORAGE[0x1] bytes 0 to 19\n\n\nfunction invested(address varg0) public nonPayable { \n    return _invested[varg0];\n}\n\nfunction atBlock(address varg0) public nonPayable { \n    return _atBlock[varg0];\n}\n\nfunction fallback() public payable { \n    v0 = _fallback.call().value(msg.value / 10).gas(!(msg.value / 10) * 2300);\n    require(v0); // checks call status, propagates error data on error\n    if (_invested[msg.sender]) {\n        v1 = msg.sender.call().value(_invested[msg.sender] * 5 / 100 * (block.number - _atBlock[msg.sender]) / 5900).gas(2300 * !(_invested[msg.sender] * 5 / 100 * (block.number - _atBlock[msg.sender]) / 5900));\n        require(v1); // checks call status, propagates error data on error\n    }\n    if (!msg.data.length) {\n        v2 = stor_1_0_19.call().value(stor_2 * msg.value / 100).gas(2300 * !(stor_2 * msg.value / 100));\n        require(v2); // checks call status, propagates error data on error\n    } else {\n        v3 = new bytes[](msg.data.length);\n        CALLDATACOPY(v3.data, 0, msg.data.length);\n        if (msg.sender == address(MEM[20 + v3])) {\n            v4 = stor_1_0_19.call().value(stor_2 * msg.value / 100).gas(2300 * !(stor_2 * msg.value / 100));\n            require(v4); // checks call status, propagates error data on error\n        } else {\n            v5 = msg.sender.call().value(msg.value * stor_3 / 100).gas(!(msg.value * stor_3 / 100) * 2300);\n            require(v5); // checks call status, propagates error data on error\n            v6 = address(MEM[20 + v3]).call().value(msg.value * stor_2 / 100).gas(!(msg.value * stor_2 / 100) * 2300);\n            require(v6); // checks call status, propagates error data on error\n        }\n        goto 0x28a;\n    }\n    _atBlock[msg.sender] = block.number;\n    _invested[msg.sender] += msg.value;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x66b3f6bf) {\n            invested(address);\n        } else if (0x8aac1362 == function_selector) {\n            atBlock(address);\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 18.345726013183594,
	"usage": {
		"completion_tokens": 484,
		"prompt_tokens": 828,
		"total_tokens": 1312
	}
}