{
	"address": "0xbc3d0e2cf6720665c49455391b239160c89cdaa1",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is the Solidity code based on your description.\n\n```solidity\npragma solidity 0.6.12;\n\ncontract MyContract {\n    mapping(address => uint256) public invested;\n    mapping(address => uint256) public payments;\n    mapping(address => address) public investedref;\n    mapping(address => uint256) public atblock;\n    mapping(address => uint256) public cashback;\n    mapping(address => uint256) public cashref;\n    mapping(address => uint256) public admcomiss;\n    address private owner;\n    uint256 private totalSupply1;\n    uint256 private price;\n    uint256 private totalSupply3;\n    uint256 private totalSupply2;\n    uint256 private totalSupply4;\n    uint256 private totalSupply5;\n    uint256 private price2;\n    address private owner1;\n    uint256 private price1;\n    uint256 private totalSupply;\n\n    constructor() public payable {\n        totalSupply1 = 0;\n        price = 0;\n        totalSupply3 = 0;\n        totalSupply2 = 0;\n        totalSupply4 = 0;\n        totalSupply5 = 0;\n        price2 = 0;\n        owner1 = address(0);\n        price1 = 0;\n        totalSupply = 0;\n        if (msg.value == 0) {\n            owner = msg.sender;\n            atblock[msg.sender] = block.number;\n        }\n    }\n\n    fallback() external payable {\n        if (invested[msg.sender] == 0) {\n            if (msg.value == 0) {\n                atblock[msg.sender] = block.number;\n                if (cashref[msg.sender] != 0) {\n                    if (cashref[msg.sender] >= 0) {\n                        totalSupply4 = cashref[msg.sender] + totalSupply4;\n                        atblock[msg.sender] = block.number;\n                        totalSupply3 = cashref[msg.sender] + totalSupply3;\n                        payments[msg.sender] = cashref[msg.sender] + payments[msg.sender];\n                        msg.sender.transfer(cashref[msg.sender]);\n                        cashref[msg.sender] = 0;\n                        if (cashback[msg.sender] != 0 && cashback[msg.sender] + cashref[msg.sender] >= cashref[msg.sender]) {\n                            totalSupply2 = cashback[msg.sender] + cashref[msg.sender] + totalSupply2;\n                            cashback[msg.sender] = 0;\n                            atblock[msg.sender] = block.number;\n                            if (cashback[msg.sender] + cashref[msg.sender] != 0) {\n                                totalSupply3 = cashback[msg.sender] + cashref[msg.sender] + totalSupply3;\n                                payments[msg.sender] = cashback[msg.sender] + cashref[msg.sender] + payments[msg.sender];\n                                payable(msg.sender).transfer(cashback[msg.sender] + cashref[msg.sender]);\n                            }\n                        }\n                        if (admcomiss[owner] != 0 && cashref[msg.sender] + admcomiss[owner] >= admcomiss[owner] && admcomiss[owner] >= 0) {\n                            totalSupply4 = cashref[msg.sender] + admcomiss[owner] + totalSupply4;\n                            cashref[msg.sender] = 0;\n                            atblock[msg.sender] = block.number;\n                            if (cashref[msg.sender] + admcomiss[owner] != 0) {\n                                totalSupply3 = cashref[msg.sender] + admcomiss[owner] + totalSupply3;\n                                payments[msg.sender] = cashref[msg.sender] + admcomiss[owner] + payments[msg.sender];\n                                payable(msg.sender).transfer(cashref[msg.sender] + admcomiss[owner]);\n                            }\n                            if (cashback[msg.sender] != 0 && cashback[msg.sender] + cashref[msg.sender] + admcomiss[owner] >= cashref[msg.sender] + admcomiss[owner]) {\n                                totalSupply2 = cashback[msg.sender] + cashref[msg.sender] + admcomiss[owner] + totalSupply2;\n                                cashback[msg.sender] = 0;\n                                atblock[msg.sender] = block.number;\n                                if (cashback[msg.sender] + cashref[msg.sender] + admcomiss[owner] != 0) {\n                                    totalSupply3 = cashback[msg.sender] + cashref[msg.sender] + admcomiss[owner] + totalSupply3;\n                                    payments[msg.sender] = cashback[msg.sender] + cashref[msg.sender] + admcomiss[owner] + payments[msg.sender];\n                                    payable(msg.sender).transfer(cashback[msg.sender] + cashref[msg.sender] + admcomiss[owner]);\n                                }\n                            }\n                        }\n                    }\n                    if (cashback[msg.sender] != 0) {\n                        if (cashback[msg.sender] >= 0) {\n                            totalSupply2 = cashback[msg.sender] + totalSupply2;\n                            atblock[msg.sender] = block.number;\n                            totalSupply3 = cashback[msg.sender] + totalSupply3;\n                            payments[msg.sender] = cashback[msg.sender] + payments[msg.sender];\n                            payable(msg.sender).transfer(cashback[msg.sender]);\n                            cashback[msg.sender] = 0;\n                        }\n                        if (admcomiss[owner] != 0 && admcomiss[owner] >= 0 && cashback[msg.sender] + admcomiss[owner] >= admcomiss[owner]) {\n                            totalSupply2 = cashback[msg.sender] + admcomiss[owner] + totalSupply2;\n                            cashback[msg.sender] = 0;\n                            atblock[msg.sender] = block.number;\n                            if (cashback[msg.sender] + admcomiss[owner] != 0) {\n                                totalSupply3 = cashback[msg.sender] + admcomiss[owner] + totalSupply3;\n                                payments[msg.sender] = cashback[msg.sender] + admcomiss[owner] + payments[msg.sender];\n                                payable(msg.sender).transfer(cashback[msg.sender] + admcomiss[owner]);\n                            }\n                        }\n                    }\n                    if (admcomiss[owner] != 0 && admcomiss[owner] >= 0) {\n                        totalSupply5 = admcomiss[owner] + totalSupply5;\n                        atblock[msg.sender] = block.number;\n                        totalSupply3 = admcomiss[owner] + totalSupply3;\n                        payments[msg.sender] = admcomiss[owner] + payments[msg.sender];\n                        payable(msg.sender).transfer(admcomiss[owner]);\n                        admcomiss[owner] = 0;\n                    }\n                }\n                if (msg.value != 0 && 10 * msg.value / msg.value == 10 && msg.value >= 0x2386f26fc10000) {\n                    admcomiss[owner] = 10 * msg.value / 100 + admcomiss[owner];\n                    if (investedref[msg.sender] == address(0)) {\n                        invested[msg.sender] = msg.value + invested[msg.sender];\n                        atblock[msg.sender] = block.number;\n                        price = msg.value + price;\n                        owner1 = msg.sender;\n                        price1 = msg.value;\n                        totalSupply = block.number;\n                        atblock[msg.sender] = block.number;\n                        if (invested[msg.sender] > 0) {\n                            price2 = msg.value + price2;\n                        }\n                    }\n                    if (5 * msg.value / msg.value == 5 && investedref[msg.sender] != address(0)) {\n                        cashref[investedref[msg.sender]] = 5 * msg.value / 100 + cashref[investedref[msg.sender]];\n                        invested[msg.sender] = msg.value + invested[msg.sender];\n                        atblock[msg.sender] = block.number;\n                        price = msg.value + price;\n                        owner1 = msg.sender;\n                        price1 = msg.value;\n                        totalSupply = block.number;\n                        atblock[msg.sender] = block.number;\n                    }\n                }\n                if (atblock[msg.sender] <= block.number && 100 * invested[msg.sender] / invested[msg.sender] == 100 && invested[msg.sender] != 0) {\n                    if (msg.value == 0) {\n                        atblock[msg.sender] = block.number;\n                        if ((block.number - atblock[msg.sender]) * (100 * invested[msg.sender] / 10000) / (100 * invested[msg.sender] / 10000) == block.number - atblock[msg.sender] && 100 * invested[msg.sender] / 10000 != 0) {\n                            atblock[msg.sender] = block.number;\n                            if ((block.number - atblock[msg.sender]) * (100 * invested[msg.sender] / 10000) / 5900 != 0) {\n                                totalSupply3 = (block.number - atblock[msg.sender]) * (100 * invested[msg.sender] / 10000) / 5900 + totalSupply3;\n                                payments[msg.sender] = (block.number - atblock[msg.sender]) * (100 * invested[msg.sender] / 10000) / 5900 + payments[msg.sender];\n                                payable(msg.sender).transfer((block.number - atblock[msg.sender]) * (100 * invested[msg.sender] / 10000) / 5900);\n                            }\n                            if (cashref[msg.sender] != 0) {\n                                if (cashref[msg.sender] + (block.number - atblock[msg.sender]) * (100 * invested[msg.sender] / 10000) / 5900 >= (block.number - atblock[msg.sender]) * (100 * invested[msg.sender] / 10000) / 5900) {\n                                    totalSupply4 = cashref[msg.sender] + (block.number - atblock[msg.sender]) * (100 * invested[msg.sender] / 10000) / 5900 + totalSupply4;\n                                    cashref[msg.sender] = 0;\n                                    atblock[msg.sender] = block.number;\n                                    if (cashref[msg.sender] + (block.number - atblock[msg.sender]) * (100 * invested[msg.sender] / 10000) / 5900 != 0) {\n                                        totalSupply3 = cashref[msg.sender] + (block.number - atblock[msg.sender]) * (100 * invested[msg.sender] / 10000) / 5900 + totalSupply3;\n                                        payments[msg.sender] = cashref[msg.sender] + (block.number - atblock[msg.sender]) * (100 * invested[msg.sender] / 10000) / 5900 + payments[msg.sender];\n                                        payable(msg.sender).transfer(cashref[msg.sender] + (block.number - atblock[msg.sender]) * (100 * invested[msg.sender] / 10000) / 5900);\n                                    }\n                                    if (cashback[msg.sender] != 0 && cashback[msg.sender] + cashref[msg.sender] >= cashref[msg.sender]) {\n                                        totalSupply2 = cashback[msg.sender] + cashref[msg.sender] + totalSupply2;\n                                        cashback[msg.sender] = 0;\n                                        atblock[msg.sender] = block.number;\n                                        if (cashback[msg.sender] + cashref[msg.sender] != 0) {\n                                            totalSupply3 = cashback[msg.sender] + cashref[msg.sender] + totalSupply3;\n                                            payments[msg.sender] = cashback[msg.sender] + cashref[msg.sender] + payments[msg.sender];\n                                            payable(msg.sender).transfer(cashback[msg.sender] + cashref[msg.sender]);\n                                        }\n                                    }\n                                    if (admcomiss[owner] != 0 && cashref[msg.sender] + admcomiss[owner] >= admcomiss[owner] && admcomiss[owner] + (block.number - atblock[msg.sender]) * (100 * invested[msg.sender] / 10000) / 5900 >= (block.number - atblock[msg.sender]) * (100 * invested[msg.sender] / 10000) / 5900) {\n                                        totalSupply4 = cashref[msg.sender] + admcomiss[owner] + (block.number - atblock[msg.sender]) * (100 * invested[msg.sender] / 10000) / 5900 + totalSupply4;\n                                        cashref[msg.sender] = 0;\n                                        atblock[msg.sender] = block.number;\n                                        if (cashref[msg.sender] + admcomiss[owner] + (block.number - atblock[msg.sender]) * (100 * invested[msg.sender] / 10000) / 5900 != 0) {\n                                            totalSupply3 = cashref[msg.sender] + admcomiss[owner] + (block.number - atblock[msg.sender]) * (100 * invested[msg.sender] / 10000) / 5900 + totalSupply3;\n                                            payments[msg.sender] = cashref[msg.sender] + admcomiss[owner] + (block.number - atblock[msg.sender]) * (100 * invested[msg.sender] / 10000) / 5900 + payments[msg.sender];\n                                            payable(msg.sender).transfer(cashref[msg.sender] + admcomiss[owner] + (block.number - atblock[msg.sender]) * (100 * invested[msg.sender] / 10000) / 5900);\n                                        }\n                                        if (cashback[msg.sender] != 0 && cashback[msg.sender] + cashref[msg.sender] + admcomiss[owner] >= cashref[msg.sender] + admcomiss[owner]) {\n                                            totalSupply2 = cashback[msg.sender] + cashref[msg.sender] + admcomiss[owner] + totalSupply2;\n                                            cashback[msg.sender] = 0;\n                                            atblock[msg.sender] = block.number;\n                                            if (cashback[msg.sender] + cashref[msg.sender] + admcomiss[owner] != 0) {\n                                                totalSupply3 = cashback[msg.sender] + cashref[msg.sender] + admcomiss[owner] + totalSupply3;\n                                                payments[msg.sender] = cashback[msg.sender] + cashref[msg.sender] + admcomiss[owner] + payments[msg.sender];\n                                                payable(msg.sender).transfer(cashback[msg.sender] + cashref[msg.sender] + admcomiss[owner]);\n                                            }\n                                        }\n                                    }\n                                }\n                                if (cashback[msg.sender] != 0) {\n                                    if (cashback[msg.sender] >= 0) {\n                                        totalSupply2 = cashback[msg.sender] + totalSupply2;\n                                        atblock[msg.sender] = block.number;\n                                        totalSupply3 = cashback[msg.sender] + totalSupply3;\n                                        payments[msg.sender] = cashback[msg.sender] + payments[msg.sender];\n                                        payable(msg.sender).transfer(cashback[msg.sender]);\n                                        cashback[msg.sender] = 0;\n                                    }\n                                    if (admcomiss[owner] != 0 && admcomiss[owner] >= 0 && cashback[msg.sender] + admcomiss[owner] >= admcomiss[owner]) {\n                                        totalSupply2 = cashback[msg.sender] + admcomiss[owner] + totalSupply2;\n                                        cashback[msg.sender] = 0;\n                                        atblock[msg.sender] = block.number;\n                                        if (cashback[msg.sender] + admcomiss[owner] != 0) {\n                                            totalSupply3 = cashback[msg.sender] + admcomiss[owner] + totalSupply3;\n                                            payments[msg.sender] = cashback[msg.sender] + admcomiss[owner] + payments[msg.sender];\n                                            payable(msg.sender).transfer(cashback[msg.sender] + admcomiss[owner]);\n                                        }\n                                    }\n                                }\n                                if (admcomiss[owner] != 0 && admcomiss[owner] >= 0) {\n                                    totalSupply5 = admcomiss[owner] + totalSupply5;\n                                    atblock[msg.sender] = block.number;\n                                    totalSupply3 = admcomiss[owner] + totalSupply3;\n                                    payments[msg.sender] = admcomiss[owner] + payments[msg.sender];\n                                    payable(msg.sender).transfer(admcomiss[owner]);\n                                    admcomiss[owner] = 0;\n                                }\n                            }\n                            if (msg.value != 0 && 10 * msg.value / msg.value == 10 && msg.value >= 0x2386f26fc10000) {\n                                admcomiss[owner] = 10 * msg.value / 100 + admcomiss[owner];\n                                if (investedref[msg.sender] == address(0)) {\n                                    invested[msg.sender] = msg.value + invested[msg.sender];\n                                    atblock[msg.sender] = block.number;\n                                    price = msg.value + price;\n                                    owner1 = msg.sender;\n                                    price1 = msg.value;\n                                    totalSupply = block.number;\n                                    atblock[msg.sender] = block.number;\n                                    if (invested[msg.sender] > 0) {\n                                        price2 = msg.value + price2;\n                                    }\n                                }\n                                if (5 * msg.value / msg.value == 5 && investedref[msg.sender] != address(0)) {\n                                    cashref[investedref[msg.sender]] = 5 * msg.value / 100 + cashref[investedref[msg.sender]];\n                                    invested[msg.sender] = msg.value + invested[msg.sender];\n                                    atblock[msg.sender] = block.number;\n                                    price = msg.value + price;\n                                    owner1 = msg.sender;\n                                    price1 = msg.value;\n                                    totalSupply = block.number;\n                                    atblock[msg.sender] = block.number;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n```\nPlease note that I couldn't find the descriptions for `20 V69@0x341@0x317 12`, `20 V105@0x341@0x317 12`, `20 V142@0x341@0x317 12`, `20 V147@0x341@0x317 12`, `20 V183@0x341@0x317 12`, so I didn't add these parts to the code. Also, the code is too large to fit within the current transaction gas limit of Ethereum, and it would be better to simplify or break it down into smaller contracts.",
				"role": "assistant"
			}
		}
	],
	"created": 1701725982,
	"id": "chatcmpl-8SAxCvkZS17RATWxJ7eCVAERhXYls",
	"input_format": "TemplateDescription",
	"ir": "For the payable constructor function.\n- the state variable totalSupply1 will be updated to 0.\n- the state variable price will be updated to 0.\n- the state variable totalSupply3 will be updated to 0.\n- the state variable totalSupply2 will be updated to 0.\n- the state variable totalSupply4 will be updated to 0.\n- the state variable totalSupply5 will be updated to 0.\n- the state variable price2 will be updated to 0.\n- the state variable owner1 will be updated to 0.\n- the state variable price1 will be updated to 0.\n- the state variable totalSupply will be updated to 0.\n- When the ether just received (i.e., msg.value) is 0:\n  - the state variable owner will be updated to caller.\n  - the state variable s_8 will be updated to the current block's number.\n\nFor the payable fallback function.\n- When the invested of caller is 0:\n  - When the ether just received (i.e., msg.value) is 0:\n    - the atblock of caller will be updated to the current block's number.\n    - When the cashref of caller is not 0:\n      - When the cashref of caller is not smaller than 0:\n        - the state variable totalSupply4 will be updated to (the cashref of caller+totalSupply4).\n        - the atblock of caller will be updated to the current block's number.\n        - the state variable totalSupply3 will be updated to (the cashref of caller+totalSupply3).\n        - the payments of caller will be updated to (the cashref of caller+the payments of caller).\n        - it transfers ether valued the cashref of caller to caller. Afterthat, \n          - the cashref of caller will be updated to 0.\n        - When the cashback of caller is not 0, and (the cashback of caller+the cashref of caller) is not smaller than the cashref of caller:\n          - the state variable totalSupply2 will be updated to ((the cashback of caller+the cashref of caller)+totalSupply2). Afterthat, \n            - the cashback of caller will be updated to 0.\n          - the atblock of caller will be updated to the current block's number.\n          - When (the cashback of caller+the cashref of caller) is not 0:\n            - the state variable totalSupply3 will be updated to ((the cashback of caller+the cashref of caller)+totalSupply3).\n            - the payments of caller will be updated to ((the cashback of caller+the cashref of caller)+the payments of caller).\n            - it transfers ether valued (the cashback of caller+the cashref of caller) to caller.\n      - When the admcomiss of owner is not 0, and (the cashref of caller+the admcomiss of owner) is not smaller than the admcomiss of owner, and the admcomiss of owner is not smaller than 0, and for owner:\n        - the state variable totalSupply4 will be updated to ((the cashref of caller+the admcomiss of owner)+totalSupply4). Afterthat, \n          - the cashref of caller will be updated to 0.\n        - the atblock of caller will be updated to the current block's number.\n        - When (the cashref of caller+the admcomiss of owner) is not 0:\n          - the state variable totalSupply3 will be updated to ((the cashref of caller+the admcomiss of owner)+totalSupply3).\n          - the payments of caller will be updated to ((the cashref of caller+the admcomiss of owner)+the payments of caller).\n          - it transfers ether valued (the cashref of caller+the admcomiss of owner) to caller.\n        - When the cashback of caller is not 0, and (the cashback of caller+(the cashref of caller+the admcomiss of owner)) is not smaller than (the cashref of caller+the admcomiss of owner):\n          - the state variable totalSupply2 will be updated to ((the cashback of caller+(the cashref of caller+the admcomiss of owner))+totalSupply2). Afterthat, \n            - the cashback of caller will be updated to 0.\n          - the atblock of caller will be updated to the current block's number.\n          - When (the cashback of caller+(the cashref of caller+the admcomiss of owner)) is not 0:\n            - the state variable totalSupply3 will be updated to ((the cashback of caller+(the cashref of caller+the admcomiss of owner))+totalSupply3).\n            - the payments of caller will be updated to ((the cashback of caller+(the cashref of caller+the admcomiss of owner))+the payments of caller).\n            - it transfers ether valued (the cashback of caller+(the cashref of caller+the admcomiss of owner)) to caller.\n    - When the cashback of caller is not 0:\n      - When the cashback of caller is not smaller than 0:\n        - the state variable totalSupply2 will be updated to (the cashback of caller+totalSupply2).\n        - the atblock of caller will be updated to the current block's number.\n        - the state variable totalSupply3 will be updated to (the cashback of caller+totalSupply3).\n        - the payments of caller will be updated to (the cashback of caller+the payments of caller).\n        - it transfers ether valued the cashback of caller to caller. Afterthat, \n          - the cashback of caller will be updated to 0.\n      - When the admcomiss of owner is not 0, and the admcomiss of owner is not smaller than 0, and (the cashback of caller+the admcomiss of owner) is not smaller than the admcomiss of owner, and for owner:\n        - the state variable totalSupply2 will be updated to ((the cashback of caller+the admcomiss of owner)+totalSupply2). Afterthat, \n          - the cashback of caller will be updated to 0.\n        - the atblock of caller will be updated to the current block's number.\n        - When (the cashback of caller+the admcomiss of owner) is not 0:\n          - the state variable totalSupply3 will be updated to ((the cashback of caller+the admcomiss of owner)+totalSupply3).\n          - the payments of caller will be updated to ((the cashback of caller+the admcomiss of owner)+the payments of caller).\n          - it transfers ether valued (the cashback of caller+the admcomiss of owner) to caller.\n    - When the admcomiss of owner is not 0, and the admcomiss of owner is not smaller than 0, and for owner:\n      - the state variable totalSupply5 will be updated to (the admcomiss of owner+totalSupply5).\n      - the atblock of caller will be updated to the current block's number.\n      - the state variable totalSupply3 will be updated to (the admcomiss of owner+totalSupply3).\n      - the payments of caller will be updated to (the admcomiss of owner+the payments of caller).\n      - it transfers ether valued the admcomiss of owner to caller. Afterthat, \n        - the admcomiss of owner will be updated to 0.\n  - When the ether just received (i.e., msg.value) is not 0, and ((10*the ether just received (i.e., msg.value))/the ether just received (i.e., msg.value)) equals to 10, and the ether just received (i.e., msg.value) is not smaller than 0x2386f26fc10000:\n    - the admcomiss of owner will be updated to (((10*the ether just received (i.e., msg.value))/100)+the admcomiss of owner).\n    - When 20 V69@0x341@0x317 12 is 0:\n      - the state variable totalSupply1 will be updated to (1+totalSupply1).\n      - the invested of caller will be updated to (the ether just received (i.e., msg.value)+the invested of caller).\n      - the atblock of caller will be updated to the current block's number.\n      - the state variable price will be updated to (the ether just received (i.e., msg.value)+price).\n      - the state variable owner1 will be updated to caller.\n      - the state variable price1 will be updated to the ether just received (i.e., msg.value).\n      - the state variable totalSupply will be updated to the current block's number.\n      - the atblock of caller will be updated to the current block's number.\n      - When the invested of caller is greater than 0:\n        - the state variable price2 will be updated to (the ether just received (i.e., msg.value)+price2).\n        - When ((5*the ether just received (i.e., msg.value))/the ether just received (i.e., msg.value)) equals to 5, and the investedref of caller is not 0:\n          - the state variable price2 will be updated to (the ether just received (i.e., msg.value)+price2).\n      - When ((5*the ether just received (i.e., msg.value))/the ether just received (i.e., msg.value)) equals to 5, and the investedref of caller is not 0:\n        - the cashref of the investedref of caller will be updated to (((5*the ether just received (i.e., msg.value))/100)+the cashref of the investedref of caller).\n        - the state variable totalSupply1 will be updated to (1+totalSupply1).\n        - the invested of caller will be updated to (the ether just received (i.e., msg.value)+the invested of caller).\n        - the atblock of caller will be updated to the current block's number.\n        - the state variable price will be updated to (the ether just received (i.e., msg.value)+price).\n        - the state variable owner1 will be updated to caller.\n        - the state variable price1 will be updated to the ether just received (i.e., msg.value).\n        - the state variable totalSupply will be updated to the current block's number.\n        - the atblock of caller will be updated to the current block's number.\n    - When 20 V105@0x341@0x317 12 is 0:\n      - the state variable totalSupply1 will be updated to (1+totalSupply1).\n      - the invested of caller will be updated to (the ether just received (i.e., msg.value)+the invested of caller).\n      - the atblock of caller will be updated to the current block's number.\n      - the state variable price will be updated to (the ether just received (i.e., msg.value)+price).\n      - the state variable owner1 will be updated to caller.\n      - the state variable price1 will be updated to the ether just received (i.e., msg.value).\n      - the state variable totalSupply will be updated to the current block's number.\n      - the atblock of caller will be updated to the current block's number.\n      - When the invested of caller is greater than 0:\n        - the state variable price2 will be updated to (the ether just received (i.e., msg.value)+price2).\n        - When ((5*the ether just received (i.e., msg.value))/the ether just received (i.e., msg.value)) equals to 5, and the investedref of caller is not 0:\n          - the state variable price2 will be updated to (the ether just received (i.e., msg.value)+price2).\n      - When ((5*the ether just received (i.e., msg.value))/the ether just received (i.e., msg.value)) equals to 5, and the investedref of caller is not 0:\n        - the cashref of the investedref of caller will be updated to (((5*the ether just received (i.e., msg.value))/100)+the cashref of the investedref of caller).\n        - the state variable totalSupply1 will be updated to (1+totalSupply1).\n        - the invested of caller will be updated to (the ether just received (i.e., msg.value)+the invested of caller).\n        - the atblock of caller will be updated to the current block's number.\n        - the state variable price will be updated to (the ether just received (i.e., msg.value)+price).\n        - the state variable owner1 will be updated to caller.\n        - the state variable price1 will be updated to the ether just received (i.e., msg.value).\n        - the state variable totalSupply will be updated to the current block's number.\n        - the atblock of caller will be updated to the current block's number.\n    - When ((5*the ether just received (i.e., msg.value))/the ether just received (i.e., msg.value)) equals to 5:\n      - When 20 V69@0x341@0x317 12 is not 0, and for users, except for 20 V69@0x341@0x317 12:\n        - the cashref of 20 V69@0x341@0x317 12 will be updated to (((5*the ether just received (i.e., msg.value))/100)+the cashref of 20 V69@0x341@0x317 12).\n        - the investedref of caller will be updated to 20 V69@0x341@0x317 12.\n        - the cashback of caller will be updated to (((5*the ether just received (i.e., msg.value))/100)+the cashback of caller).\n        - the state variable totalSupply1 will be updated to (1+totalSupply1).\n        - the invested of caller will be updated to (the ether just received (i.e., msg.value)+the invested of caller).\n        - the atblock of caller will be updated to the current block's number.\n        - the state variable price will be updated to (the ether just received (i.e., msg.value)+price).\n        - the state variable owner1 will be updated to caller.\n        - the state variable price1 will be updated to the ether just received (i.e., msg.value).\n        - the state variable totalSupply will be updated to the current block's number.\n        - the atblock of caller will be updated to the current block's number.\n        - When the invested of caller is greater than 0:\n          - the state variable price2 will be updated to (the ether just received (i.e., msg.value)+price2).\n      - For users, except for 20 v105@0x341@0x317 12, and 20 v105@0x341@0x317 12 is not 0:\n        - the cashref of 20 V105@0x341@0x317 12 will be updated to (((5*the ether just received (i.e., msg.value))/100)+the cashref of 20 V105@0x341@0x317 12).\n        - the investedref of caller will be updated to 20 V105@0x341@0x317 12.\n        - the cashback of caller will be updated to (((5*the ether just received (i.e., msg.value))/100)+the cashback of caller).\n        - the state variable totalSupply1 will be updated to (1+totalSupply1).\n        - the invested of caller will be updated to (the ether just received (i.e., msg.value)+the invested of caller).\n        - the atblock of caller will be updated to the current block's number.\n        - the state variable price will be updated to (the ether just received (i.e., msg.value)+price).\n        - the state variable owner1 will be updated to caller.\n        - the state variable price1 will be updated to the ether just received (i.e., msg.value).\n        - the state variable totalSupply will be updated to the current block's number.\n        - the atblock of caller will be updated to the current block's number.\n        - When the invested of caller is greater than 0:\n          - the state variable price2 will be updated to (the ether just received (i.e., msg.value)+price2).\n- When the atblock of caller is not greater than the current block's number, and ((100*the invested of caller)/the invested of caller) equals to 100, and the invested of caller is not 0:\n  - When the ether just received (i.e., msg.value) is 0:\n    - the atblock of caller will be updated to the current block's number.\n    - When (((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/((100*the invested of caller)/10000)) equals to (the current block's number-the atblock of caller), and ((100*the invested of caller)/10000) is not 0:\n      - the atblock of caller will be updated to the current block's number.\n      - When (((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900) is not 0:\n        - the state variable totalSupply3 will be updated to ((((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900)+totalSupply3).\n        - the payments of caller will be updated to ((((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900)+the payments of caller).\n        - it transfers ether valued (((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900) to caller.\n      - When the cashref of caller is not 0:\n        - When (the cashref of caller+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900)) is not smaller than (((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900):\n          - the state variable totalSupply4 will be updated to ((the cashref of caller+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900))+totalSupply4). Afterthat, \n            - the cashref of caller will be updated to 0.\n            - the atblock of caller will be updated to the current block's number.\n          - When (the cashref of caller+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900)) is not 0:\n            - the state variable totalSupply3 will be updated to ((the cashref of caller+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900))+totalSupply3).\n            - the payments of caller will be updated to ((the cashref of caller+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900))+the payments of caller).\n            - it transfers ether valued (the cashref of caller+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900)) to caller.\n          - When (the cashback of caller+(the cashref of caller+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900))) is not smaller than (the cashref of caller+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900)), and the cashback of caller is not 0:\n            - the state variable totalSupply2 will be updated to ((the cashback of caller+(the cashref of caller+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900)))+totalSupply2). Afterthat, \n              - the cashback of caller will be updated to 0.\n              - the atblock of caller will be updated to the current block's number.\n            - When (the cashback of caller+(the cashref of caller+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900))) is not 0:\n              - the state variable totalSupply3 will be updated to ((the cashback of caller+(the cashref of caller+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900)))+totalSupply3).\n              - the payments of caller will be updated to ((the cashback of caller+(the cashref of caller+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900)))+the payments of caller).\n              - it transfers ether valued (the cashback of caller+(the cashref of caller+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900))) to caller.\n        - When the admcomiss of owner is not 0, and (the admcomiss of owner+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900)) is not smaller than (((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900), and (the cashref of caller+(the admcomiss of owner+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900))) is not smaller than (the admcomiss of owner+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900)), and for owner:\n          - the state variable totalSupply4 will be updated to ((the cashref of caller+(the admcomiss of owner+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900)))+totalSupply4). Afterthat, \n            - the cashref of caller will be updated to 0.\n            - the atblock of caller will be updated to the current block's number.\n          - When (the cashref of caller+(the admcomiss of owner+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900))) is not 0:\n            - the state variable totalSupply3 will be updated to ((the cashref of caller+(the admcomiss of owner+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900)))+totalSupply3).\n            - the payments of caller will be updated to ((the cashref of caller+(the admcomiss of owner+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900)))+the payments of caller).\n            - it transfers ether valued (the cashref of caller+(the admcomiss of owner+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900))) to caller.\n          - When (the cashback of caller+(the cashref of caller+(the admcomiss of owner+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900)))) is not smaller than (the cashref of caller+(the admcomiss of owner+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900))), and the cashback of caller is not 0:\n            - the state variable totalSupply2 will be updated to ((the cashback of caller+(the cashref of caller+(the admcomiss of owner+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900))))+totalSupply2). Afterthat, \n              - the cashback of caller will be updated to 0.\n              - the atblock of caller will be updated to the current block's number.\n            - When (the cashback of caller+(the cashref of caller+(the admcomiss of owner+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900)))) is not 0:\n              - the state variable totalSupply3 will be updated to ((the cashback of caller+(the cashref of caller+(the admcomiss of owner+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900))))+totalSupply3).\n              - the payments of caller will be updated to ((the cashback of caller+(the cashref of caller+(the admcomiss of owner+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900))))+the payments of caller).\n              - it transfers ether valued (the cashback of caller+(the cashref of caller+(the admcomiss of owner+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900)))) to caller.\n      - When the cashback of caller is not 0:\n        - When (the cashback of caller+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900)) is not smaller than (((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900):\n          - the state variable totalSupply2 will be updated to ((the cashback of caller+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900))+totalSupply2). Afterthat, \n            - the cashback of caller will be updated to 0.\n            - the atblock of caller will be updated to the current block's number.\n          - When (the cashback of caller+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900)) is not 0:\n            - the state variable totalSupply3 will be updated to ((the cashback of caller+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900))+totalSupply3).\n            - the payments of caller will be updated to ((the cashback of caller+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900))+the payments of caller).\n            - it transfers ether valued (the cashback of caller+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900)) to caller.\n        - When the admcomiss of owner is not 0, and (the cashback of caller+(the admcomiss of owner+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900))) is not smaller than (the admcomiss of owner+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900)), and (the admcomiss of owner+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900)) is not smaller than (((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900), and for owner:\n          - the state variable totalSupply2 will be updated to ((the cashback of caller+(the admcomiss of owner+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900)))+totalSupply2). Afterthat, \n            - the cashback of caller will be updated to 0.\n            - the atblock of caller will be updated to the current block's number.\n          - When (the cashback of caller+(the admcomiss of owner+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900))) is not 0:\n            - the state variable totalSupply3 will be updated to ((the cashback of caller+(the admcomiss of owner+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900)))+totalSupply3).\n            - the payments of caller will be updated to ((the cashback of caller+(the admcomiss of owner+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900)))+the payments of caller).\n            - it transfers ether valued (the cashback of caller+(the admcomiss of owner+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900))) to caller.\n      - When the admcomiss of owner is not 0, and (the admcomiss of owner+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900)) is not smaller than (((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900), and for owner:\n        - the state variable totalSupply5 will be updated to ((the admcomiss of owner+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900))+totalSupply5). Afterthat, \n          - the admcomiss of owner will be updated to 0.\n          - the atblock of caller will be updated to the current block's number.\n        - When (the admcomiss of owner+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900)) is not 0:\n          - the state variable totalSupply3 will be updated to ((the admcomiss of owner+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900))+totalSupply3).\n          - the payments of caller will be updated to ((the admcomiss of owner+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900))+the payments of caller).\n          - it transfers ether valued (the admcomiss of owner+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900)) to caller.\n    - When ((100*the invested of caller)/10000) is 0:\n      - When the cashref of caller is not 0:\n        - When the cashref of caller is not smaller than 0:\n          - the state variable totalSupply4 will be updated to (the cashref of caller+totalSupply4).\n          - the atblock of caller will be updated to the current block's number.\n          - the state variable totalSupply3 will be updated to (the cashref of caller+totalSupply3).\n          - the payments of caller will be updated to (the cashref of caller+the payments of caller).\n          - it transfers ether valued the cashref of caller to caller. Afterthat, \n            - the cashref of caller will be updated to 0.\n          - When the cashback of caller is not 0, and (the cashback of caller+the cashref of caller) is not smaller than the cashref of caller:\n            - the state variable totalSupply2 will be updated to ((the cashback of caller+the cashref of caller)+totalSupply2). Afterthat, \n              - the cashback of caller will be updated to 0.\n            - the atblock of caller will be updated to the current block's number.\n            - When (the cashback of caller+the cashref of caller) is not 0:\n              - the state variable totalSupply3 will be updated to ((the cashback of caller+the cashref of caller)+totalSupply3).\n              - the payments of caller will be updated to ((the cashback of caller+the cashref of caller)+the payments of caller).\n              - it transfers ether valued (the cashback of caller+the cashref of caller) to caller.\n        - When the admcomiss of owner is not 0, and (the cashref of caller+the admcomiss of owner) is not smaller than the admcomiss of owner, and the admcomiss of owner is not smaller than 0, and for owner:\n          - the state variable totalSupply4 will be updated to ((the cashref of caller+the admcomiss of owner)+totalSupply4). Afterthat, \n            - the cashref of caller will be updated to 0.\n          - the atblock of caller will be updated to the current block's number.\n          - When (the cashref of caller+the admcomiss of owner) is not 0:\n            - the state variable totalSupply3 will be updated to ((the cashref of caller+the admcomiss of owner)+totalSupply3).\n            - the payments of caller will be updated to ((the cashref of caller+the admcomiss of owner)+the payments of caller).\n            - it transfers ether valued (the cashref of caller+the admcomiss of owner) to caller.\n          - When the cashback of caller is not 0, and (the cashback of caller+(the cashref of caller+the admcomiss of owner)) is not smaller than (the cashref of caller+the admcomiss of owner):\n            - the state variable totalSupply2 will be updated to ((the cashback of caller+(the cashref of caller+the admcomiss of owner))+totalSupply2). Afterthat, \n              - the cashback of caller will be updated to 0.\n            - the atblock of caller will be updated to the current block's number.\n            - When (the cashback of caller+(the cashref of caller+the admcomiss of owner)) is not 0:\n              - the state variable totalSupply3 will be updated to ((the cashback of caller+(the cashref of caller+the admcomiss of owner))+totalSupply3).\n              - the payments of caller will be updated to ((the cashback of caller+(the cashref of caller+the admcomiss of owner))+the payments of caller).\n              - it transfers ether valued (the cashback of caller+(the cashref of caller+the admcomiss of owner)) to caller.\n      - When the cashback of caller is not 0:\n        - When the cashback of caller is not smaller than 0:\n          - the state variable totalSupply2 will be updated to (the cashback of caller+totalSupply2).\n          - the atblock of caller will be updated to the current block's number.\n          - the state variable totalSupply3 will be updated to (the cashback of caller+totalSupply3).\n          - the payments of caller will be updated to (the cashback of caller+the payments of caller).\n          - it transfers ether valued the cashback of caller to caller. Afterthat, \n            - the cashback of caller will be updated to 0.\n        - When the admcomiss of owner is not 0, and the admcomiss of owner is not smaller than 0, and (the cashback of caller+the admcomiss of owner) is not smaller than the admcomiss of owner, and for owner:\n          - the state variable totalSupply2 will be updated to ((the cashback of caller+the admcomiss of owner)+totalSupply2). Afterthat, \n            - the cashback of caller will be updated to 0.\n          - the atblock of caller will be updated to the current block's number.\n          - When (the cashback of caller+the admcomiss of owner) is not 0:\n            - the state variable totalSupply3 will be updated to ((the cashback of caller+the admcomiss of owner)+totalSupply3).\n            - the payments of caller will be updated to ((the cashback of caller+the admcomiss of owner)+the payments of caller).\n            - it transfers ether valued (the cashback of caller+the admcomiss of owner) to caller.\n      - When the admcomiss of owner is not 0, and the admcomiss of owner is not smaller than 0, and for owner:\n        - the state variable totalSupply5 will be updated to (the admcomiss of owner+totalSupply5).\n        - the atblock of caller will be updated to the current block's number.\n        - the state variable totalSupply3 will be updated to (the admcomiss of owner+totalSupply3).\n        - the payments of caller will be updated to (the admcomiss of owner+the payments of caller).\n        - it transfers ether valued the admcomiss of owner to caller. Afterthat, \n          - the admcomiss of owner will be updated to 0.\n  - When the ether just received (i.e., msg.value) is not 0, and ((10*the ether just received (i.e., msg.value))/the ether just received (i.e., msg.value)) equals to 10, and the ether just received (i.e., msg.value) is not smaller than 0x2386f26fc10000:\n    - the admcomiss of owner will be updated to (((10*the ether just received (i.e., msg.value))/100)+the admcomiss of owner).\n    - When 20 V142@0x341@0x317 12 is 0:\n      - the invested of caller will be updated to (the ether just received (i.e., msg.value)+the invested of caller).\n      - the atblock of caller will be updated to the current block's number.\n      - the state variable price will be updated to (the ether just received (i.e., msg.value)+price).\n      - the state variable owner1 will be updated to caller.\n      - the state variable price1 will be updated to the ether just received (i.e., msg.value).\n      - the state variable totalSupply will be updated to the current block's number.\n      - the atblock of caller will be updated to the current block's number.\n      - When the invested of caller is greater than 0:\n        - the state variable price2 will be updated to (the ether just received (i.e., msg.value)+price2).\n        - When ((5*the ether just received (i.e., msg.value))/the ether just received (i.e., msg.value)) equals to 5, and the investedref of caller is not 0:\n          - the state variable price2 will be updated to (the ether just received (i.e., msg.value)+price2).\n      - When ((5*the ether just received (i.e., msg.value))/the ether just received (i.e., msg.value)) equals to 5, and the investedref of caller is not 0:\n        - the cashref of the investedref of caller will be updated to (((5*the ether just received (i.e., msg.value))/100)+the cashref of the investedref of caller).\n        - the invested of caller will be updated to (the ether just received (i.e., msg.value)+the invested of caller).\n        - the atblock of caller will be updated to the current block's number.\n        - the state variable price will be updated to (the ether just received (i.e., msg.value)+price).\n        - the state variable owner1 will be updated to caller.\n        - the state variable price1 will be updated to the ether just received (i.e., msg.value).\n        - the state variable totalSupply will be updated to the current block's number.\n        - the atblock of caller will be updated to the current block's number.\n    - When (((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/((100*the invested of caller)/10000)) equals to (the current block's number-the atblock of caller), and ((100*the invested of caller)/10000) is not 0:\n      - the admcomiss of owner will be updated to (((10*the ether just received (i.e., msg.value))/100)+the admcomiss of owner).\n      - When 20 V147@0x341@0x317 12 is 0:\n        - the invested of caller will be updated to (the ether just received (i.e., msg.value)+the invested of caller).\n        - the atblock of caller will be updated to the current block's number.\n        - the state variable price will be updated to (the ether just received (i.e., msg.value)+price).\n        - the state variable owner1 will be updated to caller.\n        - the state variable price1 will be updated to the ether just received (i.e., msg.value).\n        - the state variable totalSupply will be updated to the current block's number.\n        - the atblock of caller will be updated to the current block's number.\n        - When the invested of caller is greater than 0:\n          - the state variable price2 will be updated to (the ether just received (i.e., msg.value)+price2).\n          - When ((5*the ether just received (i.e., msg.value))/the ether just received (i.e., msg.value)) equals to 5, and the investedref of caller is not 0:\n            - the state variable price2 will be updated to (the ether just received (i.e., msg.value)+price2).\n        - When ((5*the ether just received (i.e., msg.value))/the ether just received (i.e., msg.value)) equals to 5, and the investedref of caller is not 0:\n          - the cashref of the investedref of caller will be updated to (((5*the ether just received (i.e., msg.value))/100)+the cashref of the investedref of caller).\n          - the invested of caller will be updated to (the ether just received (i.e., msg.value)+the invested of caller).\n          - the atblock of caller will be updated to the current block's number.\n          - the state variable price will be updated to (the ether just received (i.e., msg.value)+price).\n          - the state variable owner1 will be updated to caller.\n          - the state variable price1 will be updated to the ether just received (i.e., msg.value).\n          - the state variable totalSupply will be updated to the current block's number.\n          - the atblock of caller will be updated to the current block's number.\n      - When ((5*the ether just received (i.e., msg.value))/the ether just received (i.e., msg.value)) equals to 5:\n        - When 20 V147@0x341@0x317 12 is not 0, and for users, except for 20 V147@0x341@0x317 12:\n          - the cashref of 20 V147@0x341@0x317 12 will be updated to (((5*the ether just received (i.e., msg.value))/100)+the cashref of 20 V147@0x341@0x317 12).\n          - the investedref of caller will be updated to 20 V147@0x341@0x317 12.\n          - the invested of caller will be updated to (the ether just received (i.e., msg.value)+the invested of caller).\n          - the atblock of caller will be updated to the current block's number.\n          - the state variable price will be updated to (the ether just received (i.e., msg.value)+price).\n          - the state variable owner1 will be updated to caller.\n          - the state variable price1 will be updated to the ether just received (i.e., msg.value).\n          - the state variable totalSupply will be updated to the current block's number.\n          - the atblock of caller will be updated to the current block's number.\n          - When the invested of caller is greater than 0:\n            - the state variable price2 will be updated to (the ether just received (i.e., msg.value)+price2).\n        - For users, except for 20 v183@0x341@0x317 12, and 20 v183@0x341@0x317 12 is not 0:\n          - the cashref of 20 V183@0x341@0x317 12 will be updated to (((5*the ether just received (i.e., msg.value))/100)+the cashref of 20 V183@0x341@0x317 12).\n          - the investedref of caller will be updated to 20 V183@0x341@0x317 12.\n          - the invested of caller will be updated to (the ether just received (i.e., msg.value)+the invested of caller).\n          - the atblock of caller will be updated to the current block's number.\n          - the state variable price will be updated to (the ether just received (i.e., msg.value)+price).\n          - the state variable owner1 will be updated to caller.\n          - the state variable price1 will be updated to the ether just received (i.e., msg.value).\n          - the state variable totalSupply will be updated to the current block's number.\n          - the atblock of caller will be updated to the current block's number.\n          - When the invested of caller is greater than 0:\n            - the state variable price2 will be updated to (the ether just received (i.e., msg.value)+price2).\n        - When 20 V183@0x341@0x317 12 is 0, and the investedref of caller is not 0:\n          - the cashref of the investedref of caller will be updated to (((5*the ether just received (i.e., msg.value))/100)+the cashref of the investedref of caller).\n          - the invested of caller will be updated to (the ether just received (i.e., msg.value)+the invested of caller).\n          - the atblock of caller will be updated to the current block's number.\n          - the state variable price will be updated to (the ether just received (i.e., msg.value)+price).\n          - the state variable owner1 will be updated to caller.\n          - the state variable price1 will be updated to the ether just received (i.e., msg.value).\n          - the state variable totalSupply will be updated to the current block's number.\n          - the atblock of caller will be updated to the current block's number.\n          - When the invested of caller is greater than 0:\n            - the state variable price2 will be updated to (the ether just received (i.e., msg.value)+price2).\n      - When 20 V183@0x341@0x317 12 is 0:\n        - the invested of caller will be updated to (the ether just received (i.e., msg.value)+the invested of caller).\n        - the atblock of caller will be updated to the current block's number.\n        - the state variable price will be updated to (the ether just received (i.e., msg.value)+price).\n        - the state variable owner1 will be updated to caller.\n        - the state variable price1 will be updated to the ether just received (i.e., msg.value).\n        - the state variable totalSupply will be updated to the current block's number.\n        - the atblock of caller will be updated to the current block's number.\n        - When the invested of caller is greater than 0:\n          - the state variable price2 will be updated to (the ether just received (i.e., msg.value)+price2).\n    - When ((5*the ether just received (i.e., msg.value))/the ether just received (i.e., msg.value)) equals to 5:\n      - When 20 V142@0x341@0x317 12 is not 0, and for users, except for 20 V142@0x341@0x317 12:\n        - the cashref of 20 V142@0x341@0x317 12 will be updated to (((5*the ether just received (i.e., msg.value))/100)+the cashref of 20 V142@0x341@0x317 12).\n        - the investedref of caller will be updated to 20 V142@0x341@0x317 12.\n        - the invested of caller will be updated to (the ether just received (i.e., msg.value)+the invested of caller).\n        - the atblock of caller will be updated to the current block's number.\n        - the state variable price will be updated to (the ether just received (i.e., msg.value)+price).\n        - the state variable owner1 will be updated to caller.\n        - the state variable price1 will be updated to the ether just received (i.e., msg.value).\n        - the state variable totalSupply will be updated to the current block's number.\n        - the atblock of caller will be updated to the current block's number.\n        - When the invested of caller is greater than 0:\n          - the state variable price2 will be updated to (the ether just received (i.e., msg.value)+price2).\n      - For users, except for 20 v178@0x341@0x317 12, and 20 v178@0x341@0x317 12 is not 0:\n        - the cashref of 20 V178@0x341@0x317 12 will be updated to (((5*the ether just received (i.e., msg.value))/100)+the cashref of 20 V178@0x341@0x317 12).\n        - the investedref of caller will be updated to 20 V178@0x341@0x317 12.\n        - the invested of caller will be updated to (the ether just received (i.e., msg.value)+the invested of caller).\n        - the atblock of caller will be updated to the current block's number.\n        - the state variable price will be updated to (the ether just received (i.e., msg.value)+price).\n        - the state variable owner1 will be updated to caller.\n        - the state variable price1 will be updated to the ether just received (i.e., msg.value).\n        - the state variable totalSupply will be updated to the current block's number.\n        - the atblock of caller will be updated to the current block's number.\n        - When the invested of caller is greater than 0:\n          - the state variable price2 will be updated to (the ether just received (i.e., msg.value)+price2).\n      - When 20 V178@0x341@0x317 12 is 0, and the investedref of caller is not 0:\n        - the cashref of the investedref of caller will be updated to (((5*the ether just received (i.e., msg.value))/100)+the cashref of the investedref of caller).\n        - the invested of caller will be updated to (the ether just received (i.e., msg.value)+the invested of caller).\n        - the atblock of caller will be updated to the current block's number.\n        - the state variable price will be updated to (the ether just received (i.e., msg.value)+price).\n        - the state variable owner1 will be updated to caller.\n        - the state variable price1 will be updated to the ether just received (i.e., msg.value).\n        - the state variable totalSupply will be updated to the current block's number.\n        - the atblock of caller will be updated to the current block's number.\n        - When the invested of caller is greater than 0:\n          - the state variable price2 will be updated to (the ether just received (i.e., msg.value)+price2).\n    - When 20 V178@0x341@0x317 12 is 0:\n      - the invested of caller will be updated to (the ether just received (i.e., msg.value)+the invested of caller).\n      - the atblock of caller will be updated to the current block's number.\n      - the state variable price will be updated to (the ether just received (i.e., msg.value)+price).\n      - the state variable owner1 will be updated to caller.\n      - the state variable price1 will be updated to the ether just received (i.e., msg.value).\n      - the state variable totalSupply will be updated to the current block's number.\n      - the atblock of caller will be updated to the current block's number.\n      - When the invested of caller is greater than 0:\n        - the state variable price2 will be updated to (the ether just received (i.e., msg.value)+price2).\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following contract descriptions. Some state variables and programming specifications are provided to help you develop. ",
			"role": "system"
		},
		{
			"content": "The following is the description of the contract logic: For the payable constructor function.\n- the state variable totalSupply1 will be updated to 0.\n- the state variable price will be updated to 0.\n- the state variable totalSupply3 will be updated to 0.\n- the state variable totalSupply2 will be updated to 0.\n- the state variable totalSupply4 will be updated to 0.\n- the state variable totalSupply5 will be updated to 0.\n- the state variable price2 will be updated to 0.\n- the state variable owner1 will be updated to 0.\n- the state variable price1 will be updated to 0.\n- the state variable totalSupply will be updated to 0.\n- When the ether just received (i.e., msg.value) is 0:\n  - the state variable owner will be updated to caller.\n  - the state variable s_8 will be updated to the current block's number.\n\nFor the payable fallback function.\n- When the invested of caller is 0:\n  - When the ether just received (i.e., msg.value) is 0:\n    - the atblock of caller will be updated to the current block's number.\n    - When the cashref of caller is not 0:\n      - When the cashref of caller is not smaller than 0:\n        - the state variable totalSupply4 will be updated to (the cashref of caller+totalSupply4).\n        - the atblock of caller will be updated to the current block's number.\n        - the state variable totalSupply3 will be updated to (the cashref of caller+totalSupply3).\n        - the payments of caller will be updated to (the cashref of caller+the payments of caller).\n        - it transfers ether valued the cashref of caller to caller. Afterthat, \n          - the cashref of caller will be updated to 0.\n        - When the cashback of caller is not 0, and (the cashback of caller+the cashref of caller) is not smaller than the cashref of caller:\n          - the state variable totalSupply2 will be updated to ((the cashback of caller+the cashref of caller)+totalSupply2). Afterthat, \n            - the cashback of caller will be updated to 0.\n          - the atblock of caller will be updated to the current block's number.\n          - When (the cashback of caller+the cashref of caller) is not 0:\n            - the state variable totalSupply3 will be updated to ((the cashback of caller+the cashref of caller)+totalSupply3).\n            - the payments of caller will be updated to ((the cashback of caller+the cashref of caller)+the payments of caller).\n            - it transfers ether valued (the cashback of caller+the cashref of caller) to caller.\n      - When the admcomiss of owner is not 0, and (the cashref of caller+the admcomiss of owner) is not smaller than the admcomiss of owner, and the admcomiss of owner is not smaller than 0, and for owner:\n        - the state variable totalSupply4 will be updated to ((the cashref of caller+the admcomiss of owner)+totalSupply4). Afterthat, \n          - the cashref of caller will be updated to 0.\n        - the atblock of caller will be updated to the current block's number.\n        - When (the cashref of caller+the admcomiss of owner) is not 0:\n          - the state variable totalSupply3 will be updated to ((the cashref of caller+the admcomiss of owner)+totalSupply3).\n          - the payments of caller will be updated to ((the cashref of caller+the admcomiss of owner)+the payments of caller).\n          - it transfers ether valued (the cashref of caller+the admcomiss of owner) to caller.\n        - When the cashback of caller is not 0, and (the cashback of caller+(the cashref of caller+the admcomiss of owner)) is not smaller than (the cashref of caller+the admcomiss of owner):\n          - the state variable totalSupply2 will be updated to ((the cashback of caller+(the cashref of caller+the admcomiss of owner))+totalSupply2). Afterthat, \n            - the cashback of caller will be updated to 0.\n          - the atblock of caller will be updated to the current block's number.\n          - When (the cashback of caller+(the cashref of caller+the admcomiss of owner)) is not 0:\n            - the state variable totalSupply3 will be updated to ((the cashback of caller+(the cashref of caller+the admcomiss of owner))+totalSupply3).\n            - the payments of caller will be updated to ((the cashback of caller+(the cashref of caller+the admcomiss of owner))+the payments of caller).\n            - it transfers ether valued (the cashback of caller+(the cashref of caller+the admcomiss of owner)) to caller.\n    - When the cashback of caller is not 0:\n      - When the cashback of caller is not smaller than 0:\n        - the state variable totalSupply2 will be updated to (the cashback of caller+totalSupply2).\n        - the atblock of caller will be updated to the current block's number.\n        - the state variable totalSupply3 will be updated to (the cashback of caller+totalSupply3).\n        - the payments of caller will be updated to (the cashback of caller+the payments of caller).\n        - it transfers ether valued the cashback of caller to caller. Afterthat, \n          - the cashback of caller will be updated to 0.\n      - When the admcomiss of owner is not 0, and the admcomiss of owner is not smaller than 0, and (the cashback of caller+the admcomiss of owner) is not smaller than the admcomiss of owner, and for owner:\n        - the state variable totalSupply2 will be updated to ((the cashback of caller+the admcomiss of owner)+totalSupply2). Afterthat, \n          - the cashback of caller will be updated to 0.\n        - the atblock of caller will be updated to the current block's number.\n        - When (the cashback of caller+the admcomiss of owner) is not 0:\n          - the state variable totalSupply3 will be updated to ((the cashback of caller+the admcomiss of owner)+totalSupply3).\n          - the payments of caller will be updated to ((the cashback of caller+the admcomiss of owner)+the payments of caller).\n          - it transfers ether valued (the cashback of caller+the admcomiss of owner) to caller.\n    - When the admcomiss of owner is not 0, and the admcomiss of owner is not smaller than 0, and for owner:\n      - the state variable totalSupply5 will be updated to (the admcomiss of owner+totalSupply5).\n      - the atblock of caller will be updated to the current block's number.\n      - the state variable totalSupply3 will be updated to (the admcomiss of owner+totalSupply3).\n      - the payments of caller will be updated to (the admcomiss of owner+the payments of caller).\n      - it transfers ether valued the admcomiss of owner to caller. Afterthat, \n        - the admcomiss of owner will be updated to 0.\n  - When the ether just received (i.e., msg.value) is not 0, and ((10*the ether just received (i.e., msg.value))/the ether just received (i.e., msg.value)) equals to 10, and the ether just received (i.e., msg.value) is not smaller than 0x2386f26fc10000:\n    - the admcomiss of owner will be updated to (((10*the ether just received (i.e., msg.value))/100)+the admcomiss of owner).\n    - When 20 V69@0x341@0x317 12 is 0:\n      - the state variable totalSupply1 will be updated to (1+totalSupply1).\n      - the invested of caller will be updated to (the ether just received (i.e., msg.value)+the invested of caller).\n      - the atblock of caller will be updated to the current block's number.\n      - the state variable price will be updated to (the ether just received (i.e., msg.value)+price).\n      - the state variable owner1 will be updated to caller.\n      - the state variable price1 will be updated to the ether just received (i.e., msg.value).\n      - the state variable totalSupply will be updated to the current block's number.\n      - the atblock of caller will be updated to the current block's number.\n      - When the invested of caller is greater than 0:\n        - the state variable price2 will be updated to (the ether just received (i.e., msg.value)+price2).\n        - When ((5*the ether just received (i.e., msg.value))/the ether just received (i.e., msg.value)) equals to 5, and the investedref of caller is not 0:\n          - the state variable price2 will be updated to (the ether just received (i.e., msg.value)+price2).\n      - When ((5*the ether just received (i.e., msg.value))/the ether just received (i.e., msg.value)) equals to 5, and the investedref of caller is not 0:\n        - the cashref of the investedref of caller will be updated to (((5*the ether just received (i.e., msg.value))/100)+the cashref of the investedref of caller).\n        - the state variable totalSupply1 will be updated to (1+totalSupply1).\n        - the invested of caller will be updated to (the ether just received (i.e., msg.value)+the invested of caller).\n        - the atblock of caller will be updated to the current block's number.\n        - the state variable price will be updated to (the ether just received (i.e., msg.value)+price).\n        - the state variable owner1 will be updated to caller.\n        - the state variable price1 will be updated to the ether just received (i.e., msg.value).\n        - the state variable totalSupply will be updated to the current block's number.\n        - the atblock of caller will be updated to the current block's number.\n    - When 20 V105@0x341@0x317 12 is 0:\n      - the state variable totalSupply1 will be updated to (1+totalSupply1).\n      - the invested of caller will be updated to (the ether just received (i.e., msg.value)+the invested of caller).\n      - the atblock of caller will be updated to the current block's number.\n      - the state variable price will be updated to (the ether just received (i.e., msg.value)+price).\n      - the state variable owner1 will be updated to caller.\n      - the state variable price1 will be updated to the ether just received (i.e., msg.value).\n      - the state variable totalSupply will be updated to the current block's number.\n      - the atblock of caller will be updated to the current block's number.\n      - When the invested of caller is greater than 0:\n        - the state variable price2 will be updated to (the ether just received (i.e., msg.value)+price2).\n        - When ((5*the ether just received (i.e., msg.value))/the ether just received (i.e., msg.value)) equals to 5, and the investedref of caller is not 0:\n          - the state variable price2 will be updated to (the ether just received (i.e., msg.value)+price2).\n      - When ((5*the ether just received (i.e., msg.value))/the ether just received (i.e., msg.value)) equals to 5, and the investedref of caller is not 0:\n        - the cashref of the investedref of caller will be updated to (((5*the ether just received (i.e., msg.value))/100)+the cashref of the investedref of caller).\n        - the state variable totalSupply1 will be updated to (1+totalSupply1).\n        - the invested of caller will be updated to (the ether just received (i.e., msg.value)+the invested of caller).\n        - the atblock of caller will be updated to the current block's number.\n        - the state variable price will be updated to (the ether just received (i.e., msg.value)+price).\n        - the state variable owner1 will be updated to caller.\n        - the state variable price1 will be updated to the ether just received (i.e., msg.value).\n        - the state variable totalSupply will be updated to the current block's number.\n        - the atblock of caller will be updated to the current block's number.\n    - When ((5*the ether just received (i.e., msg.value))/the ether just received (i.e., msg.value)) equals to 5:\n      - When 20 V69@0x341@0x317 12 is not 0, and for users, except for 20 V69@0x341@0x317 12:\n        - the cashref of 20 V69@0x341@0x317 12 will be updated to (((5*the ether just received (i.e., msg.value))/100)+the cashref of 20 V69@0x341@0x317 12).\n        - the investedref of caller will be updated to 20 V69@0x341@0x317 12.\n        - the cashback of caller will be updated to (((5*the ether just received (i.e., msg.value))/100)+the cashback of caller).\n        - the state variable totalSupply1 will be updated to (1+totalSupply1).\n        - the invested of caller will be updated to (the ether just received (i.e., msg.value)+the invested of caller).\n        - the atblock of caller will be updated to the current block's number.\n        - the state variable price will be updated to (the ether just received (i.e., msg.value)+price).\n        - the state variable owner1 will be updated to caller.\n        - the state variable price1 will be updated to the ether just received (i.e., msg.value).\n        - the state variable totalSupply will be updated to the current block's number.\n        - the atblock of caller will be updated to the current block's number.\n        - When the invested of caller is greater than 0:\n          - the state variable price2 will be updated to (the ether just received (i.e., msg.value)+price2).\n      - For users, except for 20 v105@0x341@0x317 12, and 20 v105@0x341@0x317 12 is not 0:\n        - the cashref of 20 V105@0x341@0x317 12 will be updated to (((5*the ether just received (i.e., msg.value))/100)+the cashref of 20 V105@0x341@0x317 12).\n        - the investedref of caller will be updated to 20 V105@0x341@0x317 12.\n        - the cashback of caller will be updated to (((5*the ether just received (i.e., msg.value))/100)+the cashback of caller).\n        - the state variable totalSupply1 will be updated to (1+totalSupply1).\n        - the invested of caller will be updated to (the ether just received (i.e., msg.value)+the invested of caller).\n        - the atblock of caller will be updated to the current block's number.\n        - the state variable price will be updated to (the ether just received (i.e., msg.value)+price).\n        - the state variable owner1 will be updated to caller.\n        - the state variable price1 will be updated to the ether just received (i.e., msg.value).\n        - the state variable totalSupply will be updated to the current block's number.\n        - the atblock of caller will be updated to the current block's number.\n        - When the invested of caller is greater than 0:\n          - the state variable price2 will be updated to (the ether just received (i.e., msg.value)+price2).\n- When the atblock of caller is not greater than the current block's number, and ((100*the invested of caller)/the invested of caller) equals to 100, and the invested of caller is not 0:\n  - When the ether just received (i.e., msg.value) is 0:\n    - the atblock of caller will be updated to the current block's number.\n    - When (((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/((100*the invested of caller)/10000)) equals to (the current block's number-the atblock of caller), and ((100*the invested of caller)/10000) is not 0:\n      - the atblock of caller will be updated to the current block's number.\n      - When (((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900) is not 0:\n        - the state variable totalSupply3 will be updated to ((((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900)+totalSupply3).\n        - the payments of caller will be updated to ((((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900)+the payments of caller).\n        - it transfers ether valued (((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900) to caller.\n      - When the cashref of caller is not 0:\n        - When (the cashref of caller+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900)) is not smaller than (((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900):\n          - the state variable totalSupply4 will be updated to ((the cashref of caller+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900))+totalSupply4). Afterthat, \n            - the cashref of caller will be updated to 0.\n            - the atblock of caller will be updated to the current block's number.\n          - When (the cashref of caller+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900)) is not 0:\n            - the state variable totalSupply3 will be updated to ((the cashref of caller+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900))+totalSupply3).\n            - the payments of caller will be updated to ((the cashref of caller+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900))+the payments of caller).\n            - it transfers ether valued (the cashref of caller+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900)) to caller.\n          - When (the cashback of caller+(the cashref of caller+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900))) is not smaller than (the cashref of caller+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900)), and the cashback of caller is not 0:\n            - the state variable totalSupply2 will be updated to ((the cashback of caller+(the cashref of caller+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900)))+totalSupply2). Afterthat, \n              - the cashback of caller will be updated to 0.\n              - the atblock of caller will be updated to the current block's number.\n            - When (the cashback of caller+(the cashref of caller+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900))) is not 0:\n              - the state variable totalSupply3 will be updated to ((the cashback of caller+(the cashref of caller+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900)))+totalSupply3).\n              - the payments of caller will be updated to ((the cashback of caller+(the cashref of caller+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900)))+the payments of caller).\n              - it transfers ether valued (the cashback of caller+(the cashref of caller+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900))) to caller.\n        - When the admcomiss of owner is not 0, and (the admcomiss of owner+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900)) is not smaller than (((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900), and (the cashref of caller+(the admcomiss of owner+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900))) is not smaller than (the admcomiss of owner+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900)), and for owner:\n          - the state variable totalSupply4 will be updated to ((the cashref of caller+(the admcomiss of owner+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900)))+totalSupply4). Afterthat, \n            - the cashref of caller will be updated to 0.\n            - the atblock of caller will be updated to the current block's number.\n          - When (the cashref of caller+(the admcomiss of owner+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900))) is not 0:\n            - the state variable totalSupply3 will be updated to ((the cashref of caller+(the admcomiss of owner+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900)))+totalSupply3).\n            - the payments of caller will be updated to ((the cashref of caller+(the admcomiss of owner+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900)))+the payments of caller).\n            - it transfers ether valued (the cashref of caller+(the admcomiss of owner+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900))) to caller.\n          - When (the cashback of caller+(the cashref of caller+(the admcomiss of owner+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900)))) is not smaller than (the cashref of caller+(the admcomiss of owner+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900))), and the cashback of caller is not 0:\n            - the state variable totalSupply2 will be updated to ((the cashback of caller+(the cashref of caller+(the admcomiss of owner+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900))))+totalSupply2). Afterthat, \n              - the cashback of caller will be updated to 0.\n              - the atblock of caller will be updated to the current block's number.\n            - When (the cashback of caller+(the cashref of caller+(the admcomiss of owner+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900)))) is not 0:\n              - the state variable totalSupply3 will be updated to ((the cashback of caller+(the cashref of caller+(the admcomiss of owner+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900))))+totalSupply3).\n              - the payments of caller will be updated to ((the cashback of caller+(the cashref of caller+(the admcomiss of owner+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900))))+the payments of caller).\n              - it transfers ether valued (the cashback of caller+(the cashref of caller+(the admcomiss of owner+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900)))) to caller.\n      - When the cashback of caller is not 0:\n        - When (the cashback of caller+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900)) is not smaller than (((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900):\n          - the state variable totalSupply2 will be updated to ((the cashback of caller+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900))+totalSupply2). Afterthat, \n            - the cashback of caller will be updated to 0.\n            - the atblock of caller will be updated to the current block's number.\n          - When (the cashback of caller+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900)) is not 0:\n            - the state variable totalSupply3 will be updated to ((the cashback of caller+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900))+totalSupply3).\n            - the payments of caller will be updated to ((the cashback of caller+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900))+the payments of caller).\n            - it transfers ether valued (the cashback of caller+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900)) to caller.\n        - When the admcomiss of owner is not 0, and (the cashback of caller+(the admcomiss of owner+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900))) is not smaller than (the admcomiss of owner+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900)), and (the admcomiss of owner+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900)) is not smaller than (((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900), and for owner:\n          - the state variable totalSupply2 will be updated to ((the cashback of caller+(the admcomiss of owner+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900)))+totalSupply2). Afterthat, \n            - the cashback of caller will be updated to 0.\n            - the atblock of caller will be updated to the current block's number.\n          - When (the cashback of caller+(the admcomiss of owner+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900))) is not 0:\n            - the state variable totalSupply3 will be updated to ((the cashback of caller+(the admcomiss of owner+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900)))+totalSupply3).\n            - the payments of caller will be updated to ((the cashback of caller+(the admcomiss of owner+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900)))+the payments of caller).\n            - it transfers ether valued (the cashback of caller+(the admcomiss of owner+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900))) to caller.\n      - When the admcomiss of owner is not 0, and (the admcomiss of owner+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900)) is not smaller than (((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900), and for owner:\n        - the state variable totalSupply5 will be updated to ((the admcomiss of owner+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900))+totalSupply5). Afterthat, \n          - the admcomiss of owner will be updated to 0.\n          - the atblock of caller will be updated to the current block's number.\n        - When (the admcomiss of owner+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900)) is not 0:\n          - the state variable totalSupply3 will be updated to ((the admcomiss of owner+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900))+totalSupply3).\n          - the payments of caller will be updated to ((the admcomiss of owner+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900))+the payments of caller).\n          - it transfers ether valued (the admcomiss of owner+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900)) to caller.\n    - When ((100*the invested of caller)/10000) is 0:\n      - When the cashref of caller is not 0:\n        - When the cashref of caller is not smaller than 0:\n          - the state variable totalSupply4 will be updated to (the cashref of caller+totalSupply4).\n          - the atblock of caller will be updated to the current block's number.\n          - the state variable totalSupply3 will be updated to (the cashref of caller+totalSupply3).\n          - the payments of caller will be updated to (the cashref of caller+the payments of caller).\n          - it transfers ether valued the cashref of caller to caller. Afterthat, \n            - the cashref of caller will be updated to 0.\n          - When the cashback of caller is not 0, and (the cashback of caller+the cashref of caller) is not smaller than the cashref of caller:\n            - the state variable totalSupply2 will be updated to ((the cashback of caller+the cashref of caller)+totalSupply2). Afterthat, \n              - the cashback of caller will be updated to 0.\n            - the atblock of caller will be updated to the current block's number.\n            - When (the cashback of caller+the cashref of caller) is not 0:\n              - the state variable totalSupply3 will be updated to ((the cashback of caller+the cashref of caller)+totalSupply3).\n              - the payments of caller will be updated to ((the cashback of caller+the cashref of caller)+the payments of caller).\n              - it transfers ether valued (the cashback of caller+the cashref of caller) to caller.\n        - When the admcomiss of owner is not 0, and (the cashref of caller+the admcomiss of owner) is not smaller than the admcomiss of owner, and the admcomiss of owner is not smaller than 0, and for owner:\n          - the state variable totalSupply4 will be updated to ((the cashref of caller+the admcomiss of owner)+totalSupply4). Afterthat, \n            - the cashref of caller will be updated to 0.\n          - the atblock of caller will be updated to the current block's number.\n          - When (the cashref of caller+the admcomiss of owner) is not 0:\n            - the state variable totalSupply3 will be updated to ((the cashref of caller+the admcomiss of owner)+totalSupply3).\n            - the payments of caller will be updated to ((the cashref of caller+the admcomiss of owner)+the payments of caller).\n            - it transfers ether valued (the cashref of caller+the admcomiss of owner) to caller.\n          - When the cashback of caller is not 0, and (the cashback of caller+(the cashref of caller+the admcomiss of owner)) is not smaller than (the cashref of caller+the admcomiss of owner):\n            - the state variable totalSupply2 will be updated to ((the cashback of caller+(the cashref of caller+the admcomiss of owner))+totalSupply2). Afterthat, \n              - the cashback of caller will be updated to 0.\n            - the atblock of caller will be updated to the current block's number.\n            - When (the cashback of caller+(the cashref of caller+the admcomiss of owner)) is not 0:\n              - the state variable totalSupply3 will be updated to ((the cashback of caller+(the cashref of caller+the admcomiss of owner))+totalSupply3).\n              - the payments of caller will be updated to ((the cashback of caller+(the cashref of caller+the admcomiss of owner))+the payments of caller).\n              - it transfers ether valued (the cashback of caller+(the cashref of caller+the admcomiss of owner)) to caller.\n      - When the cashback of caller is not 0:\n        - When the cashback of caller is not smaller than 0:\n          - the state variable totalSupply2 will be updated to (the cashback of caller+totalSupply2).\n          - the atblock of caller will be updated to the current block's number.\n          - the state variable totalSupply3 will be updated to (the cashback of caller+totalSupply3).\n          - the payments of caller will be updated to (the cashback of caller+the payments of caller).\n          - it transfers ether valued the cashback of caller to caller. Afterthat, \n            - the cashback of caller will be updated to 0.\n        - When the admcomiss of owner is not 0, and the admcomiss of owner is not smaller than 0, and (the cashback of caller+the admcomiss of owner) is not smaller than the admcomiss of owner, and for owner:\n          - the state variable totalSupply2 will be updated to ((the cashback of caller+the admcomiss of owner)+totalSupply2). Afterthat, \n            - the cashback of caller will be updated to 0.\n          - the atblock of caller will be updated to the current block's number.\n          - When (the cashback of caller+the admcomiss of owner) is not 0:\n            - the state variable totalSupply3 will be updated to ((the cashback of caller+the admcomiss of owner)+totalSupply3).\n            - the payments of caller will be updated to ((the cashback of caller+the admcomiss of owner)+the payments of caller).\n            - it transfers ether valued (the cashback of caller+the admcomiss of owner) to caller.\n      - When the admcomiss of owner is not 0, and the admcomiss of owner is not smaller than 0, and for owner:\n        - the state variable totalSupply5 will be updated to (the admcomiss of owner+totalSupply5).\n        - the atblock of caller will be updated to the current block's number.\n        - the state variable totalSupply3 will be updated to (the admcomiss of owner+totalSupply3).\n        - the payments of caller will be updated to (the admcomiss of owner+the payments of caller).\n        - it transfers ether valued the admcomiss of owner to caller. Afterthat, \n          - the admcomiss of owner will be updated to 0.\n  - When the ether just received (i.e., msg.value) is not 0, and ((10*the ether just received (i.e., msg.value))/the ether just received (i.e., msg.value)) equals to 10, and the ether just received (i.e., msg.value) is not smaller than 0x2386f26fc10000:\n    - the admcomiss of owner will be updated to (((10*the ether just received (i.e., msg.value))/100)+the admcomiss of owner).\n    - When 20 V142@0x341@0x317 12 is 0:\n      - the invested of caller will be updated to (the ether just received (i.e., msg.value)+the invested of caller).\n      - the atblock of caller will be updated to the current block's number.\n      - the state variable price will be updated to (the ether just received (i.e., msg.value)+price).\n      - the state variable owner1 will be updated to caller.\n      - the state variable price1 will be updated to the ether just received (i.e., msg.value).\n      - the state variable totalSupply will be updated to the current block's number.\n      - the atblock of caller will be updated to the current block's number.\n      - When the invested of caller is greater than 0:\n        - the state variable price2 will be updated to (the ether just received (i.e., msg.value)+price2).\n        - When ((5*the ether just received (i.e., msg.value))/the ether just received (i.e., msg.value)) equals to 5, and the investedref of caller is not 0:\n          - the state variable price2 will be updated to (the ether just received (i.e., msg.value)+price2).\n      - When ((5*the ether just received (i.e., msg.value))/the ether just received (i.e., msg.value)) equals to 5, and the investedref of caller is not 0:\n        - the cashref of the investedref of caller will be updated to (((5*the ether just received (i.e., msg.value))/100)+the cashref of the investedref of caller).\n        - the invested of caller will be updated to (the ether just received (i.e., msg.value)+the invested of caller).\n        - the atblock of caller will be updated to the current block's number.\n        - the state variable price will be updated to (the ether just received (i.e., msg.value)+price).\n        - the state variable owner1 will be updated to caller.\n        - the state variable price1 will be updated to the ether just received (i.e., msg.value).\n        - the state variable totalSupply will be updated to the current block's number.\n        - the atblock of caller will be updated to the current block's number.\n    - When (((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/((100*the invested of caller)/10000)) equals to (the current block's number-the atblock of caller), and ((100*the invested of caller)/10000) is not 0:\n      - the admcomiss of owner will be updated to (((10*the ether just received (i.e., msg.value))/100)+the admcomiss of owner).\n      - When 20 V147@0x341@0x317 12 is 0:\n        - the invested of caller will be updated to (the ether just received (i.e., msg.value)+the invested of caller).\n        - the atblock of caller will be updated to the current block's number.\n        - the state variable price will be updated to (the ether just received (i.e., msg.value)+price).\n        - the state variable owner1 will be updated to caller.\n        - the state variable price1 will be updated to the ether just received (i.e., msg.value).\n        - the state variable totalSupply will be updated to the current block's number.\n        - the atblock of caller will be updated to the current block's number.\n        - When the invested of caller is greater than 0:\n          - the state variable price2 will be updated to (the ether just received (i.e., msg.value)+price2).\n          - When ((5*the ether just received (i.e., msg.value))/the ether just received (i.e., msg.value)) equals to 5, and the investedref of caller is not 0:\n            - the state variable price2 will be updated to (the ether just received (i.e., msg.value)+price2).\n        - When ((5*the ether just received (i.e., msg.value))/the ether just received (i.e., msg.value)) equals to 5, and the investedref of caller is not 0:\n          - the cashref of the investedref of caller will be updated to (((5*the ether just received (i.e., msg.value))/100)+the cashref of the investedref of caller).\n          - the invested of caller will be updated to (the ether just received (i.e., msg.value)+the invested of caller).\n          - the atblock of caller will be updated to the current block's number.\n          - the state variable price will be updated to (the ether just received (i.e., msg.value)+price).\n          - the state variable owner1 will be updated to caller.\n          - the state variable price1 will be updated to the ether just received (i.e., msg.value).\n          - the state variable totalSupply will be updated to the current block's number.\n          - the atblock of caller will be updated to the current block's number.\n      - When ((5*the ether just received (i.e., msg.value))/the ether just received (i.e., msg.value)) equals to 5:\n        - When 20 V147@0x341@0x317 12 is not 0, and for users, except for 20 V147@0x341@0x317 12:\n          - the cashref of 20 V147@0x341@0x317 12 will be updated to (((5*the ether just received (i.e., msg.value))/100)+the cashref of 20 V147@0x341@0x317 12).\n          - the investedref of caller will be updated to 20 V147@0x341@0x317 12.\n          - the invested of caller will be updated to (the ether just received (i.e., msg.value)+the invested of caller).\n          - the atblock of caller will be updated to the current block's number.\n          - the state variable price will be updated to (the ether just received (i.e., msg.value)+price).\n          - the state variable owner1 will be updated to caller.\n          - the state variable price1 will be updated to the ether just received (i.e., msg.value).\n          - the state variable totalSupply will be updated to the current block's number.\n          - the atblock of caller will be updated to the current block's number.\n          - When the invested of caller is greater than 0:\n            - the state variable price2 will be updated to (the ether just received (i.e., msg.value)+price2).\n        - For users, except for 20 v183@0x341@0x317 12, and 20 v183@0x341@0x317 12 is not 0:\n          - the cashref of 20 V183@0x341@0x317 12 will be updated to (((5*the ether just received (i.e., msg.value))/100)+the cashref of 20 V183@0x341@0x317 12).\n          - the investedref of caller will be updated to 20 V183@0x341@0x317 12.\n          - the invested of caller will be updated to (the ether just received (i.e., msg.value)+the invested of caller).\n          - the atblock of caller will be updated to the current block's number.\n          - the state variable price will be updated to (the ether just received (i.e., msg.value)+price).\n          - the state variable owner1 will be updated to caller.\n          - the state variable price1 will be updated to the ether just received (i.e., msg.value).\n          - the state variable totalSupply will be updated to the current block's number.\n          - the atblock of caller will be updated to the current block's number.\n          - When the invested of caller is greater than 0:\n            - the state variable price2 will be updated to (the ether just received (i.e., msg.value)+price2).\n        - When 20 V183@0x341@0x317 12 is 0, and the investedref of caller is not 0:\n          - the cashref of the investedref of caller will be updated to (((5*the ether just received (i.e., msg.value))/100)+the cashref of the investedref of caller).\n          - the invested of caller will be updated to (the ether just received (i.e., msg.value)+the invested of caller).\n          - the atblock of caller will be updated to the current block's number.\n          - the state variable price will be updated to (the ether just received (i.e., msg.value)+price).\n          - the state variable owner1 will be updated to caller.\n          - the state variable price1 will be updated to the ether just received (i.e., msg.value).\n          - the state variable totalSupply will be updated to the current block's number.\n          - the atblock of caller will be updated to the current block's number.\n          - When the invested of caller is greater than 0:\n            - the state variable price2 will be updated to (the ether just received (i.e., msg.value)+price2).\n      - When 20 V183@0x341@0x317 12 is 0:\n        - the invested of caller will be updated to (the ether just received (i.e., msg.value)+the invested of caller).\n        - the atblock of caller will be updated to the current block's number.\n        - the state variable price will be updated to (the ether just received (i.e., msg.value)+price).\n        - the state variable owner1 will be updated to caller.\n        - the state variable price1 will be updated to the ether just received (i.e., msg.value).\n        - the state variable totalSupply will be updated to the current block's number.\n        - the atblock of caller will be updated to the current block's number.\n        - When the invested of caller is greater than 0:\n          - the state variable price2 will be updated to (the ether just received (i.e., msg.value)+price2).\n    - When ((5*the ether just received (i.e., msg.value))/the ether just received (i.e., msg.value)) equals to 5:\n      - When 20 V142@0x341@0x317 12 is not 0, and for users, except for 20 V142@0x341@0x317 12:\n        - the cashref of 20 V142@0x341@0x317 12 will be updated to (((5*the ether just received (i.e., msg.value))/100)+the cashref of 20 V142@0x341@0x317 12).\n        - the investedref of caller will be updated to 20 V142@0x341@0x317 12.\n        - the invested of caller will be updated to (the ether just received (i.e., msg.value)+the invested of caller).\n        - the atblock of caller will be updated to the current block's number.\n        - the state variable price will be updated to (the ether just received (i.e., msg.value)+price).\n        - the state variable owner1 will be updated to caller.\n        - the state variable price1 will be updated to the ether just received (i.e., msg.value).\n        - the state variable totalSupply will be updated to the current block's number.\n        - the atblock of caller will be updated to the current block's number.\n        - When the invested of caller is greater than 0:\n          - the state variable price2 will be updated to (the ether just received (i.e., msg.value)+price2).\n      - For users, except for 20 v178@0x341@0x317 12, and 20 v178@0x341@0x317 12 is not 0:\n        - the cashref of 20 V178@0x341@0x317 12 will be updated to (((5*the ether just received (i.e., msg.value))/100)+the cashref of 20 V178@0x341@0x317 12).\n        - the investedref of caller will be updated to 20 V178@0x341@0x317 12.\n        - the invested of caller will be updated to (the ether just received (i.e., msg.value)+the invested of caller).\n        - the atblock of caller will be updated to the current block's number.\n        - the state variable price will be updated to (the ether just received (i.e., msg.value)+price).\n        - the state variable owner1 will be updated to caller.\n        - the state variable price1 will be updated to the ether just received (i.e., msg.value).\n        - the state variable totalSupply will be updated to the current block's number.\n        - the atblock of caller will be updated to the current block's number.\n        - When the invested of caller is greater than 0:\n          - the state variable price2 will be updated to (the ether just received (i.e., msg.value)+price2).\n      - When 20 V178@0x341@0x317 12 is 0, and the investedref of caller is not 0:\n        - the cashref of the investedref of caller will be updated to (((5*the ether just received (i.e., msg.value))/100)+the cashref of the investedref of caller).\n        - the invested of caller will be updated to (the ether just received (i.e., msg.value)+the invested of caller).\n        - the atblock of caller will be updated to the current block's number.\n        - the state variable price will be updated to (the ether just received (i.e., msg.value)+price).\n        - the state variable owner1 will be updated to caller.\n        - the state variable price1 will be updated to the ether just received (i.e., msg.value).\n        - the state variable totalSupply will be updated to the current block's number.\n        - the atblock of caller will be updated to the current block's number.\n        - When the invested of caller is greater than 0:\n          - the state variable price2 will be updated to (the ether just received (i.e., msg.value)+price2).\n    - When 20 V178@0x341@0x317 12 is 0:\n      - the invested of caller will be updated to (the ether just received (i.e., msg.value)+the invested of caller).\n      - the atblock of caller will be updated to the current block's number.\n      - the state variable price will be updated to (the ether just received (i.e., msg.value)+price).\n      - the state variable owner1 will be updated to caller.\n      - the state variable price1 will be updated to the ether just received (i.e., msg.value).\n      - the state variable totalSupply will be updated to the current block's number.\n      - the atblock of caller will be updated to the current block's number.\n      - When the invested of caller is greater than 0:\n        - the state variable price2 will be updated to (the ether just received (i.e., msg.value)+price2).\n\n.\n Here are some state variables with their corresponding types: public state variable `invested` is typed mapping,public state variable `payments` is typed mapping,public state variable `investedref` is typed mapping,public state variable `atblock` is typed mapping,public state variable `cashback` is typed mapping,public state variable `cashref` is typed mapping,public state variable `admcomiss` is typed mapping,private state variable `owner` is typed address,private state variable `totalSupply1` is typed uint256,private state variable `price` is typed uint256,private state variable `totalSupply3` is typed uint256,private state variable `totalSupply2` is typed uint256,private state variable `totalSupply4` is typed uint256,private state variable `totalSupply5` is typed uint256,private state variable `price2` is typed uint256,private state variable `owner1` is typed address,private state variable `price1` is typed uint256,private state variable `totalSupply` is typed uint256.\n Here are some programming specifications: - You must declare a variable before you can use it, but the same variable cannot be declared twice\n- You must lock the pragma and use a stable version (e.g., pragma solidity `0.6.12`).\n- For exteranal calls, you must use `.call()` instead of `.transfer()` and `.send()`.\n- The target address who receives ether must be `payable address` type.\n- You must make the function `payable` if `msg.value` is used in the public functions.\n- From security perspectives, you must check whether an overflow or underflow is possible before an arithmetic operation (e.g., safemath operations), and you should determine whether the user's address is empty before transferring ether to the him.\n- You cannot import external resources because you are a separate contract.\n- You must use the following methods in new versions rather than old methods\n  - For some built-in functions, \n    - `abi.encodePacked(...) returns (bytes memory)` performs packed encoding of arguments to bytes.\n    - `keccak256(bytes memory) returns (bytes32)` computes the Keccak-256 hash of the input.\n    - `sha256(bytes memory) returns (bytes32)` computes the SHA-256 hash of the input.\n    - `ecrecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) returns (address)` recovers the address associated with the public key from elliptic curve signature or return zero on error. \n  - For some properties,\n    - `block.number (uint)` returns the current block number.\n    - `block.timestamp (uint)` returns the current block timestamp as seconds since unix epoch.\n    - `blockhash(uint blockNumber) returns (bytes32)` returns the hash of the given block.\n- `0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff` means `-1`, so `+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff` indeed means `-1`.\n",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following contract descriptions. Some state variables and programming specifications are provided to help you develop. The following is the description of the contract logic: For the payable constructor function.\n- the state variable totalSupply1 will be updated to 0.\n- the state variable price will be updated to 0.\n- the state variable totalSupply3 will be updated to 0.\n- the state variable totalSupply2 will be updated to 0.\n- the state variable totalSupply4 will be updated to 0.\n- the state variable totalSupply5 will be updated to 0.\n- the state variable price2 will be updated to 0.\n- the state variable owner1 will be updated to 0.\n- the state variable price1 will be updated to 0.\n- the state variable totalSupply will be updated to 0.\n- When the ether just received (i.e., msg.value) is 0:\n  - the state variable owner will be updated to caller.\n  - the state variable s_8 will be updated to the current block's number.\n\nFor the payable fallback function.\n- When the invested of caller is 0:\n  - When the ether just received (i.e., msg.value) is 0:\n    - the atblock of caller will be updated to the current block's number.\n    - When the cashref of caller is not 0:\n      - When the cashref of caller is not smaller than 0:\n        - the state variable totalSupply4 will be updated to (the cashref of caller+totalSupply4).\n        - the atblock of caller will be updated to the current block's number.\n        - the state variable totalSupply3 will be updated to (the cashref of caller+totalSupply3).\n        - the payments of caller will be updated to (the cashref of caller+the payments of caller).\n        - it transfers ether valued the cashref of caller to caller. Afterthat, \n          - the cashref of caller will be updated to 0.\n        - When the cashback of caller is not 0, and (the cashback of caller+the cashref of caller) is not smaller than the cashref of caller:\n          - the state variable totalSupply2 will be updated to ((the cashback of caller+the cashref of caller)+totalSupply2). Afterthat, \n            - the cashback of caller will be updated to 0.\n          - the atblock of caller will be updated to the current block's number.\n          - When (the cashback of caller+the cashref of caller) is not 0:\n            - the state variable totalSupply3 will be updated to ((the cashback of caller+the cashref of caller)+totalSupply3).\n            - the payments of caller will be updated to ((the cashback of caller+the cashref of caller)+the payments of caller).\n            - it transfers ether valued (the cashback of caller+the cashref of caller) to caller.\n      - When the admcomiss of owner is not 0, and (the cashref of caller+the admcomiss of owner) is not smaller than the admcomiss of owner, and the admcomiss of owner is not smaller than 0, and for owner:\n        - the state variable totalSupply4 will be updated to ((the cashref of caller+the admcomiss of owner)+totalSupply4). Afterthat, \n          - the cashref of caller will be updated to 0.\n        - the atblock of caller will be updated to the current block's number.\n        - When (the cashref of caller+the admcomiss of owner) is not 0:\n          - the state variable totalSupply3 will be updated to ((the cashref of caller+the admcomiss of owner)+totalSupply3).\n          - the payments of caller will be updated to ((the cashref of caller+the admcomiss of owner)+the payments of caller).\n          - it transfers ether valued (the cashref of caller+the admcomiss of owner) to caller.\n        - When the cashback of caller is not 0, and (the cashback of caller+(the cashref of caller+the admcomiss of owner)) is not smaller than (the cashref of caller+the admcomiss of owner):\n          - the state variable totalSupply2 will be updated to ((the cashback of caller+(the cashref of caller+the admcomiss of owner))+totalSupply2). Afterthat, \n            - the cashback of caller will be updated to 0.\n          - the atblock of caller will be updated to the current block's number.\n          - When (the cashback of caller+(the cashref of caller+the admcomiss of owner)) is not 0:\n            - the state variable totalSupply3 will be updated to ((the cashback of caller+(the cashref of caller+the admcomiss of owner))+totalSupply3).\n            - the payments of caller will be updated to ((the cashback of caller+(the cashref of caller+the admcomiss of owner))+the payments of caller).\n            - it transfers ether valued (the cashback of caller+(the cashref of caller+the admcomiss of owner)) to caller.\n    - When the cashback of caller is not 0:\n      - When the cashback of caller is not smaller than 0:\n        - the state variable totalSupply2 will be updated to (the cashback of caller+totalSupply2).\n        - the atblock of caller will be updated to the current block's number.\n        - the state variable totalSupply3 will be updated to (the cashback of caller+totalSupply3).\n        - the payments of caller will be updated to (the cashback of caller+the payments of caller).\n        - it transfers ether valued the cashback of caller to caller. Afterthat, \n          - the cashback of caller will be updated to 0.\n      - When the admcomiss of owner is not 0, and the admcomiss of owner is not smaller than 0, and (the cashback of caller+the admcomiss of owner) is not smaller than the admcomiss of owner, and for owner:\n        - the state variable totalSupply2 will be updated to ((the cashback of caller+the admcomiss of owner)+totalSupply2). Afterthat, \n          - the cashback of caller will be updated to 0.\n        - the atblock of caller will be updated to the current block's number.\n        - When (the cashback of caller+the admcomiss of owner) is not 0:\n          - the state variable totalSupply3 will be updated to ((the cashback of caller+the admcomiss of owner)+totalSupply3).\n          - the payments of caller will be updated to ((the cashback of caller+the admcomiss of owner)+the payments of caller).\n          - it transfers ether valued (the cashback of caller+the admcomiss of owner) to caller.\n    - When the admcomiss of owner is not 0, and the admcomiss of owner is not smaller than 0, and for owner:\n      - the state variable totalSupply5 will be updated to (the admcomiss of owner+totalSupply5).\n      - the atblock of caller will be updated to the current block's number.\n      - the state variable totalSupply3 will be updated to (the admcomiss of owner+totalSupply3).\n      - the payments of caller will be updated to (the admcomiss of owner+the payments of caller).\n      - it transfers ether valued the admcomiss of owner to caller. Afterthat, \n        - the admcomiss of owner will be updated to 0.\n  - When the ether just received (i.e., msg.value) is not 0, and ((10*the ether just received (i.e., msg.value))/the ether just received (i.e., msg.value)) equals to 10, and the ether just received (i.e., msg.value) is not smaller than 0x2386f26fc10000:\n    - the admcomiss of owner will be updated to (((10*the ether just received (i.e., msg.value))/100)+the admcomiss of owner).\n    - When 20 V69@0x341@0x317 12 is 0:\n      - the state variable totalSupply1 will be updated to (1+totalSupply1).\n      - the invested of caller will be updated to (the ether just received (i.e., msg.value)+the invested of caller).\n      - the atblock of caller will be updated to the current block's number.\n      - the state variable price will be updated to (the ether just received (i.e., msg.value)+price).\n      - the state variable owner1 will be updated to caller.\n      - the state variable price1 will be updated to the ether just received (i.e., msg.value).\n      - the state variable totalSupply will be updated to the current block's number.\n      - the atblock of caller will be updated to the current block's number.\n      - When the invested of caller is greater than 0:\n        - the state variable price2 will be updated to (the ether just received (i.e., msg.value)+price2).\n        - When ((5*the ether just received (i.e., msg.value))/the ether just received (i.e., msg.value)) equals to 5, and the investedref of caller is not 0:\n          - the state variable price2 will be updated to (the ether just received (i.e., msg.value)+price2).\n      - When ((5*the ether just received (i.e., msg.value))/the ether just received (i.e., msg.value)) equals to 5, and the investedref of caller is not 0:\n        - the cashref of the investedref of caller will be updated to (((5*the ether just received (i.e., msg.value))/100)+the cashref of the investedref of caller).\n        - the state variable totalSupply1 will be updated to (1+totalSupply1).\n        - the invested of caller will be updated to (the ether just received (i.e., msg.value)+the invested of caller).\n        - the atblock of caller will be updated to the current block's number.\n        - the state variable price will be updated to (the ether just received (i.e., msg.value)+price).\n        - the state variable owner1 will be updated to caller.\n        - the state variable price1 will be updated to the ether just received (i.e., msg.value).\n        - the state variable totalSupply will be updated to the current block's number.\n        - the atblock of caller will be updated to the current block's number.\n    - When 20 V105@0x341@0x317 12 is 0:\n      - the state variable totalSupply1 will be updated to (1+totalSupply1).\n      - the invested of caller will be updated to (the ether just received (i.e., msg.value)+the invested of caller).\n      - the atblock of caller will be updated to the current block's number.\n      - the state variable price will be updated to (the ether just received (i.e., msg.value)+price).\n      - the state variable owner1 will be updated to caller.\n      - the state variable price1 will be updated to the ether just received (i.e., msg.value).\n      - the state variable totalSupply will be updated to the current block's number.\n      - the atblock of caller will be updated to the current block's number.\n      - When the invested of caller is greater than 0:\n        - the state variable price2 will be updated to (the ether just received (i.e., msg.value)+price2).\n        - When ((5*the ether just received (i.e., msg.value))/the ether just received (i.e., msg.value)) equals to 5, and the investedref of caller is not 0:\n          - the state variable price2 will be updated to (the ether just received (i.e., msg.value)+price2).\n      - When ((5*the ether just received (i.e., msg.value))/the ether just received (i.e., msg.value)) equals to 5, and the investedref of caller is not 0:\n        - the cashref of the investedref of caller will be updated to (((5*the ether just received (i.e., msg.value))/100)+the cashref of the investedref of caller).\n        - the state variable totalSupply1 will be updated to (1+totalSupply1).\n        - the invested of caller will be updated to (the ether just received (i.e., msg.value)+the invested of caller).\n        - the atblock of caller will be updated to the current block's number.\n        - the state variable price will be updated to (the ether just received (i.e., msg.value)+price).\n        - the state variable owner1 will be updated to caller.\n        - the state variable price1 will be updated to the ether just received (i.e., msg.value).\n        - the state variable totalSupply will be updated to the current block's number.\n        - the atblock of caller will be updated to the current block's number.\n    - When ((5*the ether just received (i.e., msg.value))/the ether just received (i.e., msg.value)) equals to 5:\n      - When 20 V69@0x341@0x317 12 is not 0, and for users, except for 20 V69@0x341@0x317 12:\n        - the cashref of 20 V69@0x341@0x317 12 will be updated to (((5*the ether just received (i.e., msg.value))/100)+the cashref of 20 V69@0x341@0x317 12).\n        - the investedref of caller will be updated to 20 V69@0x341@0x317 12.\n        - the cashback of caller will be updated to (((5*the ether just received (i.e., msg.value))/100)+the cashback of caller).\n        - the state variable totalSupply1 will be updated to (1+totalSupply1).\n        - the invested of caller will be updated to (the ether just received (i.e., msg.value)+the invested of caller).\n        - the atblock of caller will be updated to the current block's number.\n        - the state variable price will be updated to (the ether just received (i.e., msg.value)+price).\n        - the state variable owner1 will be updated to caller.\n        - the state variable price1 will be updated to the ether just received (i.e., msg.value).\n        - the state variable totalSupply will be updated to the current block's number.\n        - the atblock of caller will be updated to the current block's number.\n        - When the invested of caller is greater than 0:\n          - the state variable price2 will be updated to (the ether just received (i.e., msg.value)+price2).\n      - For users, except for 20 v105@0x341@0x317 12, and 20 v105@0x341@0x317 12 is not 0:\n        - the cashref of 20 V105@0x341@0x317 12 will be updated to (((5*the ether just received (i.e., msg.value))/100)+the cashref of 20 V105@0x341@0x317 12).\n        - the investedref of caller will be updated to 20 V105@0x341@0x317 12.\n        - the cashback of caller will be updated to (((5*the ether just received (i.e., msg.value))/100)+the cashback of caller).\n        - the state variable totalSupply1 will be updated to (1+totalSupply1).\n        - the invested of caller will be updated to (the ether just received (i.e., msg.value)+the invested of caller).\n        - the atblock of caller will be updated to the current block's number.\n        - the state variable price will be updated to (the ether just received (i.e., msg.value)+price).\n        - the state variable owner1 will be updated to caller.\n        - the state variable price1 will be updated to the ether just received (i.e., msg.value).\n        - the state variable totalSupply will be updated to the current block's number.\n        - the atblock of caller will be updated to the current block's number.\n        - When the invested of caller is greater than 0:\n          - the state variable price2 will be updated to (the ether just received (i.e., msg.value)+price2).\n- When the atblock of caller is not greater than the current block's number, and ((100*the invested of caller)/the invested of caller) equals to 100, and the invested of caller is not 0:\n  - When the ether just received (i.e., msg.value) is 0:\n    - the atblock of caller will be updated to the current block's number.\n    - When (((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/((100*the invested of caller)/10000)) equals to (the current block's number-the atblock of caller), and ((100*the invested of caller)/10000) is not 0:\n      - the atblock of caller will be updated to the current block's number.\n      - When (((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900) is not 0:\n        - the state variable totalSupply3 will be updated to ((((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900)+totalSupply3).\n        - the payments of caller will be updated to ((((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900)+the payments of caller).\n        - it transfers ether valued (((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900) to caller.\n      - When the cashref of caller is not 0:\n        - When (the cashref of caller+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900)) is not smaller than (((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900):\n          - the state variable totalSupply4 will be updated to ((the cashref of caller+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900))+totalSupply4). Afterthat, \n            - the cashref of caller will be updated to 0.\n            - the atblock of caller will be updated to the current block's number.\n          - When (the cashref of caller+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900)) is not 0:\n            - the state variable totalSupply3 will be updated to ((the cashref of caller+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900))+totalSupply3).\n            - the payments of caller will be updated to ((the cashref of caller+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900))+the payments of caller).\n            - it transfers ether valued (the cashref of caller+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900)) to caller.\n          - When (the cashback of caller+(the cashref of caller+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900))) is not smaller than (the cashref of caller+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900)), and the cashback of caller is not 0:\n            - the state variable totalSupply2 will be updated to ((the cashback of caller+(the cashref of caller+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900)))+totalSupply2). Afterthat, \n              - the cashback of caller will be updated to 0.\n              - the atblock of caller will be updated to the current block's number.\n            - When (the cashback of caller+(the cashref of caller+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900))) is not 0:\n              - the state variable totalSupply3 will be updated to ((the cashback of caller+(the cashref of caller+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900)))+totalSupply3).\n              - the payments of caller will be updated to ((the cashback of caller+(the cashref of caller+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900)))+the payments of caller).\n              - it transfers ether valued (the cashback of caller+(the cashref of caller+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900))) to caller.\n        - When the admcomiss of owner is not 0, and (the admcomiss of owner+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900)) is not smaller than (((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900), and (the cashref of caller+(the admcomiss of owner+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900))) is not smaller than (the admcomiss of owner+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900)), and for owner:\n          - the state variable totalSupply4 will be updated to ((the cashref of caller+(the admcomiss of owner+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900)))+totalSupply4). Afterthat, \n            - the cashref of caller will be updated to 0.\n            - the atblock of caller will be updated to the current block's number.\n          - When (the cashref of caller+(the admcomiss of owner+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900))) is not 0:\n            - the state variable totalSupply3 will be updated to ((the cashref of caller+(the admcomiss of owner+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900)))+totalSupply3).\n            - the payments of caller will be updated to ((the cashref of caller+(the admcomiss of owner+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900)))+the payments of caller).\n            - it transfers ether valued (the cashref of caller+(the admcomiss of owner+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900))) to caller.\n          - When (the cashback of caller+(the cashref of caller+(the admcomiss of owner+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900)))) is not smaller than (the cashref of caller+(the admcomiss of owner+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900))), and the cashback of caller is not 0:\n            - the state variable totalSupply2 will be updated to ((the cashback of caller+(the cashref of caller+(the admcomiss of owner+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900))))+totalSupply2). Afterthat, \n              - the cashback of caller will be updated to 0.\n              - the atblock of caller will be updated to the current block's number.\n            - When (the cashback of caller+(the cashref of caller+(the admcomiss of owner+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900)))) is not 0:\n              - the state variable totalSupply3 will be updated to ((the cashback of caller+(the cashref of caller+(the admcomiss of owner+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900))))+totalSupply3).\n              - the payments of caller will be updated to ((the cashback of caller+(the cashref of caller+(the admcomiss of owner+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900))))+the payments of caller).\n              - it transfers ether valued (the cashback of caller+(the cashref of caller+(the admcomiss of owner+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900)))) to caller.\n      - When the cashback of caller is not 0:\n        - When (the cashback of caller+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900)) is not smaller than (((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900):\n          - the state variable totalSupply2 will be updated to ((the cashback of caller+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900))+totalSupply2). Afterthat, \n            - the cashback of caller will be updated to 0.\n            - the atblock of caller will be updated to the current block's number.\n          - When (the cashback of caller+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900)) is not 0:\n            - the state variable totalSupply3 will be updated to ((the cashback of caller+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900))+totalSupply3).\n            - the payments of caller will be updated to ((the cashback of caller+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900))+the payments of caller).\n            - it transfers ether valued (the cashback of caller+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900)) to caller.\n        - When the admcomiss of owner is not 0, and (the cashback of caller+(the admcomiss of owner+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900))) is not smaller than (the admcomiss of owner+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900)), and (the admcomiss of owner+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900)) is not smaller than (((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900), and for owner:\n          - the state variable totalSupply2 will be updated to ((the cashback of caller+(the admcomiss of owner+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900)))+totalSupply2). Afterthat, \n            - the cashback of caller will be updated to 0.\n            - the atblock of caller will be updated to the current block's number.\n          - When (the cashback of caller+(the admcomiss of owner+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900))) is not 0:\n            - the state variable totalSupply3 will be updated to ((the cashback of caller+(the admcomiss of owner+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900)))+totalSupply3).\n            - the payments of caller will be updated to ((the cashback of caller+(the admcomiss of owner+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900)))+the payments of caller).\n            - it transfers ether valued (the cashback of caller+(the admcomiss of owner+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900))) to caller.\n      - When the admcomiss of owner is not 0, and (the admcomiss of owner+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900)) is not smaller than (((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900), and for owner:\n        - the state variable totalSupply5 will be updated to ((the admcomiss of owner+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900))+totalSupply5). Afterthat, \n          - the admcomiss of owner will be updated to 0.\n          - the atblock of caller will be updated to the current block's number.\n        - When (the admcomiss of owner+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900)) is not 0:\n          - the state variable totalSupply3 will be updated to ((the admcomiss of owner+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900))+totalSupply3).\n          - the payments of caller will be updated to ((the admcomiss of owner+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900))+the payments of caller).\n          - it transfers ether valued (the admcomiss of owner+(((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/5900)) to caller.\n    - When ((100*the invested of caller)/10000) is 0:\n      - When the cashref of caller is not 0:\n        - When the cashref of caller is not smaller than 0:\n          - the state variable totalSupply4 will be updated to (the cashref of caller+totalSupply4).\n          - the atblock of caller will be updated to the current block's number.\n          - the state variable totalSupply3 will be updated to (the cashref of caller+totalSupply3).\n          - the payments of caller will be updated to (the cashref of caller+the payments of caller).\n          - it transfers ether valued the cashref of caller to caller. Afterthat, \n            - the cashref of caller will be updated to 0.\n          - When the cashback of caller is not 0, and (the cashback of caller+the cashref of caller) is not smaller than the cashref of caller:\n            - the state variable totalSupply2 will be updated to ((the cashback of caller+the cashref of caller)+totalSupply2). Afterthat, \n              - the cashback of caller will be updated to 0.\n            - the atblock of caller will be updated to the current block's number.\n            - When (the cashback of caller+the cashref of caller) is not 0:\n              - the state variable totalSupply3 will be updated to ((the cashback of caller+the cashref of caller)+totalSupply3).\n              - the payments of caller will be updated to ((the cashback of caller+the cashref of caller)+the payments of caller).\n              - it transfers ether valued (the cashback of caller+the cashref of caller) to caller.\n        - When the admcomiss of owner is not 0, and (the cashref of caller+the admcomiss of owner) is not smaller than the admcomiss of owner, and the admcomiss of owner is not smaller than 0, and for owner:\n          - the state variable totalSupply4 will be updated to ((the cashref of caller+the admcomiss of owner)+totalSupply4). Afterthat, \n            - the cashref of caller will be updated to 0.\n          - the atblock of caller will be updated to the current block's number.\n          - When (the cashref of caller+the admcomiss of owner) is not 0:\n            - the state variable totalSupply3 will be updated to ((the cashref of caller+the admcomiss of owner)+totalSupply3).\n            - the payments of caller will be updated to ((the cashref of caller+the admcomiss of owner)+the payments of caller).\n            - it transfers ether valued (the cashref of caller+the admcomiss of owner) to caller.\n          - When the cashback of caller is not 0, and (the cashback of caller+(the cashref of caller+the admcomiss of owner)) is not smaller than (the cashref of caller+the admcomiss of owner):\n            - the state variable totalSupply2 will be updated to ((the cashback of caller+(the cashref of caller+the admcomiss of owner))+totalSupply2). Afterthat, \n              - the cashback of caller will be updated to 0.\n            - the atblock of caller will be updated to the current block's number.\n            - When (the cashback of caller+(the cashref of caller+the admcomiss of owner)) is not 0:\n              - the state variable totalSupply3 will be updated to ((the cashback of caller+(the cashref of caller+the admcomiss of owner))+totalSupply3).\n              - the payments of caller will be updated to ((the cashback of caller+(the cashref of caller+the admcomiss of owner))+the payments of caller).\n              - it transfers ether valued (the cashback of caller+(the cashref of caller+the admcomiss of owner)) to caller.\n      - When the cashback of caller is not 0:\n        - When the cashback of caller is not smaller than 0:\n          - the state variable totalSupply2 will be updated to (the cashback of caller+totalSupply2).\n          - the atblock of caller will be updated to the current block's number.\n          - the state variable totalSupply3 will be updated to (the cashback of caller+totalSupply3).\n          - the payments of caller will be updated to (the cashback of caller+the payments of caller).\n          - it transfers ether valued the cashback of caller to caller. Afterthat, \n            - the cashback of caller will be updated to 0.\n        - When the admcomiss of owner is not 0, and the admcomiss of owner is not smaller than 0, and (the cashback of caller+the admcomiss of owner) is not smaller than the admcomiss of owner, and for owner:\n          - the state variable totalSupply2 will be updated to ((the cashback of caller+the admcomiss of owner)+totalSupply2). Afterthat, \n            - the cashback of caller will be updated to 0.\n          - the atblock of caller will be updated to the current block's number.\n          - When (the cashback of caller+the admcomiss of owner) is not 0:\n            - the state variable totalSupply3 will be updated to ((the cashback of caller+the admcomiss of owner)+totalSupply3).\n            - the payments of caller will be updated to ((the cashback of caller+the admcomiss of owner)+the payments of caller).\n            - it transfers ether valued (the cashback of caller+the admcomiss of owner) to caller.\n      - When the admcomiss of owner is not 0, and the admcomiss of owner is not smaller than 0, and for owner:\n        - the state variable totalSupply5 will be updated to (the admcomiss of owner+totalSupply5).\n        - the atblock of caller will be updated to the current block's number.\n        - the state variable totalSupply3 will be updated to (the admcomiss of owner+totalSupply3).\n        - the payments of caller will be updated to (the admcomiss of owner+the payments of caller).\n        - it transfers ether valued the admcomiss of owner to caller. Afterthat, \n          - the admcomiss of owner will be updated to 0.\n  - When the ether just received (i.e., msg.value) is not 0, and ((10*the ether just received (i.e., msg.value))/the ether just received (i.e., msg.value)) equals to 10, and the ether just received (i.e., msg.value) is not smaller than 0x2386f26fc10000:\n    - the admcomiss of owner will be updated to (((10*the ether just received (i.e., msg.value))/100)+the admcomiss of owner).\n    - When 20 V142@0x341@0x317 12 is 0:\n      - the invested of caller will be updated to (the ether just received (i.e., msg.value)+the invested of caller).\n      - the atblock of caller will be updated to the current block's number.\n      - the state variable price will be updated to (the ether just received (i.e., msg.value)+price).\n      - the state variable owner1 will be updated to caller.\n      - the state variable price1 will be updated to the ether just received (i.e., msg.value).\n      - the state variable totalSupply will be updated to the current block's number.\n      - the atblock of caller will be updated to the current block's number.\n      - When the invested of caller is greater than 0:\n        - the state variable price2 will be updated to (the ether just received (i.e., msg.value)+price2).\n        - When ((5*the ether just received (i.e., msg.value))/the ether just received (i.e., msg.value)) equals to 5, and the investedref of caller is not 0:\n          - the state variable price2 will be updated to (the ether just received (i.e., msg.value)+price2).\n      - When ((5*the ether just received (i.e., msg.value))/the ether just received (i.e., msg.value)) equals to 5, and the investedref of caller is not 0:\n        - the cashref of the investedref of caller will be updated to (((5*the ether just received (i.e., msg.value))/100)+the cashref of the investedref of caller).\n        - the invested of caller will be updated to (the ether just received (i.e., msg.value)+the invested of caller).\n        - the atblock of caller will be updated to the current block's number.\n        - the state variable price will be updated to (the ether just received (i.e., msg.value)+price).\n        - the state variable owner1 will be updated to caller.\n        - the state variable price1 will be updated to the ether just received (i.e., msg.value).\n        - the state variable totalSupply will be updated to the current block's number.\n        - the atblock of caller will be updated to the current block's number.\n    - When (((the current block's number-the atblock of caller)*((100*the invested of caller)/10000))/((100*the invested of caller)/10000)) equals to (the current block's number-the atblock of caller), and ((100*the invested of caller)/10000) is not 0:\n      - the admcomiss of owner will be updated to (((10*the ether just received (i.e., msg.value))/100)+the admcomiss of owner).\n      - When 20 V147@0x341@0x317 12 is 0:\n        - the invested of caller will be updated to (the ether just received (i.e., msg.value)+the invested of caller).\n        - the atblock of caller will be updated to the current block's number.\n        - the state variable price will be updated to (the ether just received (i.e., msg.value)+price).\n        - the state variable owner1 will be updated to caller.\n        - the state variable price1 will be updated to the ether just received (i.e., msg.value).\n        - the state variable totalSupply will be updated to the current block's number.\n        - the atblock of caller will be updated to the current block's number.\n        - When the invested of caller is greater than 0:\n          - the state variable price2 will be updated to (the ether just received (i.e., msg.value)+price2).\n          - When ((5*the ether just received (i.e., msg.value))/the ether just received (i.e., msg.value)) equals to 5, and the investedref of caller is not 0:\n            - the state variable price2 will be updated to (the ether just received (i.e., msg.value)+price2).\n        - When ((5*the ether just received (i.e., msg.value))/the ether just received (i.e., msg.value)) equals to 5, and the investedref of caller is not 0:\n          - the cashref of the investedref of caller will be updated to (((5*the ether just received (i.e., msg.value))/100)+the cashref of the investedref of caller).\n          - the invested of caller will be updated to (the ether just received (i.e., msg.value)+the invested of caller).\n          - the atblock of caller will be updated to the current block's number.\n          - the state variable price will be updated to (the ether just received (i.e., msg.value)+price).\n          - the state variable owner1 will be updated to caller.\n          - the state variable price1 will be updated to the ether just received (i.e., msg.value).\n          - the state variable totalSupply will be updated to the current block's number.\n          - the atblock of caller will be updated to the current block's number.\n      - When ((5*the ether just received (i.e., msg.value))/the ether just received (i.e., msg.value)) equals to 5:\n        - When 20 V147@0x341@0x317 12 is not 0, and for users, except for 20 V147@0x341@0x317 12:\n          - the cashref of 20 V147@0x341@0x317 12 will be updated to (((5*the ether just received (i.e., msg.value))/100)+the cashref of 20 V147@0x341@0x317 12).\n          - the investedref of caller will be updated to 20 V147@0x341@0x317 12.\n          - the invested of caller will be updated to (the ether just received (i.e., msg.value)+the invested of caller).\n          - the atblock of caller will be updated to the current block's number.\n          - the state variable price will be updated to (the ether just received (i.e., msg.value)+price).\n          - the state variable owner1 will be updated to caller.\n          - the state variable price1 will be updated to the ether just received (i.e., msg.value).\n          - the state variable totalSupply will be updated to the current block's number.\n          - the atblock of caller will be updated to the current block's number.\n          - When the invested of caller is greater than 0:\n            - the state variable price2 will be updated to (the ether just received (i.e., msg.value)+price2).\n        - For users, except for 20 v183@0x341@0x317 12, and 20 v183@0x341@0x317 12 is not 0:\n          - the cashref of 20 V183@0x341@0x317 12 will be updated to (((5*the ether just received (i.e., msg.value))/100)+the cashref of 20 V183@0x341@0x317 12).\n          - the investedref of caller will be updated to 20 V183@0x341@0x317 12.\n          - the invested of caller will be updated to (the ether just received (i.e., msg.value)+the invested of caller).\n          - the atblock of caller will be updated to the current block's number.\n          - the state variable price will be updated to (the ether just received (i.e., msg.value)+price).\n          - the state variable owner1 will be updated to caller.\n          - the state variable price1 will be updated to the ether just received (i.e., msg.value).\n          - the state variable totalSupply will be updated to the current block's number.\n          - the atblock of caller will be updated to the current block's number.\n          - When the invested of caller is greater than 0:\n            - the state variable price2 will be updated to (the ether just received (i.e., msg.value)+price2).\n        - When 20 V183@0x341@0x317 12 is 0, and the investedref of caller is not 0:\n          - the cashref of the investedref of caller will be updated to (((5*the ether just received (i.e., msg.value))/100)+the cashref of the investedref of caller).\n          - the invested of caller will be updated to (the ether just received (i.e., msg.value)+the invested of caller).\n          - the atblock of caller will be updated to the current block's number.\n          - the state variable price will be updated to (the ether just received (i.e., msg.value)+price).\n          - the state variable owner1 will be updated to caller.\n          - the state variable price1 will be updated to the ether just received (i.e., msg.value).\n          - the state variable totalSupply will be updated to the current block's number.\n          - the atblock of caller will be updated to the current block's number.\n          - When the invested of caller is greater than 0:\n            - the state variable price2 will be updated to (the ether just received (i.e., msg.value)+price2).\n      - When 20 V183@0x341@0x317 12 is 0:\n        - the invested of caller will be updated to (the ether just received (i.e., msg.value)+the invested of caller).\n        - the atblock of caller will be updated to the current block's number.\n        - the state variable price will be updated to (the ether just received (i.e., msg.value)+price).\n        - the state variable owner1 will be updated to caller.\n        - the state variable price1 will be updated to the ether just received (i.e., msg.value).\n        - the state variable totalSupply will be updated to the current block's number.\n        - the atblock of caller will be updated to the current block's number.\n        - When the invested of caller is greater than 0:\n          - the state variable price2 will be updated to (the ether just received (i.e., msg.value)+price2).\n    - When ((5*the ether just received (i.e., msg.value))/the ether just received (i.e., msg.value)) equals to 5:\n      - When 20 V142@0x341@0x317 12 is not 0, and for users, except for 20 V142@0x341@0x317 12:\n        - the cashref of 20 V142@0x341@0x317 12 will be updated to (((5*the ether just received (i.e., msg.value))/100)+the cashref of 20 V142@0x341@0x317 12).\n        - the investedref of caller will be updated to 20 V142@0x341@0x317 12.\n        - the invested of caller will be updated to (the ether just received (i.e., msg.value)+the invested of caller).\n        - the atblock of caller will be updated to the current block's number.\n        - the state variable price will be updated to (the ether just received (i.e., msg.value)+price).\n        - the state variable owner1 will be updated to caller.\n        - the state variable price1 will be updated to the ether just received (i.e., msg.value).\n        - the state variable totalSupply will be updated to the current block's number.\n        - the atblock of caller will be updated to the current block's number.\n        - When the invested of caller is greater than 0:\n          - the state variable price2 will be updated to (the ether just received (i.e., msg.value)+price2).\n      - For users, except for 20 v178@0x341@0x317 12, and 20 v178@0x341@0x317 12 is not 0:\n        - the cashref of 20 V178@0x341@0x317 12 will be updated to (((5*the ether just received (i.e., msg.value))/100)+the cashref of 20 V178@0x341@0x317 12).\n        - the investedref of caller will be updated to 20 V178@0x341@0x317 12.\n        - the invested of caller will be updated to (the ether just received (i.e., msg.value)+the invested of caller).\n        - the atblock of caller will be updated to the current block's number.\n        - the state variable price will be updated to (the ether just received (i.e., msg.value)+price).\n        - the state variable owner1 will be updated to caller.\n        - the state variable price1 will be updated to the ether just received (i.e., msg.value).\n        - the state variable totalSupply will be updated to the current block's number.\n        - the atblock of caller will be updated to the current block's number.\n        - When the invested of caller is greater than 0:\n          - the state variable price2 will be updated to (the ether just received (i.e., msg.value)+price2).\n      - When 20 V178@0x341@0x317 12 is 0, and the investedref of caller is not 0:\n        - the cashref of the investedref of caller will be updated to (((5*the ether just received (i.e., msg.value))/100)+the cashref of the investedref of caller).\n        - the invested of caller will be updated to (the ether just received (i.e., msg.value)+the invested of caller).\n        - the atblock of caller will be updated to the current block's number.\n        - the state variable price will be updated to (the ether just received (i.e., msg.value)+price).\n        - the state variable owner1 will be updated to caller.\n        - the state variable price1 will be updated to the ether just received (i.e., msg.value).\n        - the state variable totalSupply will be updated to the current block's number.\n        - the atblock of caller will be updated to the current block's number.\n        - When the invested of caller is greater than 0:\n          - the state variable price2 will be updated to (the ether just received (i.e., msg.value)+price2).\n    - When 20 V178@0x341@0x317 12 is 0:\n      - the invested of caller will be updated to (the ether just received (i.e., msg.value)+the invested of caller).\n      - the atblock of caller will be updated to the current block's number.\n      - the state variable price will be updated to (the ether just received (i.e., msg.value)+price).\n      - the state variable owner1 will be updated to caller.\n      - the state variable price1 will be updated to the ether just received (i.e., msg.value).\n      - the state variable totalSupply will be updated to the current block's number.\n      - the atblock of caller will be updated to the current block's number.\n      - When the invested of caller is greater than 0:\n        - the state variable price2 will be updated to (the ether just received (i.e., msg.value)+price2).\n\n.\n Here are some state variables with their corresponding types: public state variable `invested` is typed mapping,public state variable `payments` is typed mapping,public state variable `investedref` is typed mapping,public state variable `atblock` is typed mapping,public state variable `cashback` is typed mapping,public state variable `cashref` is typed mapping,public state variable `admcomiss` is typed mapping,private state variable `owner` is typed address,private state variable `totalSupply1` is typed uint256,private state variable `price` is typed uint256,private state variable `totalSupply3` is typed uint256,private state variable `totalSupply2` is typed uint256,private state variable `totalSupply4` is typed uint256,private state variable `totalSupply5` is typed uint256,private state variable `price2` is typed uint256,private state variable `owner1` is typed address,private state variable `price1` is typed uint256,private state variable `totalSupply` is typed uint256.\n Here are some programming specifications: - You must declare a variable before you can use it, but the same variable cannot be declared twice\n- You must lock the pragma and use a stable version (e.g., pragma solidity `0.6.12`).\n- For exteranal calls, you must use `.call()` instead of `.transfer()` and `.send()`.\n- The target address who receives ether must be `payable address` type.\n- You must make the function `payable` if `msg.value` is used in the public functions.\n- From security perspectives, you must check whether an overflow or underflow is possible before an arithmetic operation (e.g., safemath operations), and you should determine whether the user's address is empty before transferring ether to the him.\n- You cannot import external resources because you are a separate contract.\n- You must use the following methods in new versions rather than old methods\n  - For some built-in functions, \n    - `abi.encodePacked(...) returns (bytes memory)` performs packed encoding of arguments to bytes.\n    - `keccak256(bytes memory) returns (bytes32)` computes the Keccak-256 hash of the input.\n    - `sha256(bytes memory) returns (bytes32)` computes the SHA-256 hash of the input.\n    - `ecrecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) returns (address)` recovers the address associated with the public key from elliptic curve signature or return zero on error. \n  - For some properties,\n    - `block.number (uint)` returns the current block number.\n    - `block.timestamp (uint)` returns the current block timestamp as seconds since unix epoch.\n    - `blockhash(uint blockNumber) returns (bytes32)` returns the hash of the given block.\n- `0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff` means `-1`, so `+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff` indeed means `-1`.\n",
	"status": "1",
	"time_cost": 223.54068779945374,
	"usage": {
		"completion_tokens": 3761,
		"prompt_tokens": 12018,
		"total_tokens": 15779
	}
}