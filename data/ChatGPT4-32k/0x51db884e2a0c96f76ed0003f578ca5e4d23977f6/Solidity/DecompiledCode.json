{
	"address": "0x51db884e2a0c96f76ed0003f578ca5e4d23977f6",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Sure, based on the decompiled code you provided, here's the Solidity contract code:\n\n```solidity\npragma solidity ^0.5.0;\n\ncontract MyContract {\n    mapping (address => uint256) private _depositsOf;\n    uint256 private _fallback;\n    address private _primary;\n    \n    event PrimaryTransferred(address indexed newPrimary);\n    event LogEthReceived(address indexed sender, uint256 value);\n    event LogEthSent(address indexed receiver, uint256 value);\n\n    constructor(address primary) public {\n        _primary = primary;\n    }\n\n    function depositsOf(address addr) public view returns (uint256) { \n        return _depositsOf[addr];\n    }\n\n    function deposit(address addr) public payable { \n        require(msg.sender == _primary, \"Only primary can deposit\");\n        _depositsOf[addr] += msg.value;\n        _fallback += msg.value;\n        emit LogEthReceived(addr, msg.value);\n    }\n\n    function withdraw(address addr, uint256 amount) public { \n        require(msg.sender == _primary, \"Only primary can withdraw\");\n        require(amount > 0 && amount <= address(this).balance, 'Insufficient funds in the charity fund');\n        (bool success, ) = addr.call.value(amount)(\"\");\n        require(success);\n        emit LogEthSent(addr, amount);\n    }\n\n    function() external payable { \n        _fallback += msg.value;\n    }\n\n    function transferPrimary(address newPrimary) public { \n        require(msg.sender == _primary, \"Only primary can transfer\");\n        require(newPrimary != address(0), \"New primary is the zero address\");\n        _primary = newPrimary;\n        emit PrimaryTransferred(_primary);\n    }\n\n    function primary() public view returns (address) { \n        return _primary;\n    }\n\n    function sumStats() public view returns (uint256) { \n        return _fallback;\n    }\n}\n```\n\nThis contract allows the `_primary` account to deposit and withdraw funds, keep track of deposits per address, and transfer the primary role to another account. The `fallback` function is used to receive ether sent directly to the contract.",
				"role": "assistant"
			}
		}
	],
	"created": 1701470951,
	"id": "chatcmpl-8R6bnyovj7SoPptN6fX8Vo6K7hcUR",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.16 12:43 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _depositsOf; // STORAGE[0x1]\nuint256 _fallback; // STORAGE[0x2]\naddress _primary; // STORAGE[0x0] bytes 0 to 19\n\n// Events\nPrimaryTransferred(address);\nLogEthReceived(uint256, address);\nLogEthSent(uint256, address);\n\nfunction depositsOf(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return _depositsOf[varg0];\n}\n\nfunction deposit(address varg0) public payable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _primary);\n    require(msg.value + _depositsOf[varg0] >= _depositsOf[varg0]);\n    _depositsOf[varg0] += msg.value;\n    require(msg.value + _fallback >= _fallback);\n    _fallback += msg.value;\n    emit LogEthReceived(varg0, msg.value);\n}\n\nfunction withdraw(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    require(msg.sender == _primary);\n    v0 = v1 = varg1 > 0;\n    if (v1) {\n        v0 = v2 = varg1 <= this.balance;\n    }\n    require(v0, 'Insufficient funds in the charity fund');\n    v3 = varg0.call().value(varg1).gas(2300 * !varg1);\n    require(v3); // checks call status, propagates error data on error\n    emit LogEthSent(varg0, varg1);\n}\n\nfunction fallback() public payable { \n    require(msg.value + _fallback >= _fallback);\n}\n\nfunction transferPrimary(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _primary);\n    require(varg0);\n    _primary = varg0;\n    emit PrimaryTransferred(_primary);\n}\n\nfunction primary() public nonPayable { \n    return _primary;\n}\n\nfunction sumStats() public nonPayable { \n    return _fallback;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x2348238c) {\n            transferPrimary(address);\n        } else if (0xc6dbdf61 == function_selector) {\n            primary();\n        } else if (0xe0b151a1 == function_selector) {\n            sumStats();\n        } else if (0xe3a9db1a == function_selector) {\n            depositsOf(address);\n        } else if (0xf340fa01 == function_selector) {\n            deposit(address);\n        } else if (0xf3fef3a3 == function_selector) {\n            withdraw(address,uint256);\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.16 12:43 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _depositsOf; // STORAGE[0x1]\nuint256 _fallback; // STORAGE[0x2]\naddress _primary; // STORAGE[0x0] bytes 0 to 19\n\n// Events\nPrimaryTransferred(address);\nLogEthReceived(uint256, address);\nLogEthSent(uint256, address);\n\nfunction depositsOf(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return _depositsOf[varg0];\n}\n\nfunction deposit(address varg0) public payable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _primary);\n    require(msg.value + _depositsOf[varg0] >= _depositsOf[varg0]);\n    _depositsOf[varg0] += msg.value;\n    require(msg.value + _fallback >= _fallback);\n    _fallback += msg.value;\n    emit LogEthReceived(varg0, msg.value);\n}\n\nfunction withdraw(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    require(msg.sender == _primary);\n    v0 = v1 = varg1 > 0;\n    if (v1) {\n        v0 = v2 = varg1 <= this.balance;\n    }\n    require(v0, 'Insufficient funds in the charity fund');\n    v3 = varg0.call().value(varg1).gas(2300 * !varg1);\n    require(v3); // checks call status, propagates error data on error\n    emit LogEthSent(varg0, varg1);\n}\n\nfunction fallback() public payable { \n    require(msg.value + _fallback >= _fallback);\n}\n\nfunction transferPrimary(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _primary);\n    require(varg0);\n    _primary = varg0;\n    emit PrimaryTransferred(_primary);\n}\n\nfunction primary() public nonPayable { \n    return _primary;\n}\n\nfunction sumStats() public nonPayable { \n    return _fallback;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x2348238c) {\n            transferPrimary(address);\n        } else if (0xc6dbdf61 == function_selector) {\n            primary();\n        } else if (0xe0b151a1 == function_selector) {\n            sumStats();\n        } else if (0xe3a9db1a == function_selector) {\n            depositsOf(address);\n        } else if (0xf340fa01 == function_selector) {\n            deposit(address);\n        } else if (0xf3fef3a3 == function_selector) {\n            withdraw(address,uint256);\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.16 12:43 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _depositsOf; // STORAGE[0x1]\nuint256 _fallback; // STORAGE[0x2]\naddress _primary; // STORAGE[0x0] bytes 0 to 19\n\n// Events\nPrimaryTransferred(address);\nLogEthReceived(uint256, address);\nLogEthSent(uint256, address);\n\nfunction depositsOf(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return _depositsOf[varg0];\n}\n\nfunction deposit(address varg0) public payable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _primary);\n    require(msg.value + _depositsOf[varg0] >= _depositsOf[varg0]);\n    _depositsOf[varg0] += msg.value;\n    require(msg.value + _fallback >= _fallback);\n    _fallback += msg.value;\n    emit LogEthReceived(varg0, msg.value);\n}\n\nfunction withdraw(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    require(msg.sender == _primary);\n    v0 = v1 = varg1 > 0;\n    if (v1) {\n        v0 = v2 = varg1 <= this.balance;\n    }\n    require(v0, 'Insufficient funds in the charity fund');\n    v3 = varg0.call().value(varg1).gas(2300 * !varg1);\n    require(v3); // checks call status, propagates error data on error\n    emit LogEthSent(varg0, varg1);\n}\n\nfunction fallback() public payable { \n    require(msg.value + _fallback >= _fallback);\n}\n\nfunction transferPrimary(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _primary);\n    require(varg0);\n    _primary = varg0;\n    emit PrimaryTransferred(_primary);\n}\n\nfunction primary() public nonPayable { \n    return _primary;\n}\n\nfunction sumStats() public nonPayable { \n    return _fallback;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x2348238c) {\n            transferPrimary(address);\n        } else if (0xc6dbdf61 == function_selector) {\n            primary();\n        } else if (0xe0b151a1 == function_selector) {\n            sumStats();\n        } else if (0xe3a9db1a == function_selector) {\n            depositsOf(address);\n        } else if (0xf340fa01 == function_selector) {\n            deposit(address);\n        } else if (0xf3fef3a3 == function_selector) {\n            withdraw(address,uint256);\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 12.244093179702759,
	"usage": {
		"completion_tokens": 442,
		"prompt_tokens": 749,
		"total_tokens": 1191
	}
}