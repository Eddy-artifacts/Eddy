{
	"address": "0xdac7413b79394542cabbdef9d71e89d48862825d",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is the Solidity contract according to your description:\n\n```solidity\npragma solidity ^0.8.0;\n\ncontract MyContract {\n    address public owner;\n    uint8 public state;\n    address private token;\n    uint256 public starttime;\n    uint256 public endtime;\n    address public wallet;\n    uint256 public tokenamount;\n    uint256 public weiraised;\n    mapping(address => uint256) public privateinvestors;\n\n    constructor() payable {\n        owner = msg.sender;\n        wallet = 0x7b97B31E12f7d029769c53cB91c83d29611A4F7A;\n        tokenamount = 1000;\n    }\n\n    function cleanup() public {\n        require(state == 3 && block.timestamp > (0x4f1a00 + endtime) && msg.sender == owner && state <= 3);\n        payable(wallet).transfer(address(this).balance);\n    }\n\n    function startPreSale() public {\n        require(state == 0 && msg.sender == owner && state <= 3);\n        state = 1;\n    }\n\n    function startICO() public {\n        require(state == 1 && msg.sender == owner && state <= 3);\n        state = 2;\n        starttime = block.timestamp;\n        endtime = (0x409980 + block.timestamp);\n    }\n\n    function transferOwnership(address newOwner) public {\n        require(newOwner != address(0) && msg.sender == owner);\n        owner = newOwner;\n    }\n\n    function addPrivateInvestor(address investor, uint256 amount) public {\n        require(state == 0 && msg.sender == owner && state <= 3);\n        privateinvestors[investor] += amount;\n    }\n\n    function stopICO() public {\n        require(state == 2 && msg.sender == owner);\n        uint256 v0 = IToken(token).availableTokens();\n        if(v0 == 0 && weiraised > 0) {\n            state = 3;\n            endtime = block.timestamp;\n        }\n        else if(v0 != 0 && endtime > 0 && block.timestamp > endtime) {\n            state = 3;\n            endtime = block.timestamp;\n        }\n    }\n\n    function hasEnded() public {\n        require(state != 3);\n        IToken(token).availableTokens();\n    }\n}\n\ninterface IToken {\n    function availableTokens() external returns (uint256);\n}\n```\nPlease note that `IToken` is a placeholder interface for your external contract. You will need to replace it with the actual interface of your external contract. \n\nAlso, please make sure that you have the right permissions to call the `availableTokens` function from your external contract.",
				"role": "assistant"
			}
		}
	],
	"created": 1702485223,
	"id": "chatcmpl-8VMT168T1T90M0be8BQ5CzwICyahz",
	"input_format": "LayedDescription",
	"ir": "For the payable constructor function.\n- the state variable wallet will be updated to 0x7b97B31E12f7d029769c53cB91c83d29611A4F7A.\n- the state variable tokenamount will be updated to 1000.\n\nFor the cleanup function.\n- When state equals to 3, and after (0x4f1a00+endtime), and for owner, and state is not greater than 3:\n  - it transfers ether valued the balance of the address of this contract to wallet.\n\nFor the startPreSale function.\n- When state equals to 0, and for owner, and state is not greater than 3:\n  - the state variable state will be updated to 1.\n\nFor the startICO function.\n- When state equals to 1, and for owner, and state is not greater than 3:\n  - the state variable state will be updated to 2.\n  - the state variable starttime will be updated to current time.\n  - the state variable endtime will be updated to (0x409980+current time).\n\nFor the transferOwnership function, it has one argument and its type is address.\n- When the first argument is not 0, and for owner:\n  - the state variable owner will be updated to the first argument.\n\nFor the addPrivateInvestor function, it has 2 arguments and the type of each argument is as follows: address, uint256.\n- When state equals to 0, and for owner, and state is not greater than 3:\n  - the privateinvestors of the first argument will be updated to (the second argument+the privateinvestors of the first argument).\n\nFor the stopICO function.\n- When state equals to 2, and for owner:\n  - it calls an external function availableTokens of the external contract token, and gets the returned value as v0.\n  - When the call or transfer succeeds, and weiraised is greater than 0:\n    - When v0 is 0:\n      - the state variable state will be updated to 3.\n      - the state variable endtime will be updated to current time.\n    - When v0 is not 0, and endtime is greater than 0, and after endtime:\n      - the state variable state will be updated to 3.\n      - the state variable endtime will be updated to current time.\n\nFor the hasEnded function.\n- When state does not equal to 3:\n  - it calls an external function availableTokens of the external contract token.\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following contract descriptions. Some state variables are provided to help you develop.",
			"role": "system"
		},
		{
			"content": "The following is the description of the contract logic: For the payable constructor function.\n- the state variable wallet will be updated to 0x7b97B31E12f7d029769c53cB91c83d29611A4F7A.\n- the state variable tokenamount will be updated to 1000.\n\nFor the cleanup function.\n- When state equals to 3, and after (0x4f1a00+endtime), and for owner, and state is not greater than 3:\n  - it transfers ether valued the balance of the address of this contract to wallet.\n\nFor the startPreSale function.\n- When state equals to 0, and for owner, and state is not greater than 3:\n  - the state variable state will be updated to 1.\n\nFor the startICO function.\n- When state equals to 1, and for owner, and state is not greater than 3:\n  - the state variable state will be updated to 2.\n  - the state variable starttime will be updated to current time.\n  - the state variable endtime will be updated to (0x409980+current time).\n\nFor the transferOwnership function, it has one argument and its type is address.\n- When the first argument is not 0, and for owner:\n  - the state variable owner will be updated to the first argument.\n\nFor the addPrivateInvestor function, it has 2 arguments and the type of each argument is as follows: address, uint256.\n- When state equals to 0, and for owner, and state is not greater than 3:\n  - the privateinvestors of the first argument will be updated to (the second argument+the privateinvestors of the first argument).\n\nFor the stopICO function.\n- When state equals to 2, and for owner:\n  - it calls an external function availableTokens of the external contract token, and gets the returned value as v0.\n  - When the call or transfer succeeds, and weiraised is greater than 0:\n    - When v0 is 0:\n      - the state variable state will be updated to 3.\n      - the state variable endtime will be updated to current time.\n    - When v0 is not 0, and endtime is greater than 0, and after endtime:\n      - the state variable state will be updated to 3.\n      - the state variable endtime will be updated to current time.\n\nFor the hasEnded function.\n- When state does not equal to 3:\n  - it calls an external function availableTokens of the external contract token.\n\n.\n Here are some state variables with their corresponding types: public state variable `owner` is typed address,public state variable `state` is typed uint8,private state variable `token` is typed address,public state variable `starttime` is typed uint256,public state variable `endtime` is typed uint256,public state variable `wallet` is typed address,public state variable `tokenamount` is typed uint256,public state variable `weiraised` is typed uint256,public state variable `privateinvestors` is typed mapping.\n ",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following contract descriptions. Some state variables are provided to help you develop.The following is the description of the contract logic: For the payable constructor function.\n- the state variable wallet will be updated to 0x7b97B31E12f7d029769c53cB91c83d29611A4F7A.\n- the state variable tokenamount will be updated to 1000.\n\nFor the cleanup function.\n- When state equals to 3, and after (0x4f1a00+endtime), and for owner, and state is not greater than 3:\n  - it transfers ether valued the balance of the address of this contract to wallet.\n\nFor the startPreSale function.\n- When state equals to 0, and for owner, and state is not greater than 3:\n  - the state variable state will be updated to 1.\n\nFor the startICO function.\n- When state equals to 1, and for owner, and state is not greater than 3:\n  - the state variable state will be updated to 2.\n  - the state variable starttime will be updated to current time.\n  - the state variable endtime will be updated to (0x409980+current time).\n\nFor the transferOwnership function, it has one argument and its type is address.\n- When the first argument is not 0, and for owner:\n  - the state variable owner will be updated to the first argument.\n\nFor the addPrivateInvestor function, it has 2 arguments and the type of each argument is as follows: address, uint256.\n- When state equals to 0, and for owner, and state is not greater than 3:\n  - the privateinvestors of the first argument will be updated to (the second argument+the privateinvestors of the first argument).\n\nFor the stopICO function.\n- When state equals to 2, and for owner:\n  - it calls an external function availableTokens of the external contract token, and gets the returned value as v0.\n  - When the call or transfer succeeds, and weiraised is greater than 0:\n    - When v0 is 0:\n      - the state variable state will be updated to 3.\n      - the state variable endtime will be updated to current time.\n    - When v0 is not 0, and endtime is greater than 0, and after endtime:\n      - the state variable state will be updated to 3.\n      - the state variable endtime will be updated to current time.\n\nFor the hasEnded function.\n- When state does not equal to 3:\n  - it calls an external function availableTokens of the external contract token.\n\n.\n Here are some state variables with their corresponding types: public state variable `owner` is typed address,public state variable `state` is typed uint8,private state variable `token` is typed address,public state variable `starttime` is typed uint256,public state variable `endtime` is typed uint256,public state variable `wallet` is typed address,public state variable `tokenamount` is typed uint256,public state variable `weiraised` is typed uint256,public state variable `privateinvestors` is typed mapping.\n ",
	"status": "1",
	"time_cost": 28.44316053390503,
	"usage": {
		"completion_tokens": 556,
		"prompt_tokens": 698,
		"total_tokens": 1254
	}
}