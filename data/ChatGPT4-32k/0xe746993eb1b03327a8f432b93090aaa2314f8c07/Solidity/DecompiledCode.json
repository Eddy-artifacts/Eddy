{
	"address": "0xe746993eb1b03327a8f432b93090aaa2314f8c07",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is the Solidity contract based on the given decompiled code:\n\n```solidity\npragma solidity >=0.5.0 <0.6.0;\n\ncontract MyContract {\n    uint256 private stor_1;\n    uint256 private _getInvestedAmount;\n    uint256 private _getPayedAmount;\n    uint256 private _getDaysAfterStart;\n    address private stor_0_0_19;\n    address private _investorsCount;\n\n    event LogIncome(address indexed _from, uint256 _value);\n    event LogInvestment(address indexed _from, uint256 _value, uint256 _refBonus);\n    event LogNewWave(uint256 _waveStart);\n    event LogRefBonus(address indexed _from, address indexed _to, uint256 _level, uint256 _value);\n    event LogReferrerAdded(address indexed _investor, address indexed _referrer);\n\n    // Function signatures are assumed due to lack of function names\n\n    function withdraw() public {\n        // 0x28c(); // private function\n    }\n\n    function getDividends(address varg0) public view returns(uint256) {\n        // require(_investorsCount.code.size);\n        // return v1;\n    }\n\n    function getInvestedAmount() public view returns(uint256) {\n        return _getInvestedAmount;\n    }\n\n    function getDeposits(address varg0) public view returns(uint256) {\n        // require(_investorsCount.code.size);\n        // return v1;\n    }\n\n    function getDaysAfterStart() public view returns(uint256) {\n        // require(_getDaysAfterStart <= block.timestamp);\n        // return (block.timestamp - _getDaysAfterStart) / 0x15180;\n    }\n\n    function invest() public payable {\n        // 0x5bf(); // private function\n    }\n\n    function getDividendsWithFee(address varg0) public view returns(uint256) {\n        // require(_investorsCount.code.size);\n        // return v1 * 24 / 25;\n    }\n\n    function getPayedAmount() public view returns(uint256) {\n        return _getPayedAmount;\n    }\n\n    function investorsCount() public view returns(uint256) {\n        // require(_investorsCount.code.size);\n        // return v1;\n    }\n\n    function() external payable {\n        if (msg.value != 0) {\n            // 0x5bf(); // private function\n        } else {\n            // 0x28c(); // private function\n        }\n    }\n}\n```\nPlease note that the private functions `0x28c()` and `0x5bf()` aren't included in this contract as their implementation details are missing from the decompiled code. Also, some functions are missing their implementation details and are thus commented out. This contract will not compile until the missing parts are filled in.",
				"role": "assistant"
			}
		}
	],
	"created": 1701471103,
	"id": "chatcmpl-8R6eFPkTgBsHydWAWZDKBkgptsbk1",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.22 11:49 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 stor_1; // STORAGE[0x1]\nuint256 _getInvestedAmount; // STORAGE[0x2]\nuint256 _getPayedAmount; // STORAGE[0x3]\nuint256 _getDaysAfterStart; // STORAGE[0x4]\naddress stor_0_0_19; // STORAGE[0x0] bytes 0 to 19\naddress _investorsCount; // STORAGE[0x5] bytes 0 to 19\n\n// Events\nLogIncome(address, uint256);\nLogInvestment(address, uint256, uint256);\nLogNewWave(uint256);\nLogRefBonus(address, address, uint256, uint256);\nLogReferrerAdded(address, address);\n\nfunction withdraw() public nonPayable { \n    0x28c();\n}\n\nfunction getDividends(address varg0) public nonPayable { \n    require(_investorsCount.code.size);\n    v0, v1 = _investorsCount.dividends(varg0).gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    return v1;\n}\n\nfunction getInvestedAmount() public nonPayable { \n    return _getInvestedAmount;\n}\n\nfunction getDeposits(address varg0) public nonPayable { \n    require(_investorsCount.code.size);\n    v0, v1 = _investorsCount.sumOfDeposits(varg0).gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    return v1;\n}\n\nfunction getDaysAfterStart() public nonPayable { \n    require(_getDaysAfterStart <= block.timestamp);\n    assert(0x15180);\n    return (block.timestamp - _getDaysAfterStart) / 0x15180;\n}\n\nfunction invest() public payable { \n    0x5bf();\n}\n\nfunction getDividendsWithFee(address varg0) public nonPayable { \n    require(_investorsCount.code.size);\n    v0, v1 = _investorsCount.dividends(varg0).gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    assert(25);\n    return v1 * 24 / 25;\n}\n\nfunction 0x28c() private { \n    require(_investorsCount.code.size);\n    v0, v1 = _investorsCount.dividends(msg.sender).gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    if (v1 > 0) {\n        if (v1 <= (address(this)).balance) {\n            require(_investorsCount.code.size);\n            v2 = _investorsCount.updateCheckpoint(msg.sender).gas(msg.gas);\n            require(v2); // checks call status, propagates error data on error\n            v3 = stor_0_0_19.call().value(v1 / 25).gas(!(v1 / 25) * 2300);\n            require(v3); // checks call status, propagates error data on error\n            v4 = msg.sender.call().value(v1 * 24 / 25).gas(!(v1 * 24 / 25) * 2300);\n            require(v4); // checks call status, propagates error data on error\n            emit LogIncome(msg.sender, v1);\n            _getPayedAmount = _getPayedAmount + v1;\n        } else {\n            MEM[(MEM[64]) len 4054] = 0x608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610f76806100606000396000f3006080604052600436106100c5576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806304ee65c0146100ca5780631787787b146101215780632b711051146101825780632fbe0b7b146101ad57806333026bb61461020e578063566ab6f91461025b57806362c1a2a2146102de57806368306e43146103355780636a9d55de1461038c578063702f5e19146103f1578063759f778514610434578063b94265b81461048b578063f8b05ddb146104ee575b600080fd5b3480156100d657600080fd5b5061010b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061055b565b6040518082815260200191505060405180910390f35b34801561012d57600080fd5b5061016c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506105a7565b6040518082815260200191505060405180910390f35b34801561018e57600080fd5b50610197610612565b6040518082815260200191505060405180910390f35b3480156101b957600080fd5b506101f8600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061061c565b6040518082815260200191505060405180910390f35b34801561021a57600080fd5b50610259600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610687565b005b34801561026757600080fd5b5061029c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610822565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156102ea57600080fd5b5061031f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061088e565b6040518082815260200191505060405180910390f35b34801561034157600080fd5b50610376600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506108dd565b6040518082815260200191505060405180910390f35b34801561039857600080fd5b506103d7600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610a67565b604051808215151515815260200191505060405180910390f35b3480156103fd57600080fd5b50610432600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610b23565b005b34801561044057600080fd5b50610475600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610bc8565b6040518082815260200191505060405180910390f35b34801561049757600080fd5b506104ec600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610c9a565b005b3480156104fa57600080fd5b50610545600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803515159060200190929190505050610d7a565b6040518082815260200191505060405180910390f35b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101549050919050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001828154811015156105f857fe5b906000526020600020906002020160010154905092915050565b6000600154905090565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018281548110151561066d57fe5b906000526020600020906002020160000154905092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156106e257600080fd5b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000016040805190810160405280838152602001428152509080600181540180825580915050906001820390600052602060002090600202016000909192909190915060008201518160000155602082015181600101555050506000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154141561081e5742600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010181905550600180600082825401925050819055505b5050565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001805490509050919050565b6000806000806108ef85600080610d7a565b9150600090505b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000180549050811015610a5c5761094d8582610a67565b15156109cd576109c4620151806109b66109786109698961055b565b42610ec190919063ffffffff16565b6109a861271061099a8861098c8d8a61061c565b610ee290919063ffffffff16565b610f2090919063ffffffff16565b610ee290919063ffffffff16565b610f2090919063ffffffff16565b83019250610a4f565b610a4a62015180610a3c6109f36109e489866105a7565b42610ec190919063ffffffff16565b610a2e612710610a20610a088c896001610d7a565b610a128d8a61061c565b610ee290919063ffffffff16565b610f2090919063ffffffff16565b610ee290919063ffffffff16565b610f2090919063ffffffff16565b830192505b80806001019150506108f6565b829350505050919050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000183815481101515610afb57fe5b9060005260206000209060020201600101541115610b1c5760019050610b1d565b5b92915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610b7e57600080fd5b42600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018190555050565b60008060008090505b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000180549050811015610c9057600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000181815481101515610c6d57fe5b906000526020600020906002020160000154820191508080600101915050610bd1565b8192505050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610cf557600080fd5b80600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6000806000600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000185815481101515610dce57fe5b9060005260206000209060020201600001541115610eb8578215610e5457600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000184815481101515610e3b57fe5b9060005260206000209060020201600101549050610e9a565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015490505b600262015180824203811515610eac57fe5b040260ea019150610eb9565b5b509392505050565b600080838311151515610ed357600080fd5b82840390508091505092915050565b6000806000841415610ef75760009150610f19565b8284029050828482811515610f0857fe5b04141515610f1557600080fd5b8091505b5092915050565b600080600083111515610f3257600080fd5b8284811515610f3d57fe5b04905080915050929150505600a165627a7a723058202c6097a16120cb794b5dde390a415d7e758909e0c28b705cab849565a545b7c70029;\n            v5 = create.code(MEM[64], 4054).value(0);\n            require(v5); // checks call status, propagates error data on error\n            _investorsCount = v5;\n            _getInvestedAmount = 0;\n            _getPayedAmount = 0;\n            stor_1 = block.timestamp + 0x93a80;\n            emit LogNewWave(stor_1);\n        }\n    }\n    return ;\n}\n\nfunction 0x5bf() private { \n    v0 = v1 = 0;\n    require(stor_1 <= block.timestamp);\n    require(msg.value >= 0x2386f26fc10000);\n    v2 = stor_0_0_19.call().value(msg.value / 25).gas(!(msg.value / 25) * 2300);\n    require(v2); // checks call status, propagates error data on error\n    require(_investorsCount.code.size);\n    v3, v4 = _investorsCount.r(msg.sender).gas(msg.gas);\n    require(v3); // checks call status, propagates error data on error\n    v5 = new bytes[](msg.data.length);\n    require(RETURNDATASIZE() >= 32);\n    v4 = v5.length;\n    v6 = v5.data;\n    if (address(v4) == 0) {\n        if (msg.data.length == 20) {\n            v0 = v7 = 0;\n            CALLDATACOPY(v5.data, 0, msg.data.length);\n            if (address(MEM[MEM[64] + 20]) != msg.sender) {\n                require(_investorsCount.code.size);\n                v8 = _investorsCount.addReferrer(msg.sender, address(MEM[MEM[64] + 20])).gas(msg.gas);\n                require(v8); // checks call status, propagates error data on error\n                emit LogReferrerAdded(msg.sender, address(MEM[MEM[64] + 20]));\n                v0 = v9 = msg.value / 20;\n            }\n            0xdbd();\n        }\n    } else {\n        0xdbd();\n    }\n    require(_investorsCount.code.size);\n    v10 = _investorsCount.addDeposit(msg.sender, msg.value + v0).gas(msg.gas);\n    require(v10); // checks call status, propagates error data on error\n    _getInvestedAmount = _getInvestedAmount + msg.value;\n    emit LogInvestment(msg.sender, msg.value, v0);\n    return ;\n}\n\nfunction fallback() public payable { \n    if (msg.value != 0) {\n        0x5bf();\n    } else {\n        0x28c();\n    }\n}\n\nfunction getPayedAmount() public nonPayable { \n    return _getPayedAmount;\n}\n\nfunction 0xdbd() private { \n    require(_investorsCount.code.size);\n    v0, v1 = _investorsCount.r(msg.sender).gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    require(_investorsCount.code.size);\n    v2, v3 = _investorsCount.amountOfDeposits(address(v1)).gas(msg.gas);\n    require(v2); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    if (v3 < 500) {\n        require(_investorsCount.code.size);\n        v4 = _investorsCount.addDeposit(address(v1), msg.value / 10).gas(msg.gas);\n        require(v4); // checks call status, propagates error data on error\n        emit LogRefBonus(msg.sender, address(v1), 1, msg.value / 10);\n    }\n    require(_investorsCount.code.size);\n    v5, v6 = _investorsCount.r(address(v1)).gas(msg.gas);\n    require(v5); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    if (address(v6) != 0) {\n        require(_investorsCount.code.size);\n        v7, v8 = _investorsCount.amountOfDeposits(address(v6)).gas(msg.gas);\n        require(v7); // checks call status, propagates error data on error\n        require(RETURNDATASIZE() >= 32);\n        if (v8 < 500) {\n            require(_investorsCount.code.size);\n            v9 = _investorsCount.addDeposit(address(v6), msg.value / 20).gas(msg.gas);\n            require(v9); // checks call status, propagates error data on error\n            emit LogRefBonus(msg.sender, address(v6), 2, msg.value / 20);\n        }\n        require(_investorsCount.code.size);\n        v10, v11 = _investorsCount.r(address(v6)).gas(msg.gas);\n        require(v10); // checks call status, propagates error data on error\n        require(RETURNDATASIZE() >= 32);\n        if (address(v11) != 0) {\n            require(_investorsCount.code.size);\n            v12, v13 = _investorsCount.amountOfDeposits(address(v11)).gas(msg.gas);\n            require(v12); // checks call status, propagates error data on error\n            require(RETURNDATASIZE() >= 32);\n            if (v13 < 500) {\n                require(_investorsCount.code.size);\n                v14 = _investorsCount.addDeposit(address(v11), msg.value * 3 / 100).gas(msg.gas);\n                require(v14); // checks call status, propagates error data on error\n                emit LogRefBonus(msg.sender, address(v11), 3, msg.value * 3 / 100);\n            }\n        }\n    }\n    return ;\n}\n\nfunction investorsCount() public nonPayable { \n    require(_investorsCount.code.size);\n    v0, v1 = _investorsCount.investorsCount().gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    return v1;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x1c5e789 == function_selector) {\n            getPayedAmount();\n        } else if (0x2b711051 == function_selector) {\n            investorsCount();\n        } else if (0x3ccfd60b == function_selector) {\n            withdraw();\n        } else if (0x4634d81c == function_selector) {\n            getDividends(address);\n        } else if (0x62243096 == function_selector) {\n            getInvestedAmount();\n        } else if (0x94f649dd == function_selector) {\n            getDeposits(address);\n        } else if (0xa612ad1b == function_selector) {\n            getDaysAfterStart();\n        } else if (0xe8b5e51f == function_selector) {\n            invest();\n        } else if (0xfc6ce454 == function_selector) {\n            getDividendsWithFee(address);\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.22 11:49 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 stor_1; // STORAGE[0x1]\nuint256 _getInvestedAmount; // STORAGE[0x2]\nuint256 _getPayedAmount; // STORAGE[0x3]\nuint256 _getDaysAfterStart; // STORAGE[0x4]\naddress stor_0_0_19; // STORAGE[0x0] bytes 0 to 19\naddress _investorsCount; // STORAGE[0x5] bytes 0 to 19\n\n// Events\nLogIncome(address, uint256);\nLogInvestment(address, uint256, uint256);\nLogNewWave(uint256);\nLogRefBonus(address, address, uint256, uint256);\nLogReferrerAdded(address, address);\n\nfunction withdraw() public nonPayable { \n    0x28c();\n}\n\nfunction getDividends(address varg0) public nonPayable { \n    require(_investorsCount.code.size);\n    v0, v1 = _investorsCount.dividends(varg0).gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    return v1;\n}\n\nfunction getInvestedAmount() public nonPayable { \n    return _getInvestedAmount;\n}\n\nfunction getDeposits(address varg0) public nonPayable { \n    require(_investorsCount.code.size);\n    v0, v1 = _investorsCount.sumOfDeposits(varg0).gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    return v1;\n}\n\nfunction getDaysAfterStart() public nonPayable { \n    require(_getDaysAfterStart <= block.timestamp);\n    assert(0x15180);\n    return (block.timestamp - _getDaysAfterStart) / 0x15180;\n}\n\nfunction invest() public payable { \n    0x5bf();\n}\n\nfunction getDividendsWithFee(address varg0) public nonPayable { \n    require(_investorsCount.code.size);\n    v0, v1 = _investorsCount.dividends(varg0).gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    assert(25);\n    return v1 * 24 / 25;\n}\n\nfunction 0x28c() private { \n    require(_investorsCount.code.size);\n    v0, v1 = _investorsCount.dividends(msg.sender).gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    if (v1 > 0) {\n        if (v1 <= (address(this)).balance) {\n            require(_investorsCount.code.size);\n            v2 = _investorsCount.updateCheckpoint(msg.sender).gas(msg.gas);\n            require(v2); // checks call status, propagates error data on error\n            v3 = stor_0_0_19.call().value(v1 / 25).gas(!(v1 / 25) * 2300);\n            require(v3); // checks call status, propagates error data on error\n            v4 = msg.sender.call().value(v1 * 24 / 25).gas(!(v1 * 24 / 25) * 2300);\n            require(v4); // checks call status, propagates error data on error\n            emit LogIncome(msg.sender, v1);\n            _getPayedAmount = _getPayedAmount + v1;\n        } else {\n            MEM[(MEM[64]) len 4054] = 0x608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610f76806100606000396000f3006080604052600436106100c5576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806304ee65c0146100ca5780631787787b146101215780632b711051146101825780632fbe0b7b146101ad57806333026bb61461020e578063566ab6f91461025b57806362c1a2a2146102de57806368306e43146103355780636a9d55de1461038c578063702f5e19146103f1578063759f778514610434578063b94265b81461048b578063f8b05ddb146104ee575b600080fd5b3480156100d657600080fd5b5061010b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061055b565b6040518082815260200191505060405180910390f35b34801561012d57600080fd5b5061016c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506105a7565b6040518082815260200191505060405180910390f35b34801561018e57600080fd5b50610197610612565b6040518082815260200191505060405180910390f35b3480156101b957600080fd5b506101f8600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061061c565b6040518082815260200191505060405180910390f35b34801561021a57600080fd5b50610259600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610687565b005b34801561026757600080fd5b5061029c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610822565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156102ea57600080fd5b5061031f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061088e565b6040518082815260200191505060405180910390f35b34801561034157600080fd5b50610376600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506108dd565b6040518082815260200191505060405180910390f35b34801561039857600080fd5b506103d7600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610a67565b604051808215151515815260200191505060405180910390f35b3480156103fd57600080fd5b50610432600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610b23565b005b34801561044057600080fd5b50610475600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610bc8565b6040518082815260200191505060405180910390f35b34801561049757600080fd5b506104ec600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610c9a565b005b3480156104fa57600080fd5b50610545600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803515159060200190929190505050610d7a565b6040518082815260200191505060405180910390f35b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101549050919050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001828154811015156105f857fe5b906000526020600020906002020160010154905092915050565b6000600154905090565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018281548110151561066d57fe5b906000526020600020906002020160000154905092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156106e257600080fd5b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000016040805190810160405280838152602001428152509080600181540180825580915050906001820390600052602060002090600202016000909192909190915060008201518160000155602082015181600101555050506000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154141561081e5742600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010181905550600180600082825401925050819055505b5050565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001805490509050919050565b6000806000806108ef85600080610d7a565b9150600090505b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000180549050811015610a5c5761094d8582610a67565b15156109cd576109c4620151806109b66109786109698961055b565b42610ec190919063ffffffff16565b6109a861271061099a8861098c8d8a61061c565b610ee290919063ffffffff16565b610f2090919063ffffffff16565b610ee290919063ffffffff16565b610f2090919063ffffffff16565b83019250610a4f565b610a4a62015180610a3c6109f36109e489866105a7565b42610ec190919063ffffffff16565b610a2e612710610a20610a088c896001610d7a565b610a128d8a61061c565b610ee290919063ffffffff16565b610f2090919063ffffffff16565b610ee290919063ffffffff16565b610f2090919063ffffffff16565b830192505b80806001019150506108f6565b829350505050919050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000183815481101515610afb57fe5b9060005260206000209060020201600101541115610b1c5760019050610b1d565b5b92915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610b7e57600080fd5b42600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018190555050565b60008060008090505b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000180549050811015610c9057600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000181815481101515610c6d57fe5b906000526020600020906002020160000154820191508080600101915050610bd1565b8192505050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610cf557600080fd5b80600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6000806000600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000185815481101515610dce57fe5b9060005260206000209060020201600001541115610eb8578215610e5457600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000184815481101515610e3b57fe5b9060005260206000209060020201600101549050610e9a565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015490505b600262015180824203811515610eac57fe5b040260ea019150610eb9565b5b509392505050565b600080838311151515610ed357600080fd5b82840390508091505092915050565b6000806000841415610ef75760009150610f19565b8284029050828482811515610f0857fe5b04141515610f1557600080fd5b8091505b5092915050565b600080600083111515610f3257600080fd5b8284811515610f3d57fe5b04905080915050929150505600a165627a7a723058202c6097a16120cb794b5dde390a415d7e758909e0c28b705cab849565a545b7c70029;\n            v5 = create.code(MEM[64], 4054).value(0);\n            require(v5); // checks call status, propagates error data on error\n            _investorsCount = v5;\n            _getInvestedAmount = 0;\n            _getPayedAmount = 0;\n            stor_1 = block.timestamp + 0x93a80;\n            emit LogNewWave(stor_1);\n        }\n    }\n    return ;\n}\n\nfunction 0x5bf() private { \n    v0 = v1 = 0;\n    require(stor_1 <= block.timestamp);\n    require(msg.value >= 0x2386f26fc10000);\n    v2 = stor_0_0_19.call().value(msg.value / 25).gas(!(msg.value / 25) * 2300);\n    require(v2); // checks call status, propagates error data on error\n    require(_investorsCount.code.size);\n    v3, v4 = _investorsCount.r(msg.sender).gas(msg.gas);\n    require(v3); // checks call status, propagates error data on error\n    v5 = new bytes[](msg.data.length);\n    require(RETURNDATASIZE() >= 32);\n    v4 = v5.length;\n    v6 = v5.data;\n    if (address(v4) == 0) {\n        if (msg.data.length == 20) {\n            v0 = v7 = 0;\n            CALLDATACOPY(v5.data, 0, msg.data.length);\n            if (address(MEM[MEM[64] + 20]) != msg.sender) {\n                require(_investorsCount.code.size);\n                v8 = _investorsCount.addReferrer(msg.sender, address(MEM[MEM[64] + 20])).gas(msg.gas);\n                require(v8); // checks call status, propagates error data on error\n                emit LogReferrerAdded(msg.sender, address(MEM[MEM[64] + 20]));\n                v0 = v9 = msg.value / 20;\n            }\n            0xdbd();\n        }\n    } else {\n        0xdbd();\n    }\n    require(_investorsCount.code.size);\n    v10 = _investorsCount.addDeposit(msg.sender, msg.value + v0).gas(msg.gas);\n    require(v10); // checks call status, propagates error data on error\n    _getInvestedAmount = _getInvestedAmount + msg.value;\n    emit LogInvestment(msg.sender, msg.value, v0);\n    return ;\n}\n\nfunction fallback() public payable { \n    if (msg.value != 0) {\n        0x5bf();\n    } else {\n        0x28c();\n    }\n}\n\nfunction getPayedAmount() public nonPayable { \n    return _getPayedAmount;\n}\n\nfunction 0xdbd() private { \n    require(_investorsCount.code.size);\n    v0, v1 = _investorsCount.r(msg.sender).gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    require(_investorsCount.code.size);\n    v2, v3 = _investorsCount.amountOfDeposits(address(v1)).gas(msg.gas);\n    require(v2); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    if (v3 < 500) {\n        require(_investorsCount.code.size);\n        v4 = _investorsCount.addDeposit(address(v1), msg.value / 10).gas(msg.gas);\n        require(v4); // checks call status, propagates error data on error\n        emit LogRefBonus(msg.sender, address(v1), 1, msg.value / 10);\n    }\n    require(_investorsCount.code.size);\n    v5, v6 = _investorsCount.r(address(v1)).gas(msg.gas);\n    require(v5); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    if (address(v6) != 0) {\n        require(_investorsCount.code.size);\n        v7, v8 = _investorsCount.amountOfDeposits(address(v6)).gas(msg.gas);\n        require(v7); // checks call status, propagates error data on error\n        require(RETURNDATASIZE() >= 32);\n        if (v8 < 500) {\n            require(_investorsCount.code.size);\n            v9 = _investorsCount.addDeposit(address(v6), msg.value / 20).gas(msg.gas);\n            require(v9); // checks call status, propagates error data on error\n            emit LogRefBonus(msg.sender, address(v6), 2, msg.value / 20);\n        }\n        require(_investorsCount.code.size);\n        v10, v11 = _investorsCount.r(address(v6)).gas(msg.gas);\n        require(v10); // checks call status, propagates error data on error\n        require(RETURNDATASIZE() >= 32);\n        if (address(v11) != 0) {\n            require(_investorsCount.code.size);\n            v12, v13 = _investorsCount.amountOfDeposits(address(v11)).gas(msg.gas);\n            require(v12); // checks call status, propagates error data on error\n            require(RETURNDATASIZE() >= 32);\n            if (v13 < 500) {\n                require(_investorsCount.code.size);\n                v14 = _investorsCount.addDeposit(address(v11), msg.value * 3 / 100).gas(msg.gas);\n                require(v14); // checks call status, propagates error data on error\n                emit LogRefBonus(msg.sender, address(v11), 3, msg.value * 3 / 100);\n            }\n        }\n    }\n    return ;\n}\n\nfunction investorsCount() public nonPayable { \n    require(_investorsCount.code.size);\n    v0, v1 = _investorsCount.investorsCount().gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    return v1;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x1c5e789 == function_selector) {\n            getPayedAmount();\n        } else if (0x2b711051 == function_selector) {\n            investorsCount();\n        } else if (0x3ccfd60b == function_selector) {\n            withdraw();\n        } else if (0x4634d81c == function_selector) {\n            getDividends(address);\n        } else if (0x62243096 == function_selector) {\n            getInvestedAmount();\n        } else if (0x94f649dd == function_selector) {\n            getDeposits(address);\n        } else if (0xa612ad1b == function_selector) {\n            getDaysAfterStart();\n        } else if (0xe8b5e51f == function_selector) {\n            invest();\n        } else if (0xfc6ce454 == function_selector) {\n            getDividendsWithFee(address);\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.22 11:49 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 stor_1; // STORAGE[0x1]\nuint256 _getInvestedAmount; // STORAGE[0x2]\nuint256 _getPayedAmount; // STORAGE[0x3]\nuint256 _getDaysAfterStart; // STORAGE[0x4]\naddress stor_0_0_19; // STORAGE[0x0] bytes 0 to 19\naddress _investorsCount; // STORAGE[0x5] bytes 0 to 19\n\n// Events\nLogIncome(address, uint256);\nLogInvestment(address, uint256, uint256);\nLogNewWave(uint256);\nLogRefBonus(address, address, uint256, uint256);\nLogReferrerAdded(address, address);\n\nfunction withdraw() public nonPayable { \n    0x28c();\n}\n\nfunction getDividends(address varg0) public nonPayable { \n    require(_investorsCount.code.size);\n    v0, v1 = _investorsCount.dividends(varg0).gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    return v1;\n}\n\nfunction getInvestedAmount() public nonPayable { \n    return _getInvestedAmount;\n}\n\nfunction getDeposits(address varg0) public nonPayable { \n    require(_investorsCount.code.size);\n    v0, v1 = _investorsCount.sumOfDeposits(varg0).gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    return v1;\n}\n\nfunction getDaysAfterStart() public nonPayable { \n    require(_getDaysAfterStart <= block.timestamp);\n    assert(0x15180);\n    return (block.timestamp - _getDaysAfterStart) / 0x15180;\n}\n\nfunction invest() public payable { \n    0x5bf();\n}\n\nfunction getDividendsWithFee(address varg0) public nonPayable { \n    require(_investorsCount.code.size);\n    v0, v1 = _investorsCount.dividends(varg0).gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    assert(25);\n    return v1 * 24 / 25;\n}\n\nfunction 0x28c() private { \n    require(_investorsCount.code.size);\n    v0, v1 = _investorsCount.dividends(msg.sender).gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    if (v1 > 0) {\n        if (v1 <= (address(this)).balance) {\n            require(_investorsCount.code.size);\n            v2 = _investorsCount.updateCheckpoint(msg.sender).gas(msg.gas);\n            require(v2); // checks call status, propagates error data on error\n            v3 = stor_0_0_19.call().value(v1 / 25).gas(!(v1 / 25) * 2300);\n            require(v3); // checks call status, propagates error data on error\n            v4 = msg.sender.call().value(v1 * 24 / 25).gas(!(v1 * 24 / 25) * 2300);\n            require(v4); // checks call status, propagates error data on error\n            emit LogIncome(msg.sender, v1);\n            _getPayedAmount = _getPayedAmount + v1;\n        } else {\n            MEM[(MEM[64]) len 4054] = 0x608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610f76806100606000396000f3006080604052600436106100c5576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806304ee65c0146100ca5780631787787b146101215780632b711051146101825780632fbe0b7b146101ad57806333026bb61461020e578063566ab6f91461025b57806362c1a2a2146102de57806368306e43146103355780636a9d55de1461038c578063702f5e19146103f1578063759f778514610434578063b94265b81461048b578063f8b05ddb146104ee575b600080fd5b3480156100d657600080fd5b5061010b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061055b565b6040518082815260200191505060405180910390f35b34801561012d57600080fd5b5061016c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506105a7565b6040518082815260200191505060405180910390f35b34801561018e57600080fd5b50610197610612565b6040518082815260200191505060405180910390f35b3480156101b957600080fd5b506101f8600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061061c565b6040518082815260200191505060405180910390f35b34801561021a57600080fd5b50610259600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610687565b005b34801561026757600080fd5b5061029c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610822565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156102ea57600080fd5b5061031f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061088e565b6040518082815260200191505060405180910390f35b34801561034157600080fd5b50610376600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506108dd565b6040518082815260200191505060405180910390f35b34801561039857600080fd5b506103d7600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610a67565b604051808215151515815260200191505060405180910390f35b3480156103fd57600080fd5b50610432600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610b23565b005b34801561044057600080fd5b50610475600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610bc8565b6040518082815260200191505060405180910390f35b34801561049757600080fd5b506104ec600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610c9a565b005b3480156104fa57600080fd5b50610545600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803515159060200190929190505050610d7a565b6040518082815260200191505060405180910390f35b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101549050919050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001828154811015156105f857fe5b906000526020600020906002020160010154905092915050565b6000600154905090565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018281548110151561066d57fe5b906000526020600020906002020160000154905092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156106e257600080fd5b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000016040805190810160405280838152602001428152509080600181540180825580915050906001820390600052602060002090600202016000909192909190915060008201518160000155602082015181600101555050506000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154141561081e5742600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010181905550600180600082825401925050819055505b5050565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001805490509050919050565b6000806000806108ef85600080610d7a565b9150600090505b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000180549050811015610a5c5761094d8582610a67565b15156109cd576109c4620151806109b66109786109698961055b565b42610ec190919063ffffffff16565b6109a861271061099a8861098c8d8a61061c565b610ee290919063ffffffff16565b610f2090919063ffffffff16565b610ee290919063ffffffff16565b610f2090919063ffffffff16565b83019250610a4f565b610a4a62015180610a3c6109f36109e489866105a7565b42610ec190919063ffffffff16565b610a2e612710610a20610a088c896001610d7a565b610a128d8a61061c565b610ee290919063ffffffff16565b610f2090919063ffffffff16565b610ee290919063ffffffff16565b610f2090919063ffffffff16565b830192505b80806001019150506108f6565b829350505050919050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000183815481101515610afb57fe5b9060005260206000209060020201600101541115610b1c5760019050610b1d565b5b92915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610b7e57600080fd5b42600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018190555050565b60008060008090505b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000180549050811015610c9057600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000181815481101515610c6d57fe5b906000526020600020906002020160000154820191508080600101915050610bd1565b8192505050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610cf557600080fd5b80600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6000806000600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000185815481101515610dce57fe5b9060005260206000209060020201600001541115610eb8578215610e5457600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000184815481101515610e3b57fe5b9060005260206000209060020201600101549050610e9a565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015490505b600262015180824203811515610eac57fe5b040260ea019150610eb9565b5b509392505050565b600080838311151515610ed357600080fd5b82840390508091505092915050565b6000806000841415610ef75760009150610f19565b8284029050828482811515610f0857fe5b04141515610f1557600080fd5b8091505b5092915050565b600080600083111515610f3257600080fd5b8284811515610f3d57fe5b04905080915050929150505600a165627a7a723058202c6097a16120cb794b5dde390a415d7e758909e0c28b705cab849565a545b7c70029;\n            v5 = create.code(MEM[64], 4054).value(0);\n            require(v5); // checks call status, propagates error data on error\n            _investorsCount = v5;\n            _getInvestedAmount = 0;\n            _getPayedAmount = 0;\n            stor_1 = block.timestamp + 0x93a80;\n            emit LogNewWave(stor_1);\n        }\n    }\n    return ;\n}\n\nfunction 0x5bf() private { \n    v0 = v1 = 0;\n    require(stor_1 <= block.timestamp);\n    require(msg.value >= 0x2386f26fc10000);\n    v2 = stor_0_0_19.call().value(msg.value / 25).gas(!(msg.value / 25) * 2300);\n    require(v2); // checks call status, propagates error data on error\n    require(_investorsCount.code.size);\n    v3, v4 = _investorsCount.r(msg.sender).gas(msg.gas);\n    require(v3); // checks call status, propagates error data on error\n    v5 = new bytes[](msg.data.length);\n    require(RETURNDATASIZE() >= 32);\n    v4 = v5.length;\n    v6 = v5.data;\n    if (address(v4) == 0) {\n        if (msg.data.length == 20) {\n            v0 = v7 = 0;\n            CALLDATACOPY(v5.data, 0, msg.data.length);\n            if (address(MEM[MEM[64] + 20]) != msg.sender) {\n                require(_investorsCount.code.size);\n                v8 = _investorsCount.addReferrer(msg.sender, address(MEM[MEM[64] + 20])).gas(msg.gas);\n                require(v8); // checks call status, propagates error data on error\n                emit LogReferrerAdded(msg.sender, address(MEM[MEM[64] + 20]));\n                v0 = v9 = msg.value / 20;\n            }\n            0xdbd();\n        }\n    } else {\n        0xdbd();\n    }\n    require(_investorsCount.code.size);\n    v10 = _investorsCount.addDeposit(msg.sender, msg.value + v0).gas(msg.gas);\n    require(v10); // checks call status, propagates error data on error\n    _getInvestedAmount = _getInvestedAmount + msg.value;\n    emit LogInvestment(msg.sender, msg.value, v0);\n    return ;\n}\n\nfunction fallback() public payable { \n    if (msg.value != 0) {\n        0x5bf();\n    } else {\n        0x28c();\n    }\n}\n\nfunction getPayedAmount() public nonPayable { \n    return _getPayedAmount;\n}\n\nfunction 0xdbd() private { \n    require(_investorsCount.code.size);\n    v0, v1 = _investorsCount.r(msg.sender).gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    require(_investorsCount.code.size);\n    v2, v3 = _investorsCount.amountOfDeposits(address(v1)).gas(msg.gas);\n    require(v2); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    if (v3 < 500) {\n        require(_investorsCount.code.size);\n        v4 = _investorsCount.addDeposit(address(v1), msg.value / 10).gas(msg.gas);\n        require(v4); // checks call status, propagates error data on error\n        emit LogRefBonus(msg.sender, address(v1), 1, msg.value / 10);\n    }\n    require(_investorsCount.code.size);\n    v5, v6 = _investorsCount.r(address(v1)).gas(msg.gas);\n    require(v5); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    if (address(v6) != 0) {\n        require(_investorsCount.code.size);\n        v7, v8 = _investorsCount.amountOfDeposits(address(v6)).gas(msg.gas);\n        require(v7); // checks call status, propagates error data on error\n        require(RETURNDATASIZE() >= 32);\n        if (v8 < 500) {\n            require(_investorsCount.code.size);\n            v9 = _investorsCount.addDeposit(address(v6), msg.value / 20).gas(msg.gas);\n            require(v9); // checks call status, propagates error data on error\n            emit LogRefBonus(msg.sender, address(v6), 2, msg.value / 20);\n        }\n        require(_investorsCount.code.size);\n        v10, v11 = _investorsCount.r(address(v6)).gas(msg.gas);\n        require(v10); // checks call status, propagates error data on error\n        require(RETURNDATASIZE() >= 32);\n        if (address(v11) != 0) {\n            require(_investorsCount.code.size);\n            v12, v13 = _investorsCount.amountOfDeposits(address(v11)).gas(msg.gas);\n            require(v12); // checks call status, propagates error data on error\n            require(RETURNDATASIZE() >= 32);\n            if (v13 < 500) {\n                require(_investorsCount.code.size);\n                v14 = _investorsCount.addDeposit(address(v11), msg.value * 3 / 100).gas(msg.gas);\n                require(v14); // checks call status, propagates error data on error\n                emit LogRefBonus(msg.sender, address(v11), 3, msg.value * 3 / 100);\n            }\n        }\n    }\n    return ;\n}\n\nfunction investorsCount() public nonPayable { \n    require(_investorsCount.code.size);\n    v0, v1 = _investorsCount.investorsCount().gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    return v1;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x1c5e789 == function_selector) {\n            getPayedAmount();\n        } else if (0x2b711051 == function_selector) {\n            investorsCount();\n        } else if (0x3ccfd60b == function_selector) {\n            withdraw();\n        } else if (0x4634d81c == function_selector) {\n            getDividends(address);\n        } else if (0x62243096 == function_selector) {\n            getInvestedAmount();\n        } else if (0x94f649dd == function_selector) {\n            getDeposits(address);\n        } else if (0xa612ad1b == function_selector) {\n            getDaysAfterStart();\n        } else if (0xe8b5e51f == function_selector) {\n            invest();\n        } else if (0xfc6ce454 == function_selector) {\n            getDividendsWithFee(address);\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 26.341336727142334,
	"usage": {
		"completion_tokens": 593,
		"prompt_tokens": 5000,
		"total_tokens": 5593
	}
}