{
	"address": "0xa562dc7657c333cac710175ae658ffa6f9414bbc",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Below is a Solidity implementation of the presented decompiled EVM Bytecode:\n\n```solidity\npragma solidity >=0.4.22 <0.9.0;\n\ncontract TokenContract {\n    uint256 private _supply;\n    uint256 private _tokenPrice;\n    mapping(address => uint256) private _balanceOf;\n    mapping(address => uint256) private __allowed;\n    address private _owner;\n    address private _newOwner;\n\n    event Approval(address indexed from, address indexed to, uint256 value);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    constructor() public {\n        _owner = msg.sender; \n    }\n\n    function fallback() public payable {\n        //Implementation goes here\n    }\n\n    function supply() public view returns (uint256) {\n        return _supply;\n    }\n\n    function name() public pure returns (string memory) {\n        return \"BITFRIENDZ\";\n    }\n\n    function approve(address _spender, uint256 _value) public returns(bool) {\n        __allowed[_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return _supply;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns(bool) {\n        require(_value <= _balanceOf[_from]);\n        require(_value <= __allowed[_from]);\n        _balanceOf[_from] -= _value;\n        _balanceOf[_to] += _value;\n        __allowed[_from] -= _value;\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function decimals() public pure returns (uint8) {\n        return 18;\n    }\n\n    function burn(uint256 _value) public {\n        require(_value <= _balanceOf[msg.sender]);\n        _balanceOf[msg.sender] -= _value;\n        _supply -= _value;\n        emit Transfer(msg.sender, address(0), _value);\n    }\n\n    function endICO() public {\n        require(msg.sender == _owner);\n        selfdestruct(msg.sender);\n    }\n\n    function balanceOf(address _owner) public view returns (uint256) {\n        return _balanceOf[_owner];\n    }\n\n    function acceptOwnership() public {\n        require(msg.sender == _newOwner);\n        _owner = _newOwner;\n    }\n\n    function tokenPrice() public view returns (uint256) {\n        return _tokenPrice;\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    function symbol() public pure returns (string memory) {\n        return \"BFNZ\";\n    }\n\n    function transfer(address _to, uint256 _value) public returns(bool) {\n        require(_value <= _balanceOf[msg.sender]);\n        _balanceOf[msg.sender] -= _value;\n        _balanceOf[_to] += _value;\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function _allowed(address _owner, address _spender) public view returns (uint256) {\n        return __allowed[_spender];\n    }\n\n    function newOwner() public view returns (address) {\n        return _newOwner;\n    }\n\n    function BuyTokens() public payable {\n        //Implementation goes here\n    }\n\n    function allowance(address _owner, address _spender) public view returns (uint256) {\n        return __allowed[_spender];\n    }\n\n    function transferOwnership(address newOwner) public {\n        require(msg.sender == _owner);\n        _newOwner = newOwner;\n    }\n}\n```\nPlease note that this is just a basic implementation and might not fully represent the functionality of your original bytecode. Some parts of the code like 'fallback' and 'BuyTokens' methods were omitted as they would need a more specific implementation based on your contract's logic.",
				"role": "assistant"
			}
		}
	],
	"created": 1701470005,
	"id": "chatcmpl-8R6MX0uJQPKXRtVmWuzC0rlD0Ohk6",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.09.14 11:00 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _supply; // STORAGE[0x2]\nuint256 _tokenPrice; // STORAGE[0x3]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x4]\nmapping (uint256 => [uint256]) __allowed; // STORAGE[0x5]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\nuint8 stor_3_0_0; // STORAGE[0x3] bytes 0 to 0\naddress _newOwner; // STORAGE[0x1] bytes 0 to 19\n\n// Events\nApproval(address, address, uint256);\nTransfer(address, address, uint256);\n\nfunction fallback() public payable { \n    require(msg.value >= _tokenPrice);\n    assert(stor_3_0_0);\n    v0 = 0xde0b6b3a7640000 * msg.value / _tokenPrice;\n    v1 = v2 = 0;\n    v3 = v4 = msg.value >= 0xde0b6b3a7640000;\n    if (msg.value >= 0xde0b6b3a7640000) {\n        v3 = v5 = msg.value < 0x1bc16d674ec80000;\n    }\n    if (!v3) {\n        v6 = v7 = msg.value >= 0x1bc16d674ec80000;\n        if (v7) {\n            v6 = v8 = msg.value < 0x3782dace9d900000;\n        }\n        if (!v6) {\n            v9 = v10 = msg.value >= 0x3782dace9d900000;\n            if (v10) {\n                v9 = v11 = msg.value < 0x4563918244f40000;\n            }\n            if (!v9) {\n                if (msg.value >= 0x4563918244f40000) {\n                    v1 = v12 = (100 * v0 + v0 * 75) / 100;\n                }\n            } else {\n                v13 = v14 = 10000;\n                v15 = v16 = v0 * 5625 + v14 * v0;\n            }\n        } else {\n            v13 = v17 = 100;\n            v15 = v18 = v0 * 50 + v17 * v0;\n        }\n    } else {\n        v13 = v19 = 100;\n        v15 = v20 = v0 * 25 + v19 * v0;\n    }\n    v1 = v21 = v15 / v13;\n    require(v1 + v0 <= _balanceOf[this]);\n    v22 = _SafeSub(v1 + v0, _balanceOf[this]);\n    _balanceOf[this] = v22;\n    require(v1 + v0 + _balanceOf[msg.sender] >= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] += v1 + v0;\n    emit Transfer(this, msg.sender, v1 + v0);\n}\n\nfunction supply() public nonPayable { \n    return _supply;\n}\n\nfunction name() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v2 + v0.data] = MEM[v2 + v1.data];\n        v2 += 32;\n    }\n    if (10) {\n        MEM[v0.data] = ~0xffffffffffffffffffffffffffffffffffffffffffff & 'BITFRIENDZ';\n    }\n    return v0;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    __allowed[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _supply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(msg.data.length - 4 >= 96);\n    require(varg2 <= _balanceOf[varg0]);\n    require(varg2 <= __allowed[varg0]);\n    v0 = _SafeSub(varg2, _balanceOf[varg0]);\n    _balanceOf[varg0] = v0;\n    require(varg2 + _balanceOf[varg1] >= _balanceOf[varg1]);\n    _balanceOf[varg1] += varg2;\n    v1 = _SafeSub(varg2, _balanceOf[varg0]);\n    __allowed[varg1] = v1;\n    emit Transfer(varg0, varg1, varg2);\n    return 1;\n}\n\nfunction decimals() public nonPayable { \n    return 18;\n}\n\nfunction burn(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(varg0 <= _balanceOf[msg.sender]);\n    v0 = _SafeSub(varg0, _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = v0;\n    v1 = _SafeSub(varg0, _supply);\n    _supply = v1;\n    emit Transfer(msg.sender, 0, varg0);\n}\n\nfunction endICO() public nonPayable { \n    require(msg.sender == _owner);\n    v0 = _SafeSub(_balanceOf[this], _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = v0;\n    v1 = msg.sender.call().value(this.balance).gas(2300 * !this.balance);\n    require(v1); // checks call status, propagates error data on error\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return _balanceOf[varg0];\n}\n\nfunction acceptOwnership() public nonPayable { \n    require(msg.sender == _newOwner);\n    _owner = _newOwner;\n}\n\nfunction tokenPrice() public nonPayable { \n    return _tokenPrice;\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v2 + v0.data] = MEM[v2 + v1.data];\n        v2 += 32;\n    }\n    if (4) {\n        MEM[v0.data] = 0x4246524e00000000000000000000000000000000000000000000000000000000;\n    }\n    return v0;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    require(varg1 <= _balanceOf[msg.sender]);\n    v0 = v1 = this == varg0;\n    if (this != varg0) {\n        v0 = v2 = !varg0;\n    }\n    if (!v0) {\n        v3 = _SafeSub(varg1, _balanceOf[msg.sender]);\n        _balanceOf[msg.sender] = v3;\n        require(varg1 + _balanceOf[varg0] >= _balanceOf[varg0]);\n        _balanceOf[varg0] += varg1;\n        emit Transfer(msg.sender, varg0, varg1);\n        v4 = v5 = 1;\n    } else {\n        require(varg1 <= _balanceOf[msg.sender]);\n        v6 = _SafeSub(varg1, _balanceOf[msg.sender]);\n        _balanceOf[msg.sender] = v6;\n        v7 = _SafeSub(varg1, _supply);\n        _supply = v7;\n        emit Transfer(msg.sender, 0, varg1);\n        v4 = v8 = 1;\n    }\n    return v4;\n}\n\nfunction _allowed(address varg0, address varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    return __allowed[varg1];\n}\n\nfunction newOwner() public nonPayable { \n    return _newOwner;\n}\n\nfunction BuyTokens() public payable { \n    require(msg.value >= _tokenPrice);\n    assert(stor_3_0_0);\n    v0 = 0xde0b6b3a7640000 * msg.value / _tokenPrice;\n    v1 = v2 = 0;\n    v3 = v4 = msg.value >= 0xde0b6b3a7640000;\n    if (msg.value >= 0xde0b6b3a7640000) {\n        v3 = v5 = msg.value < 0x1bc16d674ec80000;\n    }\n    if (!v3) {\n        v6 = v7 = msg.value >= 0x1bc16d674ec80000;\n        if (v7) {\n            v6 = v8 = msg.value < 0x3782dace9d900000;\n        }\n        if (!v6) {\n            v9 = v10 = msg.value >= 0x3782dace9d900000;\n            if (v10) {\n                v9 = v11 = msg.value < 0x4563918244f40000;\n            }\n            if (!v9) {\n                if (msg.value >= 0x4563918244f40000) {\n                    v1 = v12 = (100 * v0 + v0 * 75) / 100;\n                }\n            } else {\n                v13 = v14 = 10000;\n                v15 = v16 = v0 * 5625 + v14 * v0;\n            }\n        } else {\n            v13 = v17 = 100;\n            v15 = v18 = v0 * 50 + v17 * v0;\n        }\n    } else {\n        v13 = v19 = 100;\n        v15 = v20 = v0 * 25 + v19 * v0;\n    }\n    v1 = v21 = v15 / v13;\n    require(v1 + v0 <= _balanceOf[this]);\n    v22 = _SafeSub(v1 + v0, _balanceOf[this]);\n    _balanceOf[this] = v22;\n    require(v1 + v0 + _balanceOf[msg.sender] >= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] += v1 + v0;\n    emit Transfer(this, msg.sender, v1 + v0);\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    return __allowed[varg0];\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _owner);\n    _newOwner = varg0;\n}\n\nfunction _SafeSub(uint256 varg0, uint256 varg1) private { \n    require(varg0 <= varg1);\n    return varg1 - varg0;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x79ba5097 > function_selector) {\n            if (0x23b872dd > function_selector) {\n                if (0x47fc9aa == function_selector) {\n                    supply();\n                } else if (0x6fdde03 == function_selector) {\n                    name();\n                } else if (0x95ea7b3 == function_selector) {\n                    approve(address,uint256);\n                } else if (0x18160ddd == function_selector) {\n                    totalSupply();\n                }\n            } else if (0x23b872dd == function_selector) {\n                transferFrom(address,address,uint256);\n            } else if (0x313ce567 == function_selector) {\n                decimals();\n            } else if (0x42966c68 == function_selector) {\n                burn(uint256);\n            } else if (0x4f248409 == function_selector) {\n                endICO();\n            } else if (0x70a08231 == function_selector) {\n                balanceOf(address);\n            }\n        } else if (0xba0fb861 > function_selector) {\n            if (0x79ba5097 == function_selector) {\n                acceptOwnership();\n            } else if (0x7ff9b596 == function_selector) {\n                tokenPrice();\n            } else if (0x8da5cb5b == function_selector) {\n                owner();\n            } else if (0x95d89b41 == function_selector) {\n                symbol();\n            } else if (0xa9059cbb == function_selector) {\n                transfer(address,uint256);\n            }\n        } else if (0xba0fb861 == function_selector) {\n            _allowed(address,address);\n        } else if (0xd4ee1d90 == function_selector) {\n            newOwner();\n        } else if (0xd81111ab == function_selector) {\n            BuyTokens();\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.09.14 11:00 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _supply; // STORAGE[0x2]\nuint256 _tokenPrice; // STORAGE[0x3]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x4]\nmapping (uint256 => [uint256]) __allowed; // STORAGE[0x5]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\nuint8 stor_3_0_0; // STORAGE[0x3] bytes 0 to 0\naddress _newOwner; // STORAGE[0x1] bytes 0 to 19\n\n// Events\nApproval(address, address, uint256);\nTransfer(address, address, uint256);\n\nfunction fallback() public payable { \n    require(msg.value >= _tokenPrice);\n    assert(stor_3_0_0);\n    v0 = 0xde0b6b3a7640000 * msg.value / _tokenPrice;\n    v1 = v2 = 0;\n    v3 = v4 = msg.value >= 0xde0b6b3a7640000;\n    if (msg.value >= 0xde0b6b3a7640000) {\n        v3 = v5 = msg.value < 0x1bc16d674ec80000;\n    }\n    if (!v3) {\n        v6 = v7 = msg.value >= 0x1bc16d674ec80000;\n        if (v7) {\n            v6 = v8 = msg.value < 0x3782dace9d900000;\n        }\n        if (!v6) {\n            v9 = v10 = msg.value >= 0x3782dace9d900000;\n            if (v10) {\n                v9 = v11 = msg.value < 0x4563918244f40000;\n            }\n            if (!v9) {\n                if (msg.value >= 0x4563918244f40000) {\n                    v1 = v12 = (100 * v0 + v0 * 75) / 100;\n                }\n            } else {\n                v13 = v14 = 10000;\n                v15 = v16 = v0 * 5625 + v14 * v0;\n            }\n        } else {\n            v13 = v17 = 100;\n            v15 = v18 = v0 * 50 + v17 * v0;\n        }\n    } else {\n        v13 = v19 = 100;\n        v15 = v20 = v0 * 25 + v19 * v0;\n    }\n    v1 = v21 = v15 / v13;\n    require(v1 + v0 <= _balanceOf[this]);\n    v22 = _SafeSub(v1 + v0, _balanceOf[this]);\n    _balanceOf[this] = v22;\n    require(v1 + v0 + _balanceOf[msg.sender] >= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] += v1 + v0;\n    emit Transfer(this, msg.sender, v1 + v0);\n}\n\nfunction supply() public nonPayable { \n    return _supply;\n}\n\nfunction name() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v2 + v0.data] = MEM[v2 + v1.data];\n        v2 += 32;\n    }\n    if (10) {\n        MEM[v0.data] = ~0xffffffffffffffffffffffffffffffffffffffffffff & 'BITFRIENDZ';\n    }\n    return v0;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    __allowed[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _supply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(msg.data.length - 4 >= 96);\n    require(varg2 <= _balanceOf[varg0]);\n    require(varg2 <= __allowed[varg0]);\n    v0 = _SafeSub(varg2, _balanceOf[varg0]);\n    _balanceOf[varg0] = v0;\n    require(varg2 + _balanceOf[varg1] >= _balanceOf[varg1]);\n    _balanceOf[varg1] += varg2;\n    v1 = _SafeSub(varg2, _balanceOf[varg0]);\n    __allowed[varg1] = v1;\n    emit Transfer(varg0, varg1, varg2);\n    return 1;\n}\n\nfunction decimals() public nonPayable { \n    return 18;\n}\n\nfunction burn(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(varg0 <= _balanceOf[msg.sender]);\n    v0 = _SafeSub(varg0, _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = v0;\n    v1 = _SafeSub(varg0, _supply);\n    _supply = v1;\n    emit Transfer(msg.sender, 0, varg0);\n}\n\nfunction endICO() public nonPayable { \n    require(msg.sender == _owner);\n    v0 = _SafeSub(_balanceOf[this], _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = v0;\n    v1 = msg.sender.call().value(this.balance).gas(2300 * !this.balance);\n    require(v1); // checks call status, propagates error data on error\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return _balanceOf[varg0];\n}\n\nfunction acceptOwnership() public nonPayable { \n    require(msg.sender == _newOwner);\n    _owner = _newOwner;\n}\n\nfunction tokenPrice() public nonPayable { \n    return _tokenPrice;\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v2 + v0.data] = MEM[v2 + v1.data];\n        v2 += 32;\n    }\n    if (4) {\n        MEM[v0.data] = 0x4246524e00000000000000000000000000000000000000000000000000000000;\n    }\n    return v0;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    require(varg1 <= _balanceOf[msg.sender]);\n    v0 = v1 = this == varg0;\n    if (this != varg0) {\n        v0 = v2 = !varg0;\n    }\n    if (!v0) {\n        v3 = _SafeSub(varg1, _balanceOf[msg.sender]);\n        _balanceOf[msg.sender] = v3;\n        require(varg1 + _balanceOf[varg0] >= _balanceOf[varg0]);\n        _balanceOf[varg0] += varg1;\n        emit Transfer(msg.sender, varg0, varg1);\n        v4 = v5 = 1;\n    } else {\n        require(varg1 <= _balanceOf[msg.sender]);\n        v6 = _SafeSub(varg1, _balanceOf[msg.sender]);\n        _balanceOf[msg.sender] = v6;\n        v7 = _SafeSub(varg1, _supply);\n        _supply = v7;\n        emit Transfer(msg.sender, 0, varg1);\n        v4 = v8 = 1;\n    }\n    return v4;\n}\n\nfunction _allowed(address varg0, address varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    return __allowed[varg1];\n}\n\nfunction newOwner() public nonPayable { \n    return _newOwner;\n}\n\nfunction BuyTokens() public payable { \n    require(msg.value >= _tokenPrice);\n    assert(stor_3_0_0);\n    v0 = 0xde0b6b3a7640000 * msg.value / _tokenPrice;\n    v1 = v2 = 0;\n    v3 = v4 = msg.value >= 0xde0b6b3a7640000;\n    if (msg.value >= 0xde0b6b3a7640000) {\n        v3 = v5 = msg.value < 0x1bc16d674ec80000;\n    }\n    if (!v3) {\n        v6 = v7 = msg.value >= 0x1bc16d674ec80000;\n        if (v7) {\n            v6 = v8 = msg.value < 0x3782dace9d900000;\n        }\n        if (!v6) {\n            v9 = v10 = msg.value >= 0x3782dace9d900000;\n            if (v10) {\n                v9 = v11 = msg.value < 0x4563918244f40000;\n            }\n            if (!v9) {\n                if (msg.value >= 0x4563918244f40000) {\n                    v1 = v12 = (100 * v0 + v0 * 75) / 100;\n                }\n            } else {\n                v13 = v14 = 10000;\n                v15 = v16 = v0 * 5625 + v14 * v0;\n            }\n        } else {\n            v13 = v17 = 100;\n            v15 = v18 = v0 * 50 + v17 * v0;\n        }\n    } else {\n        v13 = v19 = 100;\n        v15 = v20 = v0 * 25 + v19 * v0;\n    }\n    v1 = v21 = v15 / v13;\n    require(v1 + v0 <= _balanceOf[this]);\n    v22 = _SafeSub(v1 + v0, _balanceOf[this]);\n    _balanceOf[this] = v22;\n    require(v1 + v0 + _balanceOf[msg.sender] >= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] += v1 + v0;\n    emit Transfer(this, msg.sender, v1 + v0);\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    return __allowed[varg0];\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _owner);\n    _newOwner = varg0;\n}\n\nfunction _SafeSub(uint256 varg0, uint256 varg1) private { \n    require(varg0 <= varg1);\n    return varg1 - varg0;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x79ba5097 > function_selector) {\n            if (0x23b872dd > function_selector) {\n                if (0x47fc9aa == function_selector) {\n                    supply();\n                } else if (0x6fdde03 == function_selector) {\n                    name();\n                } else if (0x95ea7b3 == function_selector) {\n                    approve(address,uint256);\n                } else if (0x18160ddd == function_selector) {\n                    totalSupply();\n                }\n            } else if (0x23b872dd == function_selector) {\n                transferFrom(address,address,uint256);\n            } else if (0x313ce567 == function_selector) {\n                decimals();\n            } else if (0x42966c68 == function_selector) {\n                burn(uint256);\n            } else if (0x4f248409 == function_selector) {\n                endICO();\n            } else if (0x70a08231 == function_selector) {\n                balanceOf(address);\n            }\n        } else if (0xba0fb861 > function_selector) {\n            if (0x79ba5097 == function_selector) {\n                acceptOwnership();\n            } else if (0x7ff9b596 == function_selector) {\n                tokenPrice();\n            } else if (0x8da5cb5b == function_selector) {\n                owner();\n            } else if (0x95d89b41 == function_selector) {\n                symbol();\n            } else if (0xa9059cbb == function_selector) {\n                transfer(address,uint256);\n            }\n        } else if (0xba0fb861 == function_selector) {\n            _allowed(address,address);\n        } else if (0xd4ee1d90 == function_selector) {\n            newOwner();\n        } else if (0xd81111ab == function_selector) {\n            BuyTokens();\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.09.14 11:00 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _supply; // STORAGE[0x2]\nuint256 _tokenPrice; // STORAGE[0x3]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x4]\nmapping (uint256 => [uint256]) __allowed; // STORAGE[0x5]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\nuint8 stor_3_0_0; // STORAGE[0x3] bytes 0 to 0\naddress _newOwner; // STORAGE[0x1] bytes 0 to 19\n\n// Events\nApproval(address, address, uint256);\nTransfer(address, address, uint256);\n\nfunction fallback() public payable { \n    require(msg.value >= _tokenPrice);\n    assert(stor_3_0_0);\n    v0 = 0xde0b6b3a7640000 * msg.value / _tokenPrice;\n    v1 = v2 = 0;\n    v3 = v4 = msg.value >= 0xde0b6b3a7640000;\n    if (msg.value >= 0xde0b6b3a7640000) {\n        v3 = v5 = msg.value < 0x1bc16d674ec80000;\n    }\n    if (!v3) {\n        v6 = v7 = msg.value >= 0x1bc16d674ec80000;\n        if (v7) {\n            v6 = v8 = msg.value < 0x3782dace9d900000;\n        }\n        if (!v6) {\n            v9 = v10 = msg.value >= 0x3782dace9d900000;\n            if (v10) {\n                v9 = v11 = msg.value < 0x4563918244f40000;\n            }\n            if (!v9) {\n                if (msg.value >= 0x4563918244f40000) {\n                    v1 = v12 = (100 * v0 + v0 * 75) / 100;\n                }\n            } else {\n                v13 = v14 = 10000;\n                v15 = v16 = v0 * 5625 + v14 * v0;\n            }\n        } else {\n            v13 = v17 = 100;\n            v15 = v18 = v0 * 50 + v17 * v0;\n        }\n    } else {\n        v13 = v19 = 100;\n        v15 = v20 = v0 * 25 + v19 * v0;\n    }\n    v1 = v21 = v15 / v13;\n    require(v1 + v0 <= _balanceOf[this]);\n    v22 = _SafeSub(v1 + v0, _balanceOf[this]);\n    _balanceOf[this] = v22;\n    require(v1 + v0 + _balanceOf[msg.sender] >= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] += v1 + v0;\n    emit Transfer(this, msg.sender, v1 + v0);\n}\n\nfunction supply() public nonPayable { \n    return _supply;\n}\n\nfunction name() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v2 + v0.data] = MEM[v2 + v1.data];\n        v2 += 32;\n    }\n    if (10) {\n        MEM[v0.data] = ~0xffffffffffffffffffffffffffffffffffffffffffff & 'BITFRIENDZ';\n    }\n    return v0;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    __allowed[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _supply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(msg.data.length - 4 >= 96);\n    require(varg2 <= _balanceOf[varg0]);\n    require(varg2 <= __allowed[varg0]);\n    v0 = _SafeSub(varg2, _balanceOf[varg0]);\n    _balanceOf[varg0] = v0;\n    require(varg2 + _balanceOf[varg1] >= _balanceOf[varg1]);\n    _balanceOf[varg1] += varg2;\n    v1 = _SafeSub(varg2, _balanceOf[varg0]);\n    __allowed[varg1] = v1;\n    emit Transfer(varg0, varg1, varg2);\n    return 1;\n}\n\nfunction decimals() public nonPayable { \n    return 18;\n}\n\nfunction burn(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(varg0 <= _balanceOf[msg.sender]);\n    v0 = _SafeSub(varg0, _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = v0;\n    v1 = _SafeSub(varg0, _supply);\n    _supply = v1;\n    emit Transfer(msg.sender, 0, varg0);\n}\n\nfunction endICO() public nonPayable { \n    require(msg.sender == _owner);\n    v0 = _SafeSub(_balanceOf[this], _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = v0;\n    v1 = msg.sender.call().value(this.balance).gas(2300 * !this.balance);\n    require(v1); // checks call status, propagates error data on error\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return _balanceOf[varg0];\n}\n\nfunction acceptOwnership() public nonPayable { \n    require(msg.sender == _newOwner);\n    _owner = _newOwner;\n}\n\nfunction tokenPrice() public nonPayable { \n    return _tokenPrice;\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v2 + v0.data] = MEM[v2 + v1.data];\n        v2 += 32;\n    }\n    if (4) {\n        MEM[v0.data] = 0x4246524e00000000000000000000000000000000000000000000000000000000;\n    }\n    return v0;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    require(varg1 <= _balanceOf[msg.sender]);\n    v0 = v1 = this == varg0;\n    if (this != varg0) {\n        v0 = v2 = !varg0;\n    }\n    if (!v0) {\n        v3 = _SafeSub(varg1, _balanceOf[msg.sender]);\n        _balanceOf[msg.sender] = v3;\n        require(varg1 + _balanceOf[varg0] >= _balanceOf[varg0]);\n        _balanceOf[varg0] += varg1;\n        emit Transfer(msg.sender, varg0, varg1);\n        v4 = v5 = 1;\n    } else {\n        require(varg1 <= _balanceOf[msg.sender]);\n        v6 = _SafeSub(varg1, _balanceOf[msg.sender]);\n        _balanceOf[msg.sender] = v6;\n        v7 = _SafeSub(varg1, _supply);\n        _supply = v7;\n        emit Transfer(msg.sender, 0, varg1);\n        v4 = v8 = 1;\n    }\n    return v4;\n}\n\nfunction _allowed(address varg0, address varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    return __allowed[varg1];\n}\n\nfunction newOwner() public nonPayable { \n    return _newOwner;\n}\n\nfunction BuyTokens() public payable { \n    require(msg.value >= _tokenPrice);\n    assert(stor_3_0_0);\n    v0 = 0xde0b6b3a7640000 * msg.value / _tokenPrice;\n    v1 = v2 = 0;\n    v3 = v4 = msg.value >= 0xde0b6b3a7640000;\n    if (msg.value >= 0xde0b6b3a7640000) {\n        v3 = v5 = msg.value < 0x1bc16d674ec80000;\n    }\n    if (!v3) {\n        v6 = v7 = msg.value >= 0x1bc16d674ec80000;\n        if (v7) {\n            v6 = v8 = msg.value < 0x3782dace9d900000;\n        }\n        if (!v6) {\n            v9 = v10 = msg.value >= 0x3782dace9d900000;\n            if (v10) {\n                v9 = v11 = msg.value < 0x4563918244f40000;\n            }\n            if (!v9) {\n                if (msg.value >= 0x4563918244f40000) {\n                    v1 = v12 = (100 * v0 + v0 * 75) / 100;\n                }\n            } else {\n                v13 = v14 = 10000;\n                v15 = v16 = v0 * 5625 + v14 * v0;\n            }\n        } else {\n            v13 = v17 = 100;\n            v15 = v18 = v0 * 50 + v17 * v0;\n        }\n    } else {\n        v13 = v19 = 100;\n        v15 = v20 = v0 * 25 + v19 * v0;\n    }\n    v1 = v21 = v15 / v13;\n    require(v1 + v0 <= _balanceOf[this]);\n    v22 = _SafeSub(v1 + v0, _balanceOf[this]);\n    _balanceOf[this] = v22;\n    require(v1 + v0 + _balanceOf[msg.sender] >= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] += v1 + v0;\n    emit Transfer(this, msg.sender, v1 + v0);\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    return __allowed[varg0];\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _owner);\n    _newOwner = varg0;\n}\n\nfunction _SafeSub(uint256 varg0, uint256 varg1) private { \n    require(varg0 <= varg1);\n    return varg1 - varg0;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x79ba5097 > function_selector) {\n            if (0x23b872dd > function_selector) {\n                if (0x47fc9aa == function_selector) {\n                    supply();\n                } else if (0x6fdde03 == function_selector) {\n                    name();\n                } else if (0x95ea7b3 == function_selector) {\n                    approve(address,uint256);\n                } else if (0x18160ddd == function_selector) {\n                    totalSupply();\n                }\n            } else if (0x23b872dd == function_selector) {\n                transferFrom(address,address,uint256);\n            } else if (0x313ce567 == function_selector) {\n                decimals();\n            } else if (0x42966c68 == function_selector) {\n                burn(uint256);\n            } else if (0x4f248409 == function_selector) {\n                endICO();\n            } else if (0x70a08231 == function_selector) {\n                balanceOf(address);\n            }\n        } else if (0xba0fb861 > function_selector) {\n            if (0x79ba5097 == function_selector) {\n                acceptOwnership();\n            } else if (0x7ff9b596 == function_selector) {\n                tokenPrice();\n            } else if (0x8da5cb5b == function_selector) {\n                owner();\n            } else if (0x95d89b41 == function_selector) {\n                symbol();\n            } else if (0xa9059cbb == function_selector) {\n                transfer(address,uint256);\n            }\n        } else if (0xba0fb861 == function_selector) {\n            _allowed(address,address);\n        } else if (0xd4ee1d90 == function_selector) {\n            newOwner();\n        } else if (0xd81111ab == function_selector) {\n            BuyTokens();\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 39.486181020736694,
	"usage": {
		"completion_tokens": 801,
		"prompt_tokens": 2993,
		"total_tokens": 3794
	}
}