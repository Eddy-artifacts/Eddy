{
	"address": "0xdbdd2db0bc00930cf874af8281a9590d6e7b72e1",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is a Solidity contract code that closely matches the decompiled version:\n\n```solidity\n// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.20;\n\ncontract MyContract {\n    mapping (address => uint256) private _balanceOf;\n    mapping (address => mapping (address => uint256)) private _allowance;\n    uint256 private _totalSupply;\n    bytes private name;\n    bytes private symbol;\n    uint8 private decimals;\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    constructor(bytes memory _name, bytes memory _symbol, uint8 _decimals, uint256 _supply) {\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n        _totalSupply = _supply;\n        _balanceOf[msg.sender] = _supply;\n    }\n\n    function increaseAllowance(address spender, uint256 value) public returns (bool) {\n        require(_allowance[msg.sender][spender] <= value + _allowance[msg.sender][spender], \"ERC20: Arithmetic overflow\");\n        _approve(msg.sender, spender, _allowance[msg.sender][spender] + value);\n        return true;\n    }\n\n    function balanceOf(address account) public view returns (uint256) {\n        return _balanceOf[account];\n    }\n\n    function decreaseAllowance(address spender, uint256 value) public returns (bool) {\n        require(_allowance[msg.sender][spender] >= value, \"ERC20: Decreased allowance below zero\");\n        _approve(msg.sender, spender, _allowance[msg.sender][spender] - value);\n        return true;\n    }\n\n    function transfer(address recipient, uint256 amount) public returns (bool) {\n        _transfer(msg.sender, recipient, amount);\n        return true;\n    }\n\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowance[owner][spender];\n    }\n\n    function approve(address spender, uint256 value) public returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n        require(_allowance[sender][msg.sender] >= amount, \"ERC20: Insufficient allowance\");\n        _transfer(sender, recipient, amount);\n        if (_allowance[sender][msg.sender] != type(uint256).max) {\n            _approve(sender, msg.sender, _allowance[sender][msg.sender] - amount);\n        }\n        return true;\n    }\n\n    function _transfer(address sender, address recipient, uint256 amount) internal {\n        require(sender != address(0), \"ERC20: Transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: Transfer to the zero address\");\n        require(_balanceOf[sender] >= amount, \"ERC20: Transfer amount exceeds balance\");\n        _balanceOf[sender] -= amount;\n        _balanceOf[recipient] += amount;\n        emit Transfer(sender, recipient, amount);\n    }\n\n    function _approve(address owner, address spender, uint256 value) internal {\n        require(owner != address(0), \"ERC20: Approve from the zero address\");\n        require(spender != address(0), \"ERC20: Approve to the zero address\");\n        _allowance[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n}\n```\n\nNote that the translation is not exact because some parts of the decompiled code do not have a direct translation to Solidity (like the function selector). This contract implements a basic ERC20 token with additional increaseAllowance and decreaseAllowance functions.",
				"role": "assistant"
			}
		}
	],
	"created": 1701486390,
	"id": "chatcmpl-8RAcoS8JFLyUvr1NyWbpFy87WxN6f",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled by library.dedaub.com\n// 2023.11.13 19:38 UTC\n// Compiled using the solidity compiler version 0.8.20\n\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => uint256) _balanceOf; // STORAGE[0x0]\nmapping (uint256 => mapping (uint256 => uint256)) _allowance; // STORAGE[0x1]\nuint256 _totalSupply; // STORAGE[0x2]\nuint256[] array_3; // STORAGE[0x3]\nuint256[] array_4; // STORAGE[0x4]\n\n\n// Events\nApproval(address, address, uint256);\nTransfer(address, address, uint256);\n\nfunction decimals() public payable { \n    return uint8(18);\n}\n\nfunction increaseAllowance(address varg0, uint256 varg1) public payable { \n    require(msg.data.length - 4 >= 64);\n    require(varg0 == varg0);\n    require(_allowance[msg.sender][varg0] <= varg1 + _allowance[msg.sender][varg0], Panic(17)); // arithmetic overflow or underflow\n    0x36f(varg1 + _allowance[msg.sender][varg0], varg0, msg.sender);\n    return bool(1);\n}\n\nfunction balanceOf(address varg0) public payable { \n    require(msg.data.length - 4 >= 32);\n    require(varg0 == varg0);\n    return _balanceOf[varg0];\n}\n\nfunction symbol() public payable { \n    v0 = 0x2aa();\n    v1 = new bytes[](v0.length);\n    v2 = v3 = 0;\n    while (v2 < v0.length) {\n        v1[v2] = v0[v2];\n        v2 += 32;\n    }\n    v1[v0.length] = 0;\n    return v1;\n}\n\nfunction decreaseAllowance(address varg0, uint256 varg1) public payable { \n    require(msg.data.length - 4 >= 64);\n    require(varg0 == varg0);\n    require(_allowance[msg.sender][varg0] >= varg1, Error('ERC20: decreased allowance below zero'));\n    0x36f(_allowance[msg.sender][varg0] - varg1, varg0, msg.sender);\n    return bool(1);\n}\n\nfunction transfer(address varg0, uint256 varg1) public payable { \n    require(msg.data.length - 4 >= 64);\n    require(varg0 == varg0);\n    0x50a(varg1, varg0, msg.sender);\n    return bool(1);\n}\n\nfunction allowance(address varg0, address varg1) public payable { \n    require(msg.data.length - 4 >= 64);\n    require(varg0 == varg0);\n    require(varg1 == varg1);\n    return _allowance[varg0][varg1];\n}\n\nfunction 0x1bd() private { \n    v0 = 0x7c4(array_3.length);\n    v1 = new bytes[](v0);\n    v2 = v3 = v1.data;\n    v4 = 0x7c4(array_3.length);\n    if (!v4) {\n        return v1;\n    } else if (31 < v4) {\n        v5 = array_3.data;\n        do {\n            MEM[v2] = STORAGE[v5];\n            v5 += 1;\n            v2 += 32;\n        } while (v3 + v4 <= v2);\n        return v1;\n    } else {\n        MEM[v3] = array_3.length >> 8 << 8;\n        return v1;\n    }\n}\n\nfunction 0x2aa() private { \n    v0 = 0x7c4(array_4.length);\n    v1 = new bytes[](v0);\n    v2 = v3 = v1.data;\n    v4 = 0x7c4(array_4.length);\n    if (!v4) {\n        return v1;\n    } else if (31 < v4) {\n        v5 = array_4.data;\n        do {\n            MEM[v2] = STORAGE[v5];\n            v5 += 1;\n            v2 += 32;\n        } while (v3 + v4 <= v2);\n        return v1;\n    } else {\n        MEM[v3] = array_4.length >> 8 << 8;\n        return v1;\n    }\n}\n\nfunction 0x36f(uint256 varg0, address varg1, address varg2) private { \n    require(varg2, Error('ERC20: approve from the zero address', 'ERC20: approve from the zero address'));\n    require(varg1, Error('ERC20: approve to the zero address'));\n    _allowance[varg2][varg1] = varg0;\n    emit Approval(varg2, varg1, varg0);\n    return ;\n}\n\nfunction 0x50a(uint256 varg0, address varg1, address varg2) private { \n    require(varg2, Error('ERC20: transfer from the zero address'));\n    require(varg1, Error('ERC20: transfer to the zero address'));\n    require(_balanceOf[varg2] >= varg0, Error('ERC20: transfer amount exceeds balance'));\n    _balanceOf[varg2] = _balanceOf[varg2] - varg0;\n    _balanceOf[varg1] += varg0;\n    emit Transfer(varg2, varg1, varg0);\n    return ;\n}\n\nfunction 0x7c4(uint256 varg0) private { \n    v0 = v1 = varg0 >> 1;\n    if (!(varg0 & 0x1)) {\n        v0 = v2 = v1 & 0x7f;\n    }\n    require((varg0 & 0x1) - (v0 < 32), Panic(34)); // access to incorrectly encoded storage byte array\n    return v0;\n}\n\nfunction () public payable { \n    revert();\n}\n\nfunction name() public payable { \n    v0 = 0x1bd();\n    v1 = new bytes[](v0.length);\n    v2 = v3 = 0;\n    while (v2 < v0.length) {\n        v1[v2] = v0[v2];\n        v2 += 32;\n    }\n    v1[v0.length] = 0;\n    return v1;\n}\n\nfunction approve(address varg0, uint256 varg1) public payable { \n    require(msg.data.length - 4 >= 64);\n    require(varg0 == varg0);\n    0x36f(varg1, varg0, msg.sender);\n    return bool(1);\n}\n\nfunction totalSupply() public payable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public payable { \n    require(msg.data.length - 4 >= 96);\n    require(varg0 == varg0);\n    require(varg1 == varg1);\n    if (_allowance[varg0][msg.sender] != ~0) {\n        require(_allowance[varg0][msg.sender] >= varg2, Error('ERC20: insufficient allowance'));\n        0x36f(_allowance[varg0][msg.sender] - varg2, msg.sender, varg0);\n        // Unknown jump to Block 0x273. Refer to 3-address code (TAC);\n    }\n    0x50a(varg2, varg1, varg0);\n    return bool(1);\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(bytes4 function_selector) public payable { \n    MEM[64] = 128;\n    require(!msg.value);\n    if (msg.data.length >= 4) {\n        if (0x39509351 > function_selector >> 224) {\n            if (0x6fdde03 == function_selector >> 224) {\n                name();\n            } else if (0x95ea7b3 == function_selector >> 224) {\n                approve(address,uint256);\n            } else if (0x18160ddd == function_selector >> 224) {\n                totalSupply();\n            } else if (0x23b872dd == function_selector >> 224) {\n                transferFrom(address,address,uint256);\n            } else if (0x313ce567 == function_selector >> 224) {\n                decimals();\n            }\n        } else if (0x39509351 == function_selector >> 224) {\n            increaseAllowance(address,uint256);\n        } else if (0x70a08231 == function_selector >> 224) {\n            balanceOf(address);\n        } else if (0x95d89b41 == function_selector >> 224) {\n            symbol();\n        } else if (0xa457c2d7 == function_selector >> 224) {\n            decreaseAllowance(address,uint256);\n        } else if (0xa9059cbb == function_selector >> 224) {\n            transfer(address,uint256);\n        } else {\n            require(0xdd62ed3e == function_selector >> 224);\n            allowance(address,address);\n        }\n    }\n    ();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled by library.dedaub.com\n// 2023.11.13 19:38 UTC\n// Compiled using the solidity compiler version 0.8.20\n\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => uint256) _balanceOf; // STORAGE[0x0]\nmapping (uint256 => mapping (uint256 => uint256)) _allowance; // STORAGE[0x1]\nuint256 _totalSupply; // STORAGE[0x2]\nuint256[] array_3; // STORAGE[0x3]\nuint256[] array_4; // STORAGE[0x4]\n\n\n// Events\nApproval(address, address, uint256);\nTransfer(address, address, uint256);\n\nfunction decimals() public payable { \n    return uint8(18);\n}\n\nfunction increaseAllowance(address varg0, uint256 varg1) public payable { \n    require(msg.data.length - 4 >= 64);\n    require(varg0 == varg0);\n    require(_allowance[msg.sender][varg0] <= varg1 + _allowance[msg.sender][varg0], Panic(17)); // arithmetic overflow or underflow\n    0x36f(varg1 + _allowance[msg.sender][varg0], varg0, msg.sender);\n    return bool(1);\n}\n\nfunction balanceOf(address varg0) public payable { \n    require(msg.data.length - 4 >= 32);\n    require(varg0 == varg0);\n    return _balanceOf[varg0];\n}\n\nfunction symbol() public payable { \n    v0 = 0x2aa();\n    v1 = new bytes[](v0.length);\n    v2 = v3 = 0;\n    while (v2 < v0.length) {\n        v1[v2] = v0[v2];\n        v2 += 32;\n    }\n    v1[v0.length] = 0;\n    return v1;\n}\n\nfunction decreaseAllowance(address varg0, uint256 varg1) public payable { \n    require(msg.data.length - 4 >= 64);\n    require(varg0 == varg0);\n    require(_allowance[msg.sender][varg0] >= varg1, Error('ERC20: decreased allowance below zero'));\n    0x36f(_allowance[msg.sender][varg0] - varg1, varg0, msg.sender);\n    return bool(1);\n}\n\nfunction transfer(address varg0, uint256 varg1) public payable { \n    require(msg.data.length - 4 >= 64);\n    require(varg0 == varg0);\n    0x50a(varg1, varg0, msg.sender);\n    return bool(1);\n}\n\nfunction allowance(address varg0, address varg1) public payable { \n    require(msg.data.length - 4 >= 64);\n    require(varg0 == varg0);\n    require(varg1 == varg1);\n    return _allowance[varg0][varg1];\n}\n\nfunction 0x1bd() private { \n    v0 = 0x7c4(array_3.length);\n    v1 = new bytes[](v0);\n    v2 = v3 = v1.data;\n    v4 = 0x7c4(array_3.length);\n    if (!v4) {\n        return v1;\n    } else if (31 < v4) {\n        v5 = array_3.data;\n        do {\n            MEM[v2] = STORAGE[v5];\n            v5 += 1;\n            v2 += 32;\n        } while (v3 + v4 <= v2);\n        return v1;\n    } else {\n        MEM[v3] = array_3.length >> 8 << 8;\n        return v1;\n    }\n}\n\nfunction 0x2aa() private { \n    v0 = 0x7c4(array_4.length);\n    v1 = new bytes[](v0);\n    v2 = v3 = v1.data;\n    v4 = 0x7c4(array_4.length);\n    if (!v4) {\n        return v1;\n    } else if (31 < v4) {\n        v5 = array_4.data;\n        do {\n            MEM[v2] = STORAGE[v5];\n            v5 += 1;\n            v2 += 32;\n        } while (v3 + v4 <= v2);\n        return v1;\n    } else {\n        MEM[v3] = array_4.length >> 8 << 8;\n        return v1;\n    }\n}\n\nfunction 0x36f(uint256 varg0, address varg1, address varg2) private { \n    require(varg2, Error('ERC20: approve from the zero address', 'ERC20: approve from the zero address'));\n    require(varg1, Error('ERC20: approve to the zero address'));\n    _allowance[varg2][varg1] = varg0;\n    emit Approval(varg2, varg1, varg0);\n    return ;\n}\n\nfunction 0x50a(uint256 varg0, address varg1, address varg2) private { \n    require(varg2, Error('ERC20: transfer from the zero address'));\n    require(varg1, Error('ERC20: transfer to the zero address'));\n    require(_balanceOf[varg2] >= varg0, Error('ERC20: transfer amount exceeds balance'));\n    _balanceOf[varg2] = _balanceOf[varg2] - varg0;\n    _balanceOf[varg1] += varg0;\n    emit Transfer(varg2, varg1, varg0);\n    return ;\n}\n\nfunction 0x7c4(uint256 varg0) private { \n    v0 = v1 = varg0 >> 1;\n    if (!(varg0 & 0x1)) {\n        v0 = v2 = v1 & 0x7f;\n    }\n    require((varg0 & 0x1) - (v0 < 32), Panic(34)); // access to incorrectly encoded storage byte array\n    return v0;\n}\n\nfunction () public payable { \n    revert();\n}\n\nfunction name() public payable { \n    v0 = 0x1bd();\n    v1 = new bytes[](v0.length);\n    v2 = v3 = 0;\n    while (v2 < v0.length) {\n        v1[v2] = v0[v2];\n        v2 += 32;\n    }\n    v1[v0.length] = 0;\n    return v1;\n}\n\nfunction approve(address varg0, uint256 varg1) public payable { \n    require(msg.data.length - 4 >= 64);\n    require(varg0 == varg0);\n    0x36f(varg1, varg0, msg.sender);\n    return bool(1);\n}\n\nfunction totalSupply() public payable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public payable { \n    require(msg.data.length - 4 >= 96);\n    require(varg0 == varg0);\n    require(varg1 == varg1);\n    if (_allowance[varg0][msg.sender] != ~0) {\n        require(_allowance[varg0][msg.sender] >= varg2, Error('ERC20: insufficient allowance'));\n        0x36f(_allowance[varg0][msg.sender] - varg2, msg.sender, varg0);\n        // Unknown jump to Block 0x273. Refer to 3-address code (TAC);\n    }\n    0x50a(varg2, varg1, varg0);\n    return bool(1);\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(bytes4 function_selector) public payable { \n    MEM[64] = 128;\n    require(!msg.value);\n    if (msg.data.length >= 4) {\n        if (0x39509351 > function_selector >> 224) {\n            if (0x6fdde03 == function_selector >> 224) {\n                name();\n            } else if (0x95ea7b3 == function_selector >> 224) {\n                approve(address,uint256);\n            } else if (0x18160ddd == function_selector >> 224) {\n                totalSupply();\n            } else if (0x23b872dd == function_selector >> 224) {\n                transferFrom(address,address,uint256);\n            } else if (0x313ce567 == function_selector >> 224) {\n                decimals();\n            }\n        } else if (0x39509351 == function_selector >> 224) {\n            increaseAllowance(address,uint256);\n        } else if (0x70a08231 == function_selector >> 224) {\n            balanceOf(address);\n        } else if (0x95d89b41 == function_selector >> 224) {\n            symbol();\n        } else if (0xa457c2d7 == function_selector >> 224) {\n            decreaseAllowance(address,uint256);\n        } else if (0xa9059cbb == function_selector >> 224) {\n            transfer(address,uint256);\n        } else {\n            require(0xdd62ed3e == function_selector >> 224);\n            allowance(address,address);\n        }\n    }\n    ();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled by library.dedaub.com\n// 2023.11.13 19:38 UTC\n// Compiled using the solidity compiler version 0.8.20\n\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => uint256) _balanceOf; // STORAGE[0x0]\nmapping (uint256 => mapping (uint256 => uint256)) _allowance; // STORAGE[0x1]\nuint256 _totalSupply; // STORAGE[0x2]\nuint256[] array_3; // STORAGE[0x3]\nuint256[] array_4; // STORAGE[0x4]\n\n\n// Events\nApproval(address, address, uint256);\nTransfer(address, address, uint256);\n\nfunction decimals() public payable { \n    return uint8(18);\n}\n\nfunction increaseAllowance(address varg0, uint256 varg1) public payable { \n    require(msg.data.length - 4 >= 64);\n    require(varg0 == varg0);\n    require(_allowance[msg.sender][varg0] <= varg1 + _allowance[msg.sender][varg0], Panic(17)); // arithmetic overflow or underflow\n    0x36f(varg1 + _allowance[msg.sender][varg0], varg0, msg.sender);\n    return bool(1);\n}\n\nfunction balanceOf(address varg0) public payable { \n    require(msg.data.length - 4 >= 32);\n    require(varg0 == varg0);\n    return _balanceOf[varg0];\n}\n\nfunction symbol() public payable { \n    v0 = 0x2aa();\n    v1 = new bytes[](v0.length);\n    v2 = v3 = 0;\n    while (v2 < v0.length) {\n        v1[v2] = v0[v2];\n        v2 += 32;\n    }\n    v1[v0.length] = 0;\n    return v1;\n}\n\nfunction decreaseAllowance(address varg0, uint256 varg1) public payable { \n    require(msg.data.length - 4 >= 64);\n    require(varg0 == varg0);\n    require(_allowance[msg.sender][varg0] >= varg1, Error('ERC20: decreased allowance below zero'));\n    0x36f(_allowance[msg.sender][varg0] - varg1, varg0, msg.sender);\n    return bool(1);\n}\n\nfunction transfer(address varg0, uint256 varg1) public payable { \n    require(msg.data.length - 4 >= 64);\n    require(varg0 == varg0);\n    0x50a(varg1, varg0, msg.sender);\n    return bool(1);\n}\n\nfunction allowance(address varg0, address varg1) public payable { \n    require(msg.data.length - 4 >= 64);\n    require(varg0 == varg0);\n    require(varg1 == varg1);\n    return _allowance[varg0][varg1];\n}\n\nfunction 0x1bd() private { \n    v0 = 0x7c4(array_3.length);\n    v1 = new bytes[](v0);\n    v2 = v3 = v1.data;\n    v4 = 0x7c4(array_3.length);\n    if (!v4) {\n        return v1;\n    } else if (31 < v4) {\n        v5 = array_3.data;\n        do {\n            MEM[v2] = STORAGE[v5];\n            v5 += 1;\n            v2 += 32;\n        } while (v3 + v4 <= v2);\n        return v1;\n    } else {\n        MEM[v3] = array_3.length >> 8 << 8;\n        return v1;\n    }\n}\n\nfunction 0x2aa() private { \n    v0 = 0x7c4(array_4.length);\n    v1 = new bytes[](v0);\n    v2 = v3 = v1.data;\n    v4 = 0x7c4(array_4.length);\n    if (!v4) {\n        return v1;\n    } else if (31 < v4) {\n        v5 = array_4.data;\n        do {\n            MEM[v2] = STORAGE[v5];\n            v5 += 1;\n            v2 += 32;\n        } while (v3 + v4 <= v2);\n        return v1;\n    } else {\n        MEM[v3] = array_4.length >> 8 << 8;\n        return v1;\n    }\n}\n\nfunction 0x36f(uint256 varg0, address varg1, address varg2) private { \n    require(varg2, Error('ERC20: approve from the zero address', 'ERC20: approve from the zero address'));\n    require(varg1, Error('ERC20: approve to the zero address'));\n    _allowance[varg2][varg1] = varg0;\n    emit Approval(varg2, varg1, varg0);\n    return ;\n}\n\nfunction 0x50a(uint256 varg0, address varg1, address varg2) private { \n    require(varg2, Error('ERC20: transfer from the zero address'));\n    require(varg1, Error('ERC20: transfer to the zero address'));\n    require(_balanceOf[varg2] >= varg0, Error('ERC20: transfer amount exceeds balance'));\n    _balanceOf[varg2] = _balanceOf[varg2] - varg0;\n    _balanceOf[varg1] += varg0;\n    emit Transfer(varg2, varg1, varg0);\n    return ;\n}\n\nfunction 0x7c4(uint256 varg0) private { \n    v0 = v1 = varg0 >> 1;\n    if (!(varg0 & 0x1)) {\n        v0 = v2 = v1 & 0x7f;\n    }\n    require((varg0 & 0x1) - (v0 < 32), Panic(34)); // access to incorrectly encoded storage byte array\n    return v0;\n}\n\nfunction () public payable { \n    revert();\n}\n\nfunction name() public payable { \n    v0 = 0x1bd();\n    v1 = new bytes[](v0.length);\n    v2 = v3 = 0;\n    while (v2 < v0.length) {\n        v1[v2] = v0[v2];\n        v2 += 32;\n    }\n    v1[v0.length] = 0;\n    return v1;\n}\n\nfunction approve(address varg0, uint256 varg1) public payable { \n    require(msg.data.length - 4 >= 64);\n    require(varg0 == varg0);\n    0x36f(varg1, varg0, msg.sender);\n    return bool(1);\n}\n\nfunction totalSupply() public payable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public payable { \n    require(msg.data.length - 4 >= 96);\n    require(varg0 == varg0);\n    require(varg1 == varg1);\n    if (_allowance[varg0][msg.sender] != ~0) {\n        require(_allowance[varg0][msg.sender] >= varg2, Error('ERC20: insufficient allowance'));\n        0x36f(_allowance[varg0][msg.sender] - varg2, msg.sender, varg0);\n        // Unknown jump to Block 0x273. Refer to 3-address code (TAC);\n    }\n    0x50a(varg2, varg1, varg0);\n    return bool(1);\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(bytes4 function_selector) public payable { \n    MEM[64] = 128;\n    require(!msg.value);\n    if (msg.data.length >= 4) {\n        if (0x39509351 > function_selector >> 224) {\n            if (0x6fdde03 == function_selector >> 224) {\n                name();\n            } else if (0x95ea7b3 == function_selector >> 224) {\n                approve(address,uint256);\n            } else if (0x18160ddd == function_selector >> 224) {\n                totalSupply();\n            } else if (0x23b872dd == function_selector >> 224) {\n                transferFrom(address,address,uint256);\n            } else if (0x313ce567 == function_selector >> 224) {\n                decimals();\n            }\n        } else if (0x39509351 == function_selector >> 224) {\n            increaseAllowance(address,uint256);\n        } else if (0x70a08231 == function_selector >> 224) {\n            balanceOf(address);\n        } else if (0x95d89b41 == function_selector >> 224) {\n            symbol();\n        } else if (0xa457c2d7 == function_selector >> 224) {\n            decreaseAllowance(address,uint256);\n        } else if (0xa9059cbb == function_selector >> 224) {\n            transfer(address,uint256);\n        } else {\n            require(0xdd62ed3e == function_selector >> 224);\n            allowance(address,address);\n        }\n    }\n    ();\n}\n.",
	"status": "1",
	"time_cost": 24.835166215896606,
	"usage": {
		"completion_tokens": 795,
		"prompt_tokens": 2076,
		"total_tokens": 2871
	}
}