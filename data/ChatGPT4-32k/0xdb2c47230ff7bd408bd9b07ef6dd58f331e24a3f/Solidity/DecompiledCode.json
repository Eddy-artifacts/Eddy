{
	"address": "0xdb2c47230ff7bd408bd9b07ef6dd58f331e24a3f",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here's a Solidity version of the contract derived from the decompiled code:\n\n```Solidity\npragma solidity ^0.7.0;\n\ncontract ICO {\n    uint256 private _weiRaised;\n    address private _wwamICOcontractAddress;\n    address private _pricingStrategyAddress;\n    address private _tokenAddress;\n\n    function weiRaised() public view returns (uint256) {\n        return _weiRaised;\n    }\n\n    function wwamICOcontractAddress() public view returns (address) {\n        return _wwamICOcontractAddress;\n    }\n\n    function tokenAddress() public view returns (address) {\n        return _tokenAddress;\n    }\n\n    function pricingStrategyAddress() public view returns (address) {\n        return _pricingStrategyAddress;\n    }\n\n    function __function_selector__(uint32 function_selector) public payable {\n        if (msg.data.length > 0) {\n            if (0x4042b66f == function_selector) {\n                weiRaised();\n            } else if (0x664519bd == function_selector) {\n                wwamICOcontractAddress();\n            } else if (0x9d76ea58 == function_selector) {\n                tokenAddress();\n            } else if (0xe18dc0f6 == function_selector) {\n                pricingStrategyAddress();\n            }\n        }\n\n        (bool success,) = _wwamICOcontractAddress.call{value: msg.value, gas: 0x493e0}(\"\");\n        require(success, \"Failed to send value to ICO contract address\");\n\n        bool condition = _weiRaised + msg.value >= _weiRaised;\n        if (condition) {\n            condition = _weiRaised + msg.value >= msg.value;\n        }\n        require(condition, \"Overflow error on weiRaised\");\n        _weiRaised = _weiRaised + msg.value;\n\n        (bool v3, bytes memory v4) = _pricingStrategyAddress.delegatecall(\n            abi.encodeWithSignature(\"calculatePrice(uint256,uint256,uint256,uint256,uint256)\", msg.value, 0, 0, 0, 0));\n        require(v3, \"Failed to get price\");\n\n        (bool v5,) = _tokenAddress.call(\n            abi.encodeWithSignature(\"transfer(address,uint256)\", msg.sender, v4));\n        require(v5, \"Failed to transfer tokens\");\n    }\n}\n```\nPlease note: This Solidity code is an approximation of the decompiled code and may not work as expected depending on the actual implementations of the called contracts. Please test and verify this code thoroughly before using it.",
				"role": "assistant"
			}
		}
	],
	"created": 1701470610,
	"id": "chatcmpl-8R6WI0vsBYeLnhy71X04XvlhCnj7K",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.23 00:25 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _weiRaised; // STORAGE[0x0]\naddress _wwamICOcontractAddress; // STORAGE[0x1] bytes 0 to 19\naddress _pricingStrategyAddress; // STORAGE[0x2] bytes 0 to 19\naddress _tokenAddress; // STORAGE[0x3] bytes 0 to 19\n\n\nfunction weiRaised() public nonPayable { \n    return _weiRaised;\n}\n\nfunction wwamICOcontractAddress() public nonPayable { \n    return _wwamICOcontractAddress;\n}\n\nfunction tokenAddress() public nonPayable { \n    return _tokenAddress;\n}\n\nfunction pricingStrategyAddress() public nonPayable { \n    return _pricingStrategyAddress;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length) {\n        if (0x4042b66f == function_selector) {\n            weiRaised();\n        } else if (0x664519bd == function_selector) {\n            wwamICOcontractAddress();\n        } else if (0x9d76ea58 == function_selector) {\n            tokenAddress();\n        } else if (0xe18dc0f6 == function_selector) {\n            pricingStrategyAddress();\n        }\n    }\n    v0 = _wwamICOcontractAddress.call().value(msg.value).gas(0x493e0);\n    v1 = v2 = _weiRaised + msg.value >= _weiRaised;\n    if (v2) {\n        v1 = _weiRaised + msg.value >= msg.value;\n    }\n    require(v1);\n    _weiRaised = _weiRaised + msg.value;\n    MEM[32 + MEM[64]] = 0;\n    require(_pricingStrategyAddress.code.size);\n    v3, v4 = _pricingStrategyAddress.calculatePrice(msg.value, 0, 0, 0, 0).gas(msg.gas - 710);\n    require(v3);\n    MEM[32 + MEM[64]] = 0;\n    require(_tokenAddress.code.size);\n    v5, v6 = _tokenAddress.transfer(msg.sender, v4).gas(msg.gas - 710);\n    require(v5);\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.23 00:25 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _weiRaised; // STORAGE[0x0]\naddress _wwamICOcontractAddress; // STORAGE[0x1] bytes 0 to 19\naddress _pricingStrategyAddress; // STORAGE[0x2] bytes 0 to 19\naddress _tokenAddress; // STORAGE[0x3] bytes 0 to 19\n\n\nfunction weiRaised() public nonPayable { \n    return _weiRaised;\n}\n\nfunction wwamICOcontractAddress() public nonPayable { \n    return _wwamICOcontractAddress;\n}\n\nfunction tokenAddress() public nonPayable { \n    return _tokenAddress;\n}\n\nfunction pricingStrategyAddress() public nonPayable { \n    return _pricingStrategyAddress;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length) {\n        if (0x4042b66f == function_selector) {\n            weiRaised();\n        } else if (0x664519bd == function_selector) {\n            wwamICOcontractAddress();\n        } else if (0x9d76ea58 == function_selector) {\n            tokenAddress();\n        } else if (0xe18dc0f6 == function_selector) {\n            pricingStrategyAddress();\n        }\n    }\n    v0 = _wwamICOcontractAddress.call().value(msg.value).gas(0x493e0);\n    v1 = v2 = _weiRaised + msg.value >= _weiRaised;\n    if (v2) {\n        v1 = _weiRaised + msg.value >= msg.value;\n    }\n    require(v1);\n    _weiRaised = _weiRaised + msg.value;\n    MEM[32 + MEM[64]] = 0;\n    require(_pricingStrategyAddress.code.size);\n    v3, v4 = _pricingStrategyAddress.calculatePrice(msg.value, 0, 0, 0, 0).gas(msg.gas - 710);\n    require(v3);\n    MEM[32 + MEM[64]] = 0;\n    require(_tokenAddress.code.size);\n    v5, v6 = _tokenAddress.transfer(msg.sender, v4).gas(msg.gas - 710);\n    require(v5);\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.23 00:25 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _weiRaised; // STORAGE[0x0]\naddress _wwamICOcontractAddress; // STORAGE[0x1] bytes 0 to 19\naddress _pricingStrategyAddress; // STORAGE[0x2] bytes 0 to 19\naddress _tokenAddress; // STORAGE[0x3] bytes 0 to 19\n\n\nfunction weiRaised() public nonPayable { \n    return _weiRaised;\n}\n\nfunction wwamICOcontractAddress() public nonPayable { \n    return _wwamICOcontractAddress;\n}\n\nfunction tokenAddress() public nonPayable { \n    return _tokenAddress;\n}\n\nfunction pricingStrategyAddress() public nonPayable { \n    return _pricingStrategyAddress;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length) {\n        if (0x4042b66f == function_selector) {\n            weiRaised();\n        } else if (0x664519bd == function_selector) {\n            wwamICOcontractAddress();\n        } else if (0x9d76ea58 == function_selector) {\n            tokenAddress();\n        } else if (0xe18dc0f6 == function_selector) {\n            pricingStrategyAddress();\n        }\n    }\n    v0 = _wwamICOcontractAddress.call().value(msg.value).gas(0x493e0);\n    v1 = v2 = _weiRaised + msg.value >= _weiRaised;\n    if (v2) {\n        v1 = _weiRaised + msg.value >= msg.value;\n    }\n    require(v1);\n    _weiRaised = _weiRaised + msg.value;\n    MEM[32 + MEM[64]] = 0;\n    require(_pricingStrategyAddress.code.size);\n    v3, v4 = _pricingStrategyAddress.calculatePrice(msg.value, 0, 0, 0, 0).gas(msg.gas - 710);\n    require(v3);\n    MEM[32 + MEM[64]] = 0;\n    require(_tokenAddress.code.size);\n    v5, v6 = _tokenAddress.transfer(msg.sender, v4).gas(msg.gas - 710);\n    require(v5);\n}\n.",
	"status": "1",
	"time_cost": 39.57514476776123,
	"usage": {
		"completion_tokens": 520,
		"prompt_tokens": 582,
		"total_tokens": 1102
	}
}