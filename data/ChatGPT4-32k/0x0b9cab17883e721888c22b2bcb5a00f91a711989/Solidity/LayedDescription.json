{
	"address": "0x0b9cab17883e721888c22b2bcb5a00f91a711989",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Below is your Solidity smart contract based on the given requirements:\n\n```solidity\npragma solidity ^0.4.24;\n\ncontract Token {\n    address public owner;\n    string public standard;\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n    uint256 public totalsupply;\n    uint8 public locked;\n    uint256 public icosince;\n    uint256 public icotill;\n    mapping (address => uint256) public balanceof;\n    mapping (address => mapping (address => uint256)) public allowance;\n    uint256 public buyprice;\n    \n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function approve(address _address, uint256 _value) public {\n        allowance[msg.sender][_address] = _value;\n    }\n\n    function setLocked(bool _locked) public onlyOwner {\n        locked = _locked ? 1 : 0;\n    }\n\n    function() payable public {\n        require(buyprice != 0 && now >= icosince && msg.value > 0 && locked == 0 && now < icotill && balanceof[this] >= msg.value / buyprice);\n        balanceof[msg.sender] += msg.value / buyprice;\n        balanceof[this] -= msg.value / buyprice;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public {\n        require(balanceof[_to] + _value > balanceof[_to] && _value <= allowance[_from][msg.sender] && balanceof[_from] >= _value && locked == 0 && _value > 0);\n        balanceof[_from] -= _value;\n        balanceof[_to] += _value;\n        allowance[_from][msg.sender] -= _value;\n    }\n\n    function burn(uint256 _value) public onlyOwner {\n        require(balanceof[msg.sender] >= _value);\n        balanceof[msg.sender] -= _value;\n        totalsupply -= _value;\n    }\n\n    function icoFinished() public onlyOwner {\n        require(now > icotill);\n        balanceof[owner] += balanceof[this];\n        balanceof[this] = 0;\n    }\n\n    function setBuyPrice(uint256 _price) public onlyOwner {\n        buyprice = _price;\n    }\n\n    function transfer(address _to, uint256 _value) public {\n        require(locked == 0 && balanceof[_to] + _value > balanceof[_to] && balanceof[msg.sender] >= _value);\n        balanceof[msg.sender] -= _value;\n        balanceof[_to] += _value;\n    }\n\n    function transferEthers() public onlyOwner {\n        owner.transfer(balanceof[this]);\n    }\n\n    function transferOwnership(address newOwner) public onlyOwner {\n        owner = newOwner;\n    }\n\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        if(_extraData.length == 0) {\n            _spender.call(bytes4(bytes32(keccak256(\"receiveApproval(address,uint256)\"))), msg.sender, _value);\n        } else if (_extraData.length < 64) {\n            _spender.call(bytes4(bytes32(keccak256(\"receiveApproval(address,uint256,bytes)\"))), msg.sender, _value, _extraData);\n        } else if (_extraData.length < 96) {\n            _spender.call(bytes4(bytes32(keccak256(\"receiveApproval(address,uint256,bytes32)\"))), msg.sender, _value, _extraData);\n        } else if (_extraData.length < 128) {\n            _spender.call(bytes4(bytes32(keccak256(\"receiveApproval(address,uint256,bytes64)\"))), msg.sender, _value, _extraData);\n        } else if (_extraData.length < 160) {\n            _spender.call(bytes4(bytes32(keccak256(\"receiveApproval(address,uint256,bytes96)\"))), msg.sender, _value, _extraData);\n        }\n        return true;\n    }\n}\n```\nThis contract includes all the functions described in the task. The contract is a token contract with additional features like locking the contract, setting buy price and transferring the ownership.\nThe contract uses `msg.sender` to ensure that only the owner can change certain parameters. There are also checks in place to ensure that transactions can only take place when the contract is not locked and the ICO is ongoing. There are also checks to ensure that users can't spend more tokens than they have and that they can't double spend.",
				"role": "assistant"
			}
		}
	],
	"created": 1701714087,
	"id": "chatcmpl-8S7rLzmD8UDlX8XppNeFajdnX9PTE",
	"input_format": "LayedDescription",
	"ir": "For the approve function, it has 2 arguments and the type of each argument is as follows: address, uint256.\n- the allowance from caller to the first argument will be updated to the second argument.\n\nFor the setLocked function, it has one argument and its type is bool.\n- For owner:\n  - the state variable locked will be updated to the first argument.\n\nFor the payable fallback function.\n- When buyprice is not 0, and after icosince, and the ether just received (i.e., msg.value) is greater than 0, and locked is 0, and before icotill, and the balance of the address of this contract is not smaller than (the ether just received (i.e., msg.value)/buyprice):\n  - the balance of caller will be updated to ((the ether just received (i.e., msg.value)/buyprice)+the balance of caller).\n  - the balance of the address of this contract will be updated to (the balance of the address of this contract-(the ether just received (i.e., msg.value)/buyprice)).\n\nFor the transferFrom function, it has 3 arguments and the type of each argument is as follows: address, address, uint256.\n- When (the balance of the second argument+the third argument) is greater than the balance of the second argument, and the third argument is not greater than the allowance from the first argument to caller, and the balance of the first argument is not smaller than the third argument, and locked is 0, and the third argument is greater than 0:\n  - the balance of the first argument will be updated to (the balance of the first argument-the third argument).\n  - the balance of the second argument will be updated to (the third argument+the balance of the second argument).\n  - the allowance from the first argument to caller will be updated to (the allowance from the first argument to caller-the third argument).\n\nFor the burn function, it has one argument and its type is uint256.\n- When the balance of caller is greater than the first argument, and for owner:\n  - the balance of caller will be updated to (the balance of caller-the first argument).\n  - the state variable totalsupply will be updated to (totalsupply-the first argument).\n\nFor the icoFinished function.\n- For owner, and after icotill:\n  - the balance of owner will be updated to (the balance of the address of this contract+the balance of owner). Afterthat, \n    - the balance of the address of this contract will be updated to 0.\n\nFor the setBuyPrice function, it has one argument and its type is uint256.\n- For owner:\n  - the state variable buyprice will be updated to the first argument.\n\nFor the transfer function, it has 2 arguments and the type of each argument is as follows: address, uint256.\n- When locked is 0, and (the balance of the first argument+the second argument) is greater than the balance of the first argument, and the balance of caller is not smaller than the second argument:\n  - the balance of caller will be updated to (the balance of caller-the second argument).\n  - the balance of the first argument will be updated to (the second argument+the balance of the first argument).\n\nFor the transferEthers function.\n- For owner:\n  - it transfers ether valued the balance of the address of this contract to owner.\n\nFor the transferOwnership function, it has one argument and its type is address.\n- For owner:\n  - the state variable owner will be updated to the first argument.\n\nFor the approveAndCall function, it has 3 arguments and the type of each argument is as follows: address, uint256, bytes.\n- the allowance from caller to the first argument will be updated to the second argument.\n- When 0 is not smaller than the third argument:\n  - it calls an external function receiveApproval of the first argument.\n- When 0 is smaller than the third argument:\n  - When 32 is not smaller than the third argument:\n    - it calls an external function receiveApproval of the first argument.\n  - When 32 is smaller than the third argument:\n    - When 64 is not smaller than the third argument:\n      - it calls an external function receiveApproval of the first argument.\n    - When 64 is smaller than the third argument:\n      - When 96 is not smaller than the third argument:\n        - it calls an external function receiveApproval of the first argument.\n      - When 96 is smaller than the third argument:\n        - When 128 is not smaller than the third argument:\n          - it calls an external function receiveApproval of the first argument.\n        - When 128 is smaller than the third argument, and 160 is not smaller than the third argument:\n          - it calls an external function receiveApproval of the first argument.\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following contract descriptions. Some state variables are provided to help you develop.",
			"role": "system"
		},
		{
			"content": "The following is the description of the contract logic: For the approve function, it has 2 arguments and the type of each argument is as follows: address, uint256.\n- the allowance from caller to the first argument will be updated to the second argument.\n\nFor the setLocked function, it has one argument and its type is bool.\n- For owner:\n  - the state variable locked will be updated to the first argument.\n\nFor the payable fallback function.\n- When buyprice is not 0, and after icosince, and the ether just received (i.e., msg.value) is greater than 0, and locked is 0, and before icotill, and the balance of the address of this contract is not smaller than (the ether just received (i.e., msg.value)/buyprice):\n  - the balance of caller will be updated to ((the ether just received (i.e., msg.value)/buyprice)+the balance of caller).\n  - the balance of the address of this contract will be updated to (the balance of the address of this contract-(the ether just received (i.e., msg.value)/buyprice)).\n\nFor the transferFrom function, it has 3 arguments and the type of each argument is as follows: address, address, uint256.\n- When (the balance of the second argument+the third argument) is greater than the balance of the second argument, and the third argument is not greater than the allowance from the first argument to caller, and the balance of the first argument is not smaller than the third argument, and locked is 0, and the third argument is greater than 0:\n  - the balance of the first argument will be updated to (the balance of the first argument-the third argument).\n  - the balance of the second argument will be updated to (the third argument+the balance of the second argument).\n  - the allowance from the first argument to caller will be updated to (the allowance from the first argument to caller-the third argument).\n\nFor the burn function, it has one argument and its type is uint256.\n- When the balance of caller is greater than the first argument, and for owner:\n  - the balance of caller will be updated to (the balance of caller-the first argument).\n  - the state variable totalsupply will be updated to (totalsupply-the first argument).\n\nFor the icoFinished function.\n- For owner, and after icotill:\n  - the balance of owner will be updated to (the balance of the address of this contract+the balance of owner). Afterthat, \n    - the balance of the address of this contract will be updated to 0.\n\nFor the setBuyPrice function, it has one argument and its type is uint256.\n- For owner:\n  - the state variable buyprice will be updated to the first argument.\n\nFor the transfer function, it has 2 arguments and the type of each argument is as follows: address, uint256.\n- When locked is 0, and (the balance of the first argument+the second argument) is greater than the balance of the first argument, and the balance of caller is not smaller than the second argument:\n  - the balance of caller will be updated to (the balance of caller-the second argument).\n  - the balance of the first argument will be updated to (the second argument+the balance of the first argument).\n\nFor the transferEthers function.\n- For owner:\n  - it transfers ether valued the balance of the address of this contract to owner.\n\nFor the transferOwnership function, it has one argument and its type is address.\n- For owner:\n  - the state variable owner will be updated to the first argument.\n\nFor the approveAndCall function, it has 3 arguments and the type of each argument is as follows: address, uint256, bytes.\n- the allowance from caller to the first argument will be updated to the second argument.\n- When 0 is not smaller than the third argument:\n  - it calls an external function receiveApproval of the first argument.\n- When 0 is smaller than the third argument:\n  - When 32 is not smaller than the third argument:\n    - it calls an external function receiveApproval of the first argument.\n  - When 32 is smaller than the third argument:\n    - When 64 is not smaller than the third argument:\n      - it calls an external function receiveApproval of the first argument.\n    - When 64 is smaller than the third argument:\n      - When 96 is not smaller than the third argument:\n        - it calls an external function receiveApproval of the first argument.\n      - When 96 is smaller than the third argument:\n        - When 128 is not smaller than the third argument:\n          - it calls an external function receiveApproval of the first argument.\n        - When 128 is smaller than the third argument, and 160 is not smaller than the third argument:\n          - it calls an external function receiveApproval of the first argument.\n\n.\n Here are some state variables with their corresponding types: public state variable `owner` is typed address,public state variable `standard` is typed string,public state variable `name` is typed string,public state variable `symbol` is typed string,public state variable `decimals` is typed uint8,public state variable `totalsupply` is typed uint256,public state variable `locked` is typed uint8,public state variable `icosince` is typed uint256,public state variable `icotill` is typed uint256,public state variable `balanceof` is typed mapping,public state variable `allowance` is typed mapping,public state variable `buyprice` is typed uint256.\n ",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following contract descriptions. Some state variables are provided to help you develop.The following is the description of the contract logic: For the approve function, it has 2 arguments and the type of each argument is as follows: address, uint256.\n- the allowance from caller to the first argument will be updated to the second argument.\n\nFor the setLocked function, it has one argument and its type is bool.\n- For owner:\n  - the state variable locked will be updated to the first argument.\n\nFor the payable fallback function.\n- When buyprice is not 0, and after icosince, and the ether just received (i.e., msg.value) is greater than 0, and locked is 0, and before icotill, and the balance of the address of this contract is not smaller than (the ether just received (i.e., msg.value)/buyprice):\n  - the balance of caller will be updated to ((the ether just received (i.e., msg.value)/buyprice)+the balance of caller).\n  - the balance of the address of this contract will be updated to (the balance of the address of this contract-(the ether just received (i.e., msg.value)/buyprice)).\n\nFor the transferFrom function, it has 3 arguments and the type of each argument is as follows: address, address, uint256.\n- When (the balance of the second argument+the third argument) is greater than the balance of the second argument, and the third argument is not greater than the allowance from the first argument to caller, and the balance of the first argument is not smaller than the third argument, and locked is 0, and the third argument is greater than 0:\n  - the balance of the first argument will be updated to (the balance of the first argument-the third argument).\n  - the balance of the second argument will be updated to (the third argument+the balance of the second argument).\n  - the allowance from the first argument to caller will be updated to (the allowance from the first argument to caller-the third argument).\n\nFor the burn function, it has one argument and its type is uint256.\n- When the balance of caller is greater than the first argument, and for owner:\n  - the balance of caller will be updated to (the balance of caller-the first argument).\n  - the state variable totalsupply will be updated to (totalsupply-the first argument).\n\nFor the icoFinished function.\n- For owner, and after icotill:\n  - the balance of owner will be updated to (the balance of the address of this contract+the balance of owner). Afterthat, \n    - the balance of the address of this contract will be updated to 0.\n\nFor the setBuyPrice function, it has one argument and its type is uint256.\n- For owner:\n  - the state variable buyprice will be updated to the first argument.\n\nFor the transfer function, it has 2 arguments and the type of each argument is as follows: address, uint256.\n- When locked is 0, and (the balance of the first argument+the second argument) is greater than the balance of the first argument, and the balance of caller is not smaller than the second argument:\n  - the balance of caller will be updated to (the balance of caller-the second argument).\n  - the balance of the first argument will be updated to (the second argument+the balance of the first argument).\n\nFor the transferEthers function.\n- For owner:\n  - it transfers ether valued the balance of the address of this contract to owner.\n\nFor the transferOwnership function, it has one argument and its type is address.\n- For owner:\n  - the state variable owner will be updated to the first argument.\n\nFor the approveAndCall function, it has 3 arguments and the type of each argument is as follows: address, uint256, bytes.\n- the allowance from caller to the first argument will be updated to the second argument.\n- When 0 is not smaller than the third argument:\n  - it calls an external function receiveApproval of the first argument.\n- When 0 is smaller than the third argument:\n  - When 32 is not smaller than the third argument:\n    - it calls an external function receiveApproval of the first argument.\n  - When 32 is smaller than the third argument:\n    - When 64 is not smaller than the third argument:\n      - it calls an external function receiveApproval of the first argument.\n    - When 64 is smaller than the third argument:\n      - When 96 is not smaller than the third argument:\n        - it calls an external function receiveApproval of the first argument.\n      - When 96 is smaller than the third argument:\n        - When 128 is not smaller than the third argument:\n          - it calls an external function receiveApproval of the first argument.\n        - When 128 is smaller than the third argument, and 160 is not smaller than the third argument:\n          - it calls an external function receiveApproval of the first argument.\n\n.\n Here are some state variables with their corresponding types: public state variable `owner` is typed address,public state variable `standard` is typed string,public state variable `name` is typed string,public state variable `symbol` is typed string,public state variable `decimals` is typed uint8,public state variable `totalsupply` is typed uint256,public state variable `locked` is typed uint8,public state variable `icosince` is typed uint256,public state variable `icotill` is typed uint256,public state variable `balanceof` is typed mapping,public state variable `allowance` is typed mapping,public state variable `buyprice` is typed uint256.\n ",
	"status": "1",
	"time_cost": 42.41147780418396,
	"usage": {
		"completion_tokens": 952,
		"prompt_tokens": 1208,
		"total_tokens": 2160
	}
}