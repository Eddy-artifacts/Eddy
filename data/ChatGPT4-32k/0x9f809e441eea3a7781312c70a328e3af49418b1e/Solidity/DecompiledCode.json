{
	"address": "0x9f809e441eea3a7781312c70a328e3af49418b1e",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "The solidity code equivalent to the given decompiled EVM Bytecode can be written as follows:\n\n```solidity\npragma solidity ^0.5.0;\n\ncontract MyContract {\n    mapping (address => uint256) private _checkInvestments;\n    mapping (address => uint256) private _checkWithdrawals;\n    mapping (address => uint256) private _checkReferral;\n    uint256 private _minimum;\n    uint256 private _step;\n    address private _ownerWallet;\n    address private _owner;\n    address private _bountyManager;\n\n    event Invest(address indexed sender, uint256 value);\n    event Withdraw(address indexed sender, uint256 value);\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n    event Bounty(address indexed sender, uint256 value);\n\n    function checkReferral(address user) public view returns (uint256) { \n        return _checkReferral[user];\n    }\n\n    function withdraw() public { \n        // method implementation\n    }\n\n    function minimum() public view returns (uint256) { \n        return _minimum;\n    }\n\n    function transferOwnership(address newOwner, address newOwnerWallet) public { \n        require(msg.sender == _owner);\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n        _ownerWallet = newOwnerWallet;\n    }\n\n    function checkInvestments(address user) public view returns (uint256) { \n        return _checkInvestments[user];\n    }\n\n    function owner() public view returns (address) { \n        return _owner;\n    }\n\n    function ownerWallet() public view returns (address) { \n        return _ownerWallet;\n    }\n\n    function bounty() public { \n        // method implementation\n    }\n\n    function checkWithdrawals(address user) public view returns (uint256) { \n        return _checkWithdrawals[user];\n    }\n\n    function bountyManager() public view returns (address) { \n        return _bountyManager;\n    }\n\n    function checkBalance() public { \n        // method implementation\n    }\n\n    function updateReferral(address user, uint256 value) public { \n        require(msg.sender == _bountyManager);\n        _checkReferral[user] = _SafeAdd(value, _checkReferral[user]);\n    }\n\n    function step() public view returns (uint256) { \n        return _step;\n    }\n\n    function getBalance(address user) public { \n        // method implementation\n    }\n\n    function _SafeAdd(uint256 a, uint256 b) private pure returns (uint256) { \n        uint256 c = a + b;\n        require(c >= b);\n        return c;\n    }\n\n    function _calculate(uint256 a, uint256 b) private pure returns (uint256) { \n        // method implementation\n    }\n\n    function _checkBalance(uint256 a) private view returns (uint256) { \n        // method implementation\n    }\n\n    function() external payable { \n        // method implementation\n    }\n}\n```\n\nPlease note that the actual implementation of some methods are not provided in the decompiled code, so I've just added a comment in their place. You'll need to replace those comments with the actual implementation based on your contract's logic.",
				"role": "assistant"
			}
		}
	],
	"created": 1701470351,
	"id": "chatcmpl-8R6S7MDdiSTGSg1bun1XIbvD6Op4d",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.16 10:10 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _checkInvestments; // STORAGE[0x0]\nmapping (uint256 => [uint256]) owner_1; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _checkWithdrawals; // STORAGE[0x2]\nmapping (uint256 => [uint256]) _checkReferral; // STORAGE[0x3]\nuint256 _minimum; // STORAGE[0x4]\nuint256 _step; // STORAGE[0x5]\naddress _ownerWallet; // STORAGE[0x6] bytes 0 to 19\naddress _owner; // STORAGE[0x7] bytes 0 to 19\naddress _bountyManager; // STORAGE[0x8] bytes 0 to 19\n\n// Events\nInvest(address, uint256);\nWithdraw(address, uint256);\nOwnershipTransferred(address, address);\nBounty(address, uint256);\n\nfunction checkReferral(address varg0) public nonPayable { \n    return _checkReferral[varg0];\n}\n\nfunction withdraw() public nonPayable { \n    v0 = 0x39f();\n    return v0;\n}\n\nfunction minimum() public nonPayable { \n    return _minimum;\n}\n\nfunction transferOwnership(address varg0, address varg1) public nonPayable { \n    require(msg.sender == _owner);\n    require(varg0);\n    emit OwnershipTransferred(_owner, varg0);\n    _owner = varg0;\n    _ownerWallet = varg1;\n}\n\nfunction checkInvestments(address varg0) public nonPayable { \n    return _checkInvestments[varg0];\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction ownerWallet() public nonPayable { \n    return _ownerWallet;\n}\n\nfunction bounty() public nonPayable { \n    if (_checkReferral[msg.sender] >= _minimum) {\n        if (_checkReferral[msg.sender] < this.balance) {\n            _checkReferral[msg.sender] = 0;\n            v0 = msg.sender.call().value(_checkReferral[msg.sender]).gas(2300 * !_checkReferral[msg.sender]);\n            require(v0); // checks call status, propagates error data on error\n            emit Bounty(msg.sender, _checkReferral[msg.sender]);\n        }\n    }\n}\n\nfunction checkWithdrawals(address varg0) public nonPayable { \n    return _checkWithdrawals[varg0];\n}\n\nfunction bountyManager() public nonPayable { \n    return _bountyManager;\n}\n\nfunction checkBalance() public nonPayable { \n    v0 = 0x718(msg.sender);\n    return v0;\n}\n\nfunction updateReferral(address varg0, uint256 varg1) public nonPayable { \n    require(msg.sender == _bountyManager);\n    v0 = _SafeAdd(varg1, _checkReferral[varg0]);\n    _checkReferral[varg0] = v0;\n}\n\nfunction step() public nonPayable { \n    return _step;\n}\n\nfunction getBalance(address varg0) public nonPayable { \n    v0 = 0x718(varg0);\n    return v0;\n}\n\nfunction 0x39f() private { \n    require(0 < owner_1[msg.sender]);\n    v0 = 0x718(msg.sender);\n    if (v0 >= this.balance) {\n        v1 = v2 = 0;\n    } else {\n        if (v0 > 0) {\n            v3 = _SafeAdd(v0, _checkWithdrawals[msg.sender]);\n            _checkWithdrawals[msg.sender] = v3;\n            v4 = msg.sender.call().value(v0).gas(2300 * !v0);\n            require(v4); // checks call status, propagates error data on error\n            emit Withdraw(msg.sender, v0);\n        }\n        v1 = v5 = 1;\n    }\n    return v1;\n}\n\nfunction _SafeAdd(uint256 varg0, uint256 varg1) private { \n    v0 = varg0 + varg1;\n    assert(v0 >= varg1);\n    return v0;\n}\n\nfunction 0x4b7(uint256 varg0, uint256 varg1) private { \n    if (varg1) {\n        v0 = v1 = varg0 * varg1;\n        assert(varg1);\n        assert(v1 / varg1 == varg0);\n    } else {\n        v0 = v2 = 0;\n    }\n    return v0;\n}\n\nfunction 0x718(uint256 varg0) private { \n    v0 = address(varg0);\n    v1 = v2 = 0;\n    v3 = v4 = 1885;\n    v5 = v6 = 60;\n    assert(owner_1[v0] <= block.timestamp);\n    v7 = block.timestamp - owner_1[v0];\n    while (!v5) {\n        assert(v5);\n        v8 = address(varg0);\n        assert(_checkWithdrawals[v8] <= v1);\n        return v1 - _checkWithdrawals[v8];\n        v1 = v7 / v5;\n        goto {'0x7ab', '0x75d', '0x793'};\n        v9 = address(varg0);\n        v3 = v10 = 1939;\n        v5 = v11 = 100;\n        v7 = v12 = 0x4b7(_step, _checkInvestments[v9]);\n        v3 = v13 = 1963;\n        v5 = v14 = 1440;\n        v7 = 0x4b7(v1, v1);\n    }\n}\n\nfunction fallback() public payable { \n    require(msg.value >= _minimum);\n    if (_checkInvestments[msg.sender] > 0) {\n        v0 = 0x39f();\n        if (v0) {\n            _checkWithdrawals[msg.sender] = 0;\n        }\n    }\n    v1 = _SafeAdd(msg.value, _checkInvestments[msg.sender]);\n    _checkInvestments[msg.sender] = v1;\n    owner_1[msg.sender] = block.timestamp;\n    assert(100);\n    v2 = 0x4b7(50, msg.value / 100);\n    v3 = _ownerWallet.call().value(v2).gas(2300 * !v2);\n    require(v3); // checks call status, propagates error data on error\n    emit Invest(msg.sender, msg.value);\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0xc19f80e) {\n            checkReferral(address);\n        } else if (0x3ccfd60b == function_selector) {\n            withdraw();\n        } else if (0x52d6804d == function_selector) {\n            minimum();\n        } else if (0x6d435421 == function_selector) {\n            transferOwnership(address,address);\n        } else if (0x835c1154 == function_selector) {\n            checkInvestments(address);\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x9335dcb7 == function_selector) {\n            ownerWallet();\n        } else if (0x943dfef1 == function_selector) {\n            bounty();\n        } else if (0x9d9fcc72 == function_selector) {\n            checkWithdrawals(address);\n        } else if (0xb36b9ffd == function_selector) {\n            bountyManager();\n        } else if (0xc71daccb == function_selector) {\n            checkBalance();\n        } else if (0xd3cde1a5 == function_selector) {\n            updateReferral(address,uint256);\n        } else if (0xe25fe175 == function_selector) {\n            step();\n        } else if (0xf8b2cb4f == function_selector) {\n            getBalance(address);\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.16 10:10 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _checkInvestments; // STORAGE[0x0]\nmapping (uint256 => [uint256]) owner_1; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _checkWithdrawals; // STORAGE[0x2]\nmapping (uint256 => [uint256]) _checkReferral; // STORAGE[0x3]\nuint256 _minimum; // STORAGE[0x4]\nuint256 _step; // STORAGE[0x5]\naddress _ownerWallet; // STORAGE[0x6] bytes 0 to 19\naddress _owner; // STORAGE[0x7] bytes 0 to 19\naddress _bountyManager; // STORAGE[0x8] bytes 0 to 19\n\n// Events\nInvest(address, uint256);\nWithdraw(address, uint256);\nOwnershipTransferred(address, address);\nBounty(address, uint256);\n\nfunction checkReferral(address varg0) public nonPayable { \n    return _checkReferral[varg0];\n}\n\nfunction withdraw() public nonPayable { \n    v0 = 0x39f();\n    return v0;\n}\n\nfunction minimum() public nonPayable { \n    return _minimum;\n}\n\nfunction transferOwnership(address varg0, address varg1) public nonPayable { \n    require(msg.sender == _owner);\n    require(varg0);\n    emit OwnershipTransferred(_owner, varg0);\n    _owner = varg0;\n    _ownerWallet = varg1;\n}\n\nfunction checkInvestments(address varg0) public nonPayable { \n    return _checkInvestments[varg0];\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction ownerWallet() public nonPayable { \n    return _ownerWallet;\n}\n\nfunction bounty() public nonPayable { \n    if (_checkReferral[msg.sender] >= _minimum) {\n        if (_checkReferral[msg.sender] < this.balance) {\n            _checkReferral[msg.sender] = 0;\n            v0 = msg.sender.call().value(_checkReferral[msg.sender]).gas(2300 * !_checkReferral[msg.sender]);\n            require(v0); // checks call status, propagates error data on error\n            emit Bounty(msg.sender, _checkReferral[msg.sender]);\n        }\n    }\n}\n\nfunction checkWithdrawals(address varg0) public nonPayable { \n    return _checkWithdrawals[varg0];\n}\n\nfunction bountyManager() public nonPayable { \n    return _bountyManager;\n}\n\nfunction checkBalance() public nonPayable { \n    v0 = 0x718(msg.sender);\n    return v0;\n}\n\nfunction updateReferral(address varg0, uint256 varg1) public nonPayable { \n    require(msg.sender == _bountyManager);\n    v0 = _SafeAdd(varg1, _checkReferral[varg0]);\n    _checkReferral[varg0] = v0;\n}\n\nfunction step() public nonPayable { \n    return _step;\n}\n\nfunction getBalance(address varg0) public nonPayable { \n    v0 = 0x718(varg0);\n    return v0;\n}\n\nfunction 0x39f() private { \n    require(0 < owner_1[msg.sender]);\n    v0 = 0x718(msg.sender);\n    if (v0 >= this.balance) {\n        v1 = v2 = 0;\n    } else {\n        if (v0 > 0) {\n            v3 = _SafeAdd(v0, _checkWithdrawals[msg.sender]);\n            _checkWithdrawals[msg.sender] = v3;\n            v4 = msg.sender.call().value(v0).gas(2300 * !v0);\n            require(v4); // checks call status, propagates error data on error\n            emit Withdraw(msg.sender, v0);\n        }\n        v1 = v5 = 1;\n    }\n    return v1;\n}\n\nfunction _SafeAdd(uint256 varg0, uint256 varg1) private { \n    v0 = varg0 + varg1;\n    assert(v0 >= varg1);\n    return v0;\n}\n\nfunction 0x4b7(uint256 varg0, uint256 varg1) private { \n    if (varg1) {\n        v0 = v1 = varg0 * varg1;\n        assert(varg1);\n        assert(v1 / varg1 == varg0);\n    } else {\n        v0 = v2 = 0;\n    }\n    return v0;\n}\n\nfunction 0x718(uint256 varg0) private { \n    v0 = address(varg0);\n    v1 = v2 = 0;\n    v3 = v4 = 1885;\n    v5 = v6 = 60;\n    assert(owner_1[v0] <= block.timestamp);\n    v7 = block.timestamp - owner_1[v0];\n    while (!v5) {\n        assert(v5);\n        v8 = address(varg0);\n        assert(_checkWithdrawals[v8] <= v1);\n        return v1 - _checkWithdrawals[v8];\n        v1 = v7 / v5;\n        goto {'0x7ab', '0x75d', '0x793'};\n        v9 = address(varg0);\n        v3 = v10 = 1939;\n        v5 = v11 = 100;\n        v7 = v12 = 0x4b7(_step, _checkInvestments[v9]);\n        v3 = v13 = 1963;\n        v5 = v14 = 1440;\n        v7 = 0x4b7(v1, v1);\n    }\n}\n\nfunction fallback() public payable { \n    require(msg.value >= _minimum);\n    if (_checkInvestments[msg.sender] > 0) {\n        v0 = 0x39f();\n        if (v0) {\n            _checkWithdrawals[msg.sender] = 0;\n        }\n    }\n    v1 = _SafeAdd(msg.value, _checkInvestments[msg.sender]);\n    _checkInvestments[msg.sender] = v1;\n    owner_1[msg.sender] = block.timestamp;\n    assert(100);\n    v2 = 0x4b7(50, msg.value / 100);\n    v3 = _ownerWallet.call().value(v2).gas(2300 * !v2);\n    require(v3); // checks call status, propagates error data on error\n    emit Invest(msg.sender, msg.value);\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0xc19f80e) {\n            checkReferral(address);\n        } else if (0x3ccfd60b == function_selector) {\n            withdraw();\n        } else if (0x52d6804d == function_selector) {\n            minimum();\n        } else if (0x6d435421 == function_selector) {\n            transferOwnership(address,address);\n        } else if (0x835c1154 == function_selector) {\n            checkInvestments(address);\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x9335dcb7 == function_selector) {\n            ownerWallet();\n        } else if (0x943dfef1 == function_selector) {\n            bounty();\n        } else if (0x9d9fcc72 == function_selector) {\n            checkWithdrawals(address);\n        } else if (0xb36b9ffd == function_selector) {\n            bountyManager();\n        } else if (0xc71daccb == function_selector) {\n            checkBalance();\n        } else if (0xd3cde1a5 == function_selector) {\n            updateReferral(address,uint256);\n        } else if (0xe25fe175 == function_selector) {\n            step();\n        } else if (0xf8b2cb4f == function_selector) {\n            getBalance(address);\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.16 10:10 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _checkInvestments; // STORAGE[0x0]\nmapping (uint256 => [uint256]) owner_1; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _checkWithdrawals; // STORAGE[0x2]\nmapping (uint256 => [uint256]) _checkReferral; // STORAGE[0x3]\nuint256 _minimum; // STORAGE[0x4]\nuint256 _step; // STORAGE[0x5]\naddress _ownerWallet; // STORAGE[0x6] bytes 0 to 19\naddress _owner; // STORAGE[0x7] bytes 0 to 19\naddress _bountyManager; // STORAGE[0x8] bytes 0 to 19\n\n// Events\nInvest(address, uint256);\nWithdraw(address, uint256);\nOwnershipTransferred(address, address);\nBounty(address, uint256);\n\nfunction checkReferral(address varg0) public nonPayable { \n    return _checkReferral[varg0];\n}\n\nfunction withdraw() public nonPayable { \n    v0 = 0x39f();\n    return v0;\n}\n\nfunction minimum() public nonPayable { \n    return _minimum;\n}\n\nfunction transferOwnership(address varg0, address varg1) public nonPayable { \n    require(msg.sender == _owner);\n    require(varg0);\n    emit OwnershipTransferred(_owner, varg0);\n    _owner = varg0;\n    _ownerWallet = varg1;\n}\n\nfunction checkInvestments(address varg0) public nonPayable { \n    return _checkInvestments[varg0];\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction ownerWallet() public nonPayable { \n    return _ownerWallet;\n}\n\nfunction bounty() public nonPayable { \n    if (_checkReferral[msg.sender] >= _minimum) {\n        if (_checkReferral[msg.sender] < this.balance) {\n            _checkReferral[msg.sender] = 0;\n            v0 = msg.sender.call().value(_checkReferral[msg.sender]).gas(2300 * !_checkReferral[msg.sender]);\n            require(v0); // checks call status, propagates error data on error\n            emit Bounty(msg.sender, _checkReferral[msg.sender]);\n        }\n    }\n}\n\nfunction checkWithdrawals(address varg0) public nonPayable { \n    return _checkWithdrawals[varg0];\n}\n\nfunction bountyManager() public nonPayable { \n    return _bountyManager;\n}\n\nfunction checkBalance() public nonPayable { \n    v0 = 0x718(msg.sender);\n    return v0;\n}\n\nfunction updateReferral(address varg0, uint256 varg1) public nonPayable { \n    require(msg.sender == _bountyManager);\n    v0 = _SafeAdd(varg1, _checkReferral[varg0]);\n    _checkReferral[varg0] = v0;\n}\n\nfunction step() public nonPayable { \n    return _step;\n}\n\nfunction getBalance(address varg0) public nonPayable { \n    v0 = 0x718(varg0);\n    return v0;\n}\n\nfunction 0x39f() private { \n    require(0 < owner_1[msg.sender]);\n    v0 = 0x718(msg.sender);\n    if (v0 >= this.balance) {\n        v1 = v2 = 0;\n    } else {\n        if (v0 > 0) {\n            v3 = _SafeAdd(v0, _checkWithdrawals[msg.sender]);\n            _checkWithdrawals[msg.sender] = v3;\n            v4 = msg.sender.call().value(v0).gas(2300 * !v0);\n            require(v4); // checks call status, propagates error data on error\n            emit Withdraw(msg.sender, v0);\n        }\n        v1 = v5 = 1;\n    }\n    return v1;\n}\n\nfunction _SafeAdd(uint256 varg0, uint256 varg1) private { \n    v0 = varg0 + varg1;\n    assert(v0 >= varg1);\n    return v0;\n}\n\nfunction 0x4b7(uint256 varg0, uint256 varg1) private { \n    if (varg1) {\n        v0 = v1 = varg0 * varg1;\n        assert(varg1);\n        assert(v1 / varg1 == varg0);\n    } else {\n        v0 = v2 = 0;\n    }\n    return v0;\n}\n\nfunction 0x718(uint256 varg0) private { \n    v0 = address(varg0);\n    v1 = v2 = 0;\n    v3 = v4 = 1885;\n    v5 = v6 = 60;\n    assert(owner_1[v0] <= block.timestamp);\n    v7 = block.timestamp - owner_1[v0];\n    while (!v5) {\n        assert(v5);\n        v8 = address(varg0);\n        assert(_checkWithdrawals[v8] <= v1);\n        return v1 - _checkWithdrawals[v8];\n        v1 = v7 / v5;\n        goto {'0x7ab', '0x75d', '0x793'};\n        v9 = address(varg0);\n        v3 = v10 = 1939;\n        v5 = v11 = 100;\n        v7 = v12 = 0x4b7(_step, _checkInvestments[v9]);\n        v3 = v13 = 1963;\n        v5 = v14 = 1440;\n        v7 = 0x4b7(v1, v1);\n    }\n}\n\nfunction fallback() public payable { \n    require(msg.value >= _minimum);\n    if (_checkInvestments[msg.sender] > 0) {\n        v0 = 0x39f();\n        if (v0) {\n            _checkWithdrawals[msg.sender] = 0;\n        }\n    }\n    v1 = _SafeAdd(msg.value, _checkInvestments[msg.sender]);\n    _checkInvestments[msg.sender] = v1;\n    owner_1[msg.sender] = block.timestamp;\n    assert(100);\n    v2 = 0x4b7(50, msg.value / 100);\n    v3 = _ownerWallet.call().value(v2).gas(2300 * !v2);\n    require(v3); // checks call status, propagates error data on error\n    emit Invest(msg.sender, msg.value);\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0xc19f80e) {\n            checkReferral(address);\n        } else if (0x3ccfd60b == function_selector) {\n            withdraw();\n        } else if (0x52d6804d == function_selector) {\n            minimum();\n        } else if (0x6d435421 == function_selector) {\n            transferOwnership(address,address);\n        } else if (0x835c1154 == function_selector) {\n            checkInvestments(address);\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x9335dcb7 == function_selector) {\n            ownerWallet();\n        } else if (0x943dfef1 == function_selector) {\n            bounty();\n        } else if (0x9d9fcc72 == function_selector) {\n            checkWithdrawals(address);\n        } else if (0xb36b9ffd == function_selector) {\n            bountyManager();\n        } else if (0xc71daccb == function_selector) {\n            checkBalance();\n        } else if (0xd3cde1a5 == function_selector) {\n            updateReferral(address,uint256);\n        } else if (0xe25fe175 == function_selector) {\n            step();\n        } else if (0xf8b2cb4f == function_selector) {\n            getBalance(address);\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 35.82201886177063,
	"usage": {
		"completion_tokens": 672,
		"prompt_tokens": 1845,
		"total_tokens": 2517
	}
}