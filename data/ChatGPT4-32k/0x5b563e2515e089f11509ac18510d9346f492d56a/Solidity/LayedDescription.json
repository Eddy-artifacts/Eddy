{
	"address": "0x5b563e2515e089f11509ac18510d9346f492d56a",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is the Solidity smart contract code based on your description:\n\n```Solidity\npragma solidity >=0.4.22 <0.9.0;\n\ncontract Crowdfunding {\n    address public beneficiary;\n    uint public fundinggoal;\n    uint public amountraised;\n    uint public deadline;\n    uint public price;\n    address public tokenreward;\n    mapping(address => uint256) public balanceof;\n    bool private paused;\n    bool private paused1;\n\n    constructor() payable {\n        beneficiary = msg.sender;\n        fundinggoal = 10000;\n        deadline = block.timestamp + 1 weeks;\n        price = 1 ether;\n        paused = false;\n        paused1 = false;\n    }\n\n    fallback() external payable {\n        require(!paused, \"Contract is paused\");\n        \n        uint amount = msg.value;\n        balanceof[msg.sender] += amount;\n        amountraised += amount;\n        \n        if(price != 0) {\n            TokenReward(tokenreward).transfer(msg.sender, (amount * 0xde0b6b3a7640000) / price);\n        }\n    }\n\n    function checkGoalReached() public {\n        require(block.timestamp > deadline, \"Deadline not reached\");\n\n        paused = true;\n\n        if (amountraised >= fundinggoal) {\n            paused1 = true;\n        }\n    }\n\n    function safeWithdrawal() public {\n        require(block.timestamp > deadline, \"Deadline not reached\");\n\n        if (!paused1) {\n            uint amount = balanceof[msg.sender];\n            balanceof[msg.sender] = 0;\n            if (amount > 0) {\n                payable(msg.sender).transfer(amount);\n            }\n        }\n\n        if (msg.sender == beneficiary && paused1) {\n            payable(beneficiary).transfer(amountraised);\n            paused1 = false;\n        }\n    }\n}\n\ninterface TokenReward {\n    function transfer(address _to, uint256 _value) external;\n}\n```\n\nPlease note that the contract `TokenReward` is not defined here. I've assumed it's an external contract with a `transfer` method that accepts an address and a value. Also, I've used `fallback` function as per Solidity ^0.6.0 syntax. If you are using an older version, you might need to use `function () external payable` instead.",
				"role": "assistant"
			}
		}
	],
	"created": 1701721215,
	"id": "chatcmpl-8S9iJ9GXcLGwAqTzSeF02bwiv10Ln",
	"input_format": "LayedDescription",
	"ir": "For the payable constructor function.\n- the state variable s_7_30_32 will be updated to 0.\n\nFor the payable fallback function.\n- When paused is 0:\n  - the balance of caller will be updated to (the ether just received (i.e., msg.value)+the balance of caller).\n  - the state variable amountraised will be updated to (the ether just received (i.e., msg.value)+amountraised).\n  - When price is not 0:\n    - it calls an external function transfer of the external contract tokenreward with the following argument list: caller, and ((the ether just received (i.e., msg.value)*0xde0b6b3a7640000)/price).\n\nFor the checkGoalReached function.\n- After deadline:\n  - the state variable paused will be updated to 1.\n  - When amountraised is not smaller than fundinggoal:\n    - the state variable paused1 will be updated to 1.\n\nFor the safeWithdrawal function.\n- After deadline:\n  - When paused1 is 0:\n    - the balance of caller will be updated to 0.\n    - When the balance of caller is greater than 0:\n      - it transfers ether valued the balance of caller to caller. Afterthat, \n        - the balance of caller will be updated to the balance of caller.\n  - For beneficiary, and paused1 is not 0:\n    - it transfers ether valued amountraised to beneficiary.\n    - the state variable paused1 will be updated to 0.\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following contract descriptions. Some state variables are provided to help you develop.",
			"role": "system"
		},
		{
			"content": "The following is the description of the contract logic: For the payable constructor function.\n- the state variable s_7_30_32 will be updated to 0.\n\nFor the payable fallback function.\n- When paused is 0:\n  - the balance of caller will be updated to (the ether just received (i.e., msg.value)+the balance of caller).\n  - the state variable amountraised will be updated to (the ether just received (i.e., msg.value)+amountraised).\n  - When price is not 0:\n    - it calls an external function transfer of the external contract tokenreward with the following argument list: caller, and ((the ether just received (i.e., msg.value)*0xde0b6b3a7640000)/price).\n\nFor the checkGoalReached function.\n- After deadline:\n  - the state variable paused will be updated to 1.\n  - When amountraised is not smaller than fundinggoal:\n    - the state variable paused1 will be updated to 1.\n\nFor the safeWithdrawal function.\n- After deadline:\n  - When paused1 is 0:\n    - the balance of caller will be updated to 0.\n    - When the balance of caller is greater than 0:\n      - it transfers ether valued the balance of caller to caller. Afterthat, \n        - the balance of caller will be updated to the balance of caller.\n  - For beneficiary, and paused1 is not 0:\n    - it transfers ether valued amountraised to beneficiary.\n    - the state variable paused1 will be updated to 0.\n\n.\n Here are some state variables with their corresponding types: public state variable `beneficiary` is typed address,public state variable `fundinggoal` is typed uint256,public state variable `amountraised` is typed uint256,public state variable `deadline` is typed uint256,public state variable `price` is typed uint256,public state variable `tokenreward` is typed address,public state variable `balanceof` is typed mapping,private state variable `paused` is typed bool,private state variable `paused1` is typed bool.\n ",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following contract descriptions. Some state variables are provided to help you develop.The following is the description of the contract logic: For the payable constructor function.\n- the state variable s_7_30_32 will be updated to 0.\n\nFor the payable fallback function.\n- When paused is 0:\n  - the balance of caller will be updated to (the ether just received (i.e., msg.value)+the balance of caller).\n  - the state variable amountraised will be updated to (the ether just received (i.e., msg.value)+amountraised).\n  - When price is not 0:\n    - it calls an external function transfer of the external contract tokenreward with the following argument list: caller, and ((the ether just received (i.e., msg.value)*0xde0b6b3a7640000)/price).\n\nFor the checkGoalReached function.\n- After deadline:\n  - the state variable paused will be updated to 1.\n  - When amountraised is not smaller than fundinggoal:\n    - the state variable paused1 will be updated to 1.\n\nFor the safeWithdrawal function.\n- After deadline:\n  - When paused1 is 0:\n    - the balance of caller will be updated to 0.\n    - When the balance of caller is greater than 0:\n      - it transfers ether valued the balance of caller to caller. Afterthat, \n        - the balance of caller will be updated to the balance of caller.\n  - For beneficiary, and paused1 is not 0:\n    - it transfers ether valued amountraised to beneficiary.\n    - the state variable paused1 will be updated to 0.\n\n.\n Here are some state variables with their corresponding types: public state variable `beneficiary` is typed address,public state variable `fundinggoal` is typed uint256,public state variable `amountraised` is typed uint256,public state variable `deadline` is typed uint256,public state variable `price` is typed uint256,public state variable `tokenreward` is typed address,public state variable `balanceof` is typed mapping,private state variable `paused` is typed bool,private state variable `paused1` is typed bool.\n ",
	"status": "1",
	"time_cost": 28.68978500366211,
	"usage": {
		"completion_tokens": 473,
		"prompt_tokens": 493,
		"total_tokens": 966
	}
}