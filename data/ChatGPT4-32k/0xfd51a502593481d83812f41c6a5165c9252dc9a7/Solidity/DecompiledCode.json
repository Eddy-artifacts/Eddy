{
	"address": "0xfd51a502593481d83812f41c6a5165c9252dc9a7",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here's the equivalent Solidity code for the decompiled EVM Bytecode provided:\n\n```solidity\npragma solidity ^0.8.0;\n\ncontract CoinContract {\n\n    mapping (address => uint256) private _balances;\n    mapping (address => mapping (address => uint256)) private _allowances;\n    uint256 private _totalSupply;\n    address private _owner;\n\n    event Transfer(address indexed sender, address indexed recipient, uint256 amount);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Burn(address indexed from, uint256 value);\n\n    constructor(uint256 totalSupply_) {\n        _totalSupply = totalSupply_;\n        _balances[msg.sender] = _totalSupply;\n        _owner = msg.sender;\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address account) public view returns (uint256) {\n        return _balances[account];\n    }\n\n    function transfer(address recipient, uint256 amount) public returns (bool) {\n        _transfer(msg.sender, recipient, amount);\n        return true;\n    }\n\n    function approve(address spender, uint256 amount) public returns (bool) {\n        _approve(msg.sender, spender, amount);\n        return true;\n    }\n\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, msg.sender, _allowances[sender][msg.sender] - amount);\n        return true;\n    }\n\n    function burn(uint256 amount) public returns (bool success) {\n        _burn(msg.sender, amount);\n        return true;\n    }\n\n    function _transfer(address sender, address recipient, uint256 amount) internal {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _balances[sender] = _balances[sender] - amount;\n        _balances[recipient] = _balances[recipient] + amount;\n        emit Transfer(sender, recipient, amount);\n    }\n\n    function _approve(address owner, address spender, uint256 amount) internal {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    function _burn(address account, uint256 amount) internal {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _balances[account] = _balances[account] - amount;\n        _totalSupply = _totalSupply - amount;\n        emit Burn(account, amount);\n    }\n}\n```\n\nPlease note that the above Solidity code is a simple implementation of an ERC20 token with a burn feature. It does not include all the features in the original EVM bytecode such as masternode functionality, token parking, mining rewards adjustment, etc.\n\nThe original bytecode seems to be for a complex coin or token with additional functionality beyond the standard ERC20 functionality. To fully replicate this in Solidity would require a very extensive contract with possibly multiple contract files.",
				"role": "assistant"
			}
		}
	],
	"created": 1701470641,
	"id": "chatcmpl-8R6WnpgezWFIbEhOIzSP7RgbPJefd",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.09.13 17:40 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _getTotalSupply; // STORAGE[0x3]\nuint256 stor_4; // STORAGE[0x4]\nuint256 _getCurrentMiningReward; // STORAGE[0x6]\nuint256 _getRemainingPublicMineSupply; // STORAGE[0x7]\nuint256 _getRemainingMasternodeSupply; // STORAGE[0x8]\nuint256 stor_9; // STORAGE[0x9]\nuint256 stor_a; // STORAGE[0xa]\nuint256 _getCurrentMasternodeNumerator; // STORAGE[0xb]\nuint256 _getCurrentMasternodeDenominator; // STORAGE[0xc]\nuint256 _getStaticFinney; // STORAGE[0xd]\nuint256 _getMasternodeRequiredAmount; // STORAGE[0xe]\nuint256 _maxAmountForMasternode; // STORAGE[0xf]\nuint256 stor_10; // STORAGE[0x10]\nuint256 stor_13; // STORAGE[0x13]\nmapping (uint256 => [uint256]) _getCurrentUnlockedAmount; // STORAGE[0x14]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x15]\nmapping (uint256 => [uint256]) _blockHasBeenMined; // STORAGE[0x16]\nmapping (uint256 => [uint256]) _masternodeCheck; // STORAGE[0x17]\nmapping (uint256 => [uint256]) _registeredAtBlock; // STORAGE[0x18]\nmapping (uint256 => [uint256]) _lastTimeRewarded; // STORAGE[0x19]\nmapping (uint256 => [uint256]) _addressHasParkedToken; // STORAGE[0x1a]\nmapping (uint256 => [uint256]) _getCurrentLockedAmount; // STORAGE[0x1b]\nmapping (uint256 => [uint256]) _getBlacklistblockForUser; // STORAGE[0x1c]\naddress _adjustBlocksBetweenReward; // STORAGE[0x11] bytes 0 to 19\nuint160 stor_12_0_19; // STORAGE[0x12] bytes 0 to 19\n\n// Events\nApproval(address, address, uint256);\nBurn(address, uint256);\nTransfer(address, address, uint256);\n\nfunction 0x1652() private { \n    assert(stor_4 <= block.number);\n    return block.number - stor_4;\n}\n\nfunction 0x1728(uint256 varg0) private { \n    v0 = _SafeMul(80, varg0);\n    assert(100);\n    return v0 / 100;\n}\n\nfunction 0x173f(uint256 varg0) private { \n    v0 = _SafeMul(20, varg0);\n    assert(100);\n    return v0 / 100;\n}\n\nfunction 0x1761(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    require(address(varg1));\n    v0 = address(varg2);\n    require(varg0 <= _getCurrentUnlockedAmount[v0]);\n    v1 = address(varg1);\n    require(_getCurrentUnlockedAmount[v1] + varg0 >= _getCurrentUnlockedAmount[v1]);\n    v2 = address(varg1);\n    v3 = address(varg2);\n    _getCurrentUnlockedAmount[v3] = _getCurrentUnlockedAmount[v3] - varg0;\n    _getCurrentUnlockedAmount[v2] += varg0;\n    emit Transfer(v3, v2, varg0);\n    v4 = address(varg1);\n    v5 = address(varg2);\n    assert(_getCurrentUnlockedAmount[v2] + _getCurrentUnlockedAmount[v3] == _getCurrentUnlockedAmount[v5] + _getCurrentUnlockedAmount[v4]);\n    return ;\n}\n\nfunction _SafeMul(uint256 varg0, uint256 varg1) private { \n    if (varg1) {\n        v0 = varg0 * varg1;\n        assert(varg1);\n        assert(v0 / varg1 == varg0);\n        return v0;\n    } else {\n        return 0;\n    }\n}\n\nfunction fallback() public payable { \n    revert();\n}\n\nfunction claimMasternodeReward() public nonPayable { \n    require(0xff & _masternodeCheck[msg.sender]);\n    require(_getRemainingMasternodeSupply > 0);\n    require(0xff & _addressHasParkedToken[msg.sender]);\n    v0 = 0xb9c(msg.sender);\n    v1 = 0x1728(v0);\n    require(this.code.size);\n    v2 = this.transfer(msg.sender, v1).gas(msg.gas);\n    require(v2); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    v3 = 0x173f(v0);\n    require(this.code.size);\n    v4 = this.transfer(stor_12_0_19, v3).gas(msg.gas);\n    require(v4); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    v5 = 0x1652();\n    _lastTimeRewarded[msg.sender] = v5;\n    assert(v0 <= _getRemainingMasternodeSupply);\n    _getRemainingMasternodeSupply = _getRemainingMasternodeSupply - v0;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    _allowance[msg.sender] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction getCurrentMiningReward() public nonPayable { \n    return _getCurrentMiningReward;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(msg.data.length - 4 >= 96);\n    require(varg2 <= _allowance[msg.sender]);\n    _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    0x1761(varg2, varg1, varg0);\n    return 1;\n}\n\nfunction getCurrentLockedAmount() public nonPayable { \n    return _getCurrentLockedAmount[msg.sender];\n}\n\nfunction checkForMasterNode(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return 0xff & _masternodeCheck[varg0];\n}\n\nfunction getBlacklistblockForUser() public nonPayable { \n    return _getBlacklistblockForUser[msg.sender];\n}\n\nfunction interestToClaim(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    v0 = 0x1652();\n    assert(_lastTimeRewarded[varg0] <= v0);\n    assert(stor_10);\n    v1 = _SafeMul(_getCurrentLockedAmount[varg0], _getCurrentMasternodeNumerator);\n    assert(_getCurrentMasternodeDenominator);\n    v2 = _SafeMul((v0 - _lastTimeRewarded[varg0]) / stor_10, v1 / _getCurrentMasternodeDenominator);\n    return v2;\n}\n\nfunction burn(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(varg0 <= _getCurrentUnlockedAmount[msg.sender]);\n    _getCurrentUnlockedAmount[msg.sender] = _getCurrentUnlockedAmount[msg.sender] - varg0;\n    _getTotalSupply = _getTotalSupply - varg0;\n    emit Burn(msg.sender, varg0);\n    return 1;\n}\n\nfunction adjustMiningRewards() public nonPayable { \n    v0 = v1 = _getRemainingPublicMineSupply < 0x90c1b1025e16710f000000;\n    if (v1) {\n        v0 = _getRemainingPublicMineSupply > 0x6c9144c1c690d4cb400000;\n    }\n    if (v0) {\n        _getCurrentMiningReward = 0x15af1d78b58c40000;\n    }\n    v2 = v3 = _getRemainingPublicMineSupply < 0x6c9144c1c690d4cb400000;\n    if (v3) {\n        v2 = _getRemainingPublicMineSupply > 0x4d8c55aefb8c05b5c00000;\n    }\n    if (v2) {\n        _getCurrentMiningReward = 0xad78ebc5ac620000;\n    }\n    v4 = v5 = _getRemainingPublicMineSupply < 0x4d8c55aefb8c05b5c00000;\n    if (v5) {\n        v4 = _getRemainingPublicMineSupply > 0x33b2e3c9fd0803ce800000;\n    }\n    if (v4) {\n        _getCurrentMiningReward = 0x56bc75e2d6310000;\n    }\n    v6 = v7 = _getRemainingPublicMineSupply < 0x33b2e3c9fd0803ce800000;\n    if (v7) {\n        v6 = _getRemainingPublicMineSupply > 0x1f04ef12cb04cf15800000;\n    }\n    if (v6) {\n        _getCurrentMiningReward = 0x2b5e3af16b188000;\n    }\n    v8 = v9 = _getRemainingPublicMineSupply < 0x1f04ef12cb04cf15800000;\n    if (v9) {\n        v8 = _getRemainingPublicMineSupply > 0xf8277896582678ac00000;\n    }\n    if (v8) {\n        _getCurrentMiningReward = 0x15af1d78b58c4000;\n    }\n    v10 = v11 = _getRemainingPublicMineSupply < 0xf8277896582678ac00000;\n    if (v11) {\n        v10 = _getRemainingPublicMineSupply > 0xa56fa5b99019a5c800000;\n    }\n    if (v10) {\n        _getCurrentMiningReward = 0xb1a2bc2ec500000;\n    }\n    v12 = v13 = _getRemainingPublicMineSupply < 0xa56fa5b99019a5c800000;\n    if (v13) {\n        v12 = _getRemainingPublicMineSupply > 0x52b7d2dcc80cd2e400000;\n    }\n    if (v12) {\n        _getCurrentMiningReward = 0x58d15e176280000;\n    }\n    if (_getRemainingPublicMineSupply < 0x52b7d2dcc80cd2e400000) {\n        _getCurrentMiningReward = 0x2c68af0bb140000;\n    }\n}\n\nfunction getCurrentMasterNodeReward() public nonPayable { \n    assert(_getCurrentMasternodeDenominator);\n    v0 = _SafeMul(100, _getCurrentMasternodeNumerator / _getCurrentMasternodeDenominator);\n    return v0;\n}\n\nfunction getRemainingPublicMineSupply() public nonPayable { \n    return _getRemainingPublicMineSupply;\n}\n\nfunction getMasternodeRequiredAmount() public nonPayable { \n    return _getMasternodeRequiredAmount;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return _getCurrentUnlockedAmount[varg0];\n}\n\nfunction burnFrom(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    require(varg1 <= _getCurrentUnlockedAmount[varg0]);\n    require(varg1 <= _allowance[msg.sender]);\n    _getCurrentUnlockedAmount[varg0] = _getCurrentUnlockedAmount[varg0] - varg1;\n    _allowance[msg.sender] = _allowance[msg.sender] - varg1;\n    _getTotalSupply = _getTotalSupply - varg1;\n    emit Burn(varg0, varg1);\n    return 1;\n}\n\nfunction getStaticFinney() public nonPayable { \n    return _getStaticFinney;\n}\n\nfunction registeredAtBlock(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return _registeredAtBlock[varg0];\n}\n\nfunction maxAmountForMasternode() public nonPayable { \n    return _maxAmountForMasternode;\n}\n\nfunction getCurrentMasternodeDenominator() public nonPayable { \n    return _getCurrentMasternodeDenominator;\n}\n\nfunction unlockAmountFromMasterNode() public nonPayable { \n    require(0xff & _masternodeCheck[msg.sender]);\n    _addressHasParkedToken[msg.sender] = ~0xff & _addressHasParkedToken[msg.sender];\n    _getCurrentLockedAmount[msg.sender] = 0;\n    return 1;\n}\n\nfunction publicMine() public payable { \n    require(_getRemainingPublicMineSupply > _getCurrentMiningReward);\n    v0 = 0x1652();\n    require(v0 > _getBlacklistblockForUser[msg.sender]);\n    v1 = 0x1652();\n    require(!(0xff & _blockHasBeenMined[v1]));\n    _getCurrentMiningReward = _getCurrentMiningReward;\n    v2 = 0x173f(_getCurrentMiningReward);\n    stor_9 = v2;\n    v3 = 0x1728(_getCurrentMiningReward);\n    stor_a = v3;\n    require(this.code.size);\n    v4 = this.transfer(msg.sender, v3).gas(msg.gas);\n    require(v4); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    require(this.code.size);\n    v5 = this.transfer(stor_12_0_19, stor_9).gas(msg.gas);\n    require(v5); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    assert(_getCurrentMiningReward <= _getRemainingPublicMineSupply);\n    _getRemainingPublicMineSupply = _getRemainingPublicMineSupply - _getCurrentMiningReward;\n    v6 = 0x1652();\n    _blockHasBeenMined[v6] = 0x1 | ~0xff & _blockHasBeenMined[v6];\n    v7 = 0x1652();\n    assert(stor_13 + v7 >= v7);\n    _getBlacklistblockForUser[msg.sender] = stor_13 + v7;\n}\n\nfunction adjustMasternodeRewards() public nonPayable { \n    v0 = v1 = _getRemainingMasternodeSupply < 0xb4f21d42f59c0d52c00000;\n    if (v1) {\n        v0 = _getRemainingMasternodeSupply > 0xaa9b22e75c9a72f6400000;\n    }\n    if (v0) {\n        _getCurrentMasternodeNumerator = 5410;\n        _getCurrentMasternodeDenominator = 0x7a120;\n    }\n    v2 = v3 = _getRemainingMasternodeSupply < 0xaa9b22e75c9a72f6400000;\n    if (v3) {\n        v2 = _getRemainingMasternodeSupply > 0x9b18ab5df7180b6b800000;\n    }\n    if (v2) {\n        _getCurrentMasternodeNumerator = 469;\n        _getCurrentMasternodeDenominator = 50000;\n    }\n    v4 = v5 = _getRemainingMasternodeSupply < 0x9b18ab5df7180b6b800000;\n    if (v5) {\n        v4 = _getRemainingMasternodeSupply > 0x866ab6a6c514d6b2800000;\n    }\n    if (v4) {\n        _getCurrentMasternodeNumerator = 783;\n        _getCurrentMasternodeDenominator = 0x186a0;\n    }\n    v6 = v7 = _getRemainingMasternodeSupply < 0x866ab6a6c514d6b2800000;\n    if (v7) {\n        v6 = _getRemainingMasternodeSupply > 0x6c9144c1c690d4cb400000;\n    }\n    if (v6) {\n        _getCurrentMasternodeNumerator = 307;\n        _getCurrentMasternodeDenominator = 50000;\n    }\n    v8 = v9 = _getRemainingMasternodeSupply < 0x6c9144c1c690d4cb400000;\n    if (v9) {\n        v8 = _getRemainingMasternodeSupply > 0x4d8c55aefb8c05b5c00000;\n    }\n    if (v8) {\n        _getCurrentMasternodeNumerator = 43;\n        _getCurrentMasternodeDenominator = 10000;\n    }\n    v10 = v11 = _getRemainingMasternodeSupply < 0x4d8c55aefb8c05b5c00000;\n    if (v11) {\n        v10 = _getRemainingMasternodeSupply > 0x295be96e64066972000000;\n    }\n    if (v10) {\n        _getCurrentMasternodeNumerator = 269;\n        _getCurrentMasternodeDenominator = 0x186a0;\n    }\n    if (_getRemainingMasternodeSupply < 0x295be96e64066972000000) {\n        _getCurrentMasternodeNumerator = 183;\n        _getCurrentMasternodeDenominator = 0x186a0;\n        goto 0x2600x522;\n    }\n}\n\nfunction lockedAmount(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return _getCurrentLockedAmount[varg0];\n}\n\nfunction masternodeCheck(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return 0xff & _masternodeCheck[varg0];\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    0x1761(varg1, varg0, msg.sender);\n    return 1;\n}\n\nfunction getCurrentMasternodeNumerator() public nonPayable { \n    return _getCurrentMasternodeNumerator;\n}\n\nfunction addressHasParkedToken(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return 0xff & _addressHasParkedToken[varg0];\n}\n\nfunction blacklistedTillBlock(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return _getBlacklistblockForUser[varg0];\n}\n\nfunction registerMasternode() public nonPayable { \n    require(!(0xff & _masternodeCheck[msg.sender]));\n    require(_getCurrentUnlockedAmount[msg.sender] > _getMasternodeRequiredAmount);\n    require(!(0xff & _masternodeCheck[msg.sender]));\n    v0 = 0x1652();\n    _masternodeCheck[msg.sender] = 0x1 | ~0xff & _masternodeCheck[msg.sender];\n    _registeredAtBlock[msg.sender] = v0;\n    _registeredAtBlock[msg.sender] = v0;\n}\n\nfunction blockHasBeenMined(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return 0xff & _blockHasBeenMined[varg0];\n}\n\nfunction getTotalSupply() public nonPayable { \n    return _getTotalSupply;\n}\n\nfunction getCurrentUnlockedAmount() public nonPayable { \n    assert(_getCurrentLockedAmount[msg.sender] <= _getCurrentUnlockedAmount[msg.sender]);\n    return _getCurrentUnlockedAmount[msg.sender] - _getCurrentLockedAmount[msg.sender];\n}\n\nfunction approveAndCall(address varg0, uint256 varg1, bytes varg2) public nonPayable { \n    require(msg.data.length - 4 >= 96);\n    require(varg2 <= 0x100000000);\n    require(4 + varg2 + 32 <= 4 + (msg.data.length - 4));\n    require(!(((?).length > 0x100000000) | (36 + varg2 + (?).length > 4 + (msg.data.length - 4))));\n    v0 = new bytes[]((?).length);\n    CALLDATACOPY(v0.data, 36 + varg2, (?).length);\n    MEM[v0.data + (?).length] = 0;\n    v1 = v2 = 0;\n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    if (1) {\n        v3 = new array[](v0.length);\n        v4 = v5 = 0;\n        while (v4 < v0.length) {\n            MEM[v4 + v3.data] = MEM[v4 + v0.data];\n            v4 += 32;\n        }\n        v6 = v7 = v0.length + v3.data;\n        if (0x1f & v0.length) {\n            MEM[v7 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v7 - (0x1f & v0.length)];\n        }\n        require(varg0.code.size);\n        v8 = varg0.receiveApproval(msg.sender, varg1, this, v3).gas(msg.gas);\n        require(v8); // checks call status, propagates error data on error\n        v1 = v9 = 1;\n    }\n    return v1;\n}\n\nfunction lockAmountForMasternode(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(0xff & _masternodeCheck[msg.sender]);\n    assert(_getCurrentLockedAmount[msg.sender] <= _getCurrentUnlockedAmount[msg.sender]);\n    require(_getCurrentUnlockedAmount[msg.sender] - _getCurrentLockedAmount[msg.sender] >= varg0);\n    v0 = v1 = varg0 <= _maxAmountForMasternode;\n    if (v1) {\n        assert(varg0 + _getCurrentLockedAmount[msg.sender] >= _getCurrentLockedAmount[msg.sender]);\n        v0 = v2 = varg0 + _getCurrentLockedAmount[msg.sender] <= _maxAmountForMasternode;\n    }\n    require(v0);\n    _addressHasParkedToken[msg.sender] = 0x1 | ~0xff & _addressHasParkedToken[msg.sender];\n    if (!_getCurrentLockedAmount[msg.sender]) {\n        v3 = 0x1652();\n        _lastTimeRewarded[msg.sender] = v3;\n    }\n    assert(varg0 + _getCurrentLockedAmount[msg.sender] >= _getCurrentLockedAmount[msg.sender]);\n    _getCurrentLockedAmount[msg.sender] += varg0;\n}\n\nfunction lastTimeRewarded(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return _lastTimeRewarded[varg0];\n}\n\nfunction getCurrentCyleBlock() public nonPayable { \n    v0 = 0x1652();\n    return v0;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    return _allowance[varg1];\n}\n\nfunction adjustBlocksBetweenReward(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _adjustBlocksBetweenReward);\n    stor_10 = varg0;\n}\n\nfunction getRemainingMasternodeSupply() public nonPayable { \n    return _getRemainingMasternodeSupply;\n}\n\nfunction getLastTimeRewarded(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return _lastTimeRewarded[varg0];\n}\n\nfunction getCurrentPossibleAmountOfAddress(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    if (0xff & _addressHasParkedToken[varg0]) {\n        v0 = 0xb9c(varg0);\n        v1 = v0 + _getCurrentLockedAmount[varg0];\n        assert(v1 >= _getCurrentLockedAmount[varg0]);\n    } else {\n        v1 = v2 = 0;\n    }\n    return v1;\n}\n\nfunction 0xb9c(uint256 varg0) private { \n    v0 = 0x1652();\n    v1 = address(varg0);\n    assert(_lastTimeRewarded[v1] <= v0);\n    assert(stor_10);\n    v2 = address(varg0);\n    v3 = _SafeMul(_getCurrentLockedAmount[v2], _getCurrentMasternodeNumerator);\n    assert(_getCurrentMasternodeDenominator);\n    v4 = _SafeMul((v0 - _lastTimeRewarded[v1]) / stor_10, v3 / _getCurrentMasternodeDenominator);\n    return v4;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        v0 = function_selector >> 224;\n        if (0x9e4d1b2b > v0) {\n            if (0x617459e5 > v0) {\n                if (0x26f00c4d > v0) {\n                    if (0x4cdc542 == v0) {\n                        claimMasternodeReward();\n                    } else if (0x95ea7b3 == v0) {\n                        approve(address,uint256);\n                    } else if (0xad61b5f == v0) {\n                        getCurrentMiningReward();\n                    } else if (0x23b872dd == v0) {\n                        transferFrom(address,address,uint256);\n                    } else if (0x257476df == v0) {\n                        getCurrentLockedAmount();\n                    }\n                } else if (0x26f00c4d == v0) {\n                    checkForMasterNode(address);\n                } else if (0x2e2a3101 == v0) {\n                    getBlacklistblockForUser();\n                } else if (0x35823e80 == v0) {\n                    interestToClaim(address);\n                } else if (0x42966c68 == v0) {\n                    burn(uint256);\n                } else if (0x47392ce4 == v0) {\n                    adjustMiningRewards();\n                }\n            } else if (0x7cd55bd9 > v0) {\n                if (0x617459e5 == v0) {\n                    getCurrentMasterNodeReward();\n                } else if (0x68c64689 == v0) {\n                    getRemainingPublicMineSupply();\n                } else if (0x6efcbe04 == v0) {\n                    getMasternodeRequiredAmount();\n                } else if (0x70a08231 == v0) {\n                    balanceOf(address);\n                } else if (0x79cc6790 == v0) {\n                    burnFrom(address,uint256);\n                }\n            } else if (0x7cd55bd9 == v0) {\n                getStaticFinney();\n            } else if (0x7ec3fbfa == v0) {\n                registeredAtBlock(address);\n            } else if (0x8f89a447 == v0) {\n                maxAmountForMasternode();\n            } else if (0x96058e9b == v0) {\n                getCurrentMasternodeDenominator();\n            } else if (0x9696ccf2 == v0) {\n                unlockAmountFromMasterNode();\n            }\n        } else if (0xc4e41b22 > v0) {\n            if (0xa941c122 > v0) {\n                if (0x9e4d1b2b == v0) {\n                    publicMine();\n                } else if (0x9e85ef41 == v0) {\n                    adjustMasternodeRewards();\n                } else if (0xa153e708 == v0) {\n                    lockedAmount(address);\n                } else if (0xa3f43d24 == v0) {\n                    masternodeCheck(address);\n                } else if (0xa9059cbb == v0) {\n                    transfer(address,uint256);\n                }\n            } else if (0xa941c122 == v0) {\n                getCurrentMasternodeNumerator();\n            } else if (0xaea1eeef == v0) {\n                addressHasParkedToken(address);\n            } else if (0xb1500682 == v0) {\n                blacklistedTillBlock(address);\n            } else if (0xb1a4904e == v0) {\n                registerMasternode();\n            } else if (0xb61a125e == v0) {\n                blockHasBeenMined(uint256);\n            }\n        } else if (0xd4f9674b > v0) {\n            if (0xc4e41b22 == v0) {\n                getTotalSupply();\n            } else if (0xcae811e2 == v0) {\n                getCurrentUnlockedAmount();\n            } else if (0xcae9ca51 == v0) {\n                approveAndCall(address,uint256,bytes);\n            } else if (0xcc5e6c50 == v0) {\n                lockAmountForMasternode(uint256);\n            } else if (0xd018458e == v0) {\n                lastTimeRewarded(address);\n            }\n        } else if (0xd4f9674b == v0) {\n            getCurrentCyleBlock();\n        } else if (0xdd62ed3e == v0) {\n            allowance(address,address);\n        } else if (0xe79bafa1 == v0) {\n            adjustBlocksBetweenReward(uint256);\n        } else if (0xf12389f5 == v0) {\n            getRemainingMasternodeSupply();\n        } else if (0xf31ac520 == v0) {\n            getLastTimeRewarded(address);\n        } else if (0xf7db31f1 == v0) {\n            getCurrentPossibleAmountOfAddress(address);\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.09.13 17:40 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _getTotalSupply; // STORAGE[0x3]\nuint256 stor_4; // STORAGE[0x4]\nuint256 _getCurrentMiningReward; // STORAGE[0x6]\nuint256 _getRemainingPublicMineSupply; // STORAGE[0x7]\nuint256 _getRemainingMasternodeSupply; // STORAGE[0x8]\nuint256 stor_9; // STORAGE[0x9]\nuint256 stor_a; // STORAGE[0xa]\nuint256 _getCurrentMasternodeNumerator; // STORAGE[0xb]\nuint256 _getCurrentMasternodeDenominator; // STORAGE[0xc]\nuint256 _getStaticFinney; // STORAGE[0xd]\nuint256 _getMasternodeRequiredAmount; // STORAGE[0xe]\nuint256 _maxAmountForMasternode; // STORAGE[0xf]\nuint256 stor_10; // STORAGE[0x10]\nuint256 stor_13; // STORAGE[0x13]\nmapping (uint256 => [uint256]) _getCurrentUnlockedAmount; // STORAGE[0x14]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x15]\nmapping (uint256 => [uint256]) _blockHasBeenMined; // STORAGE[0x16]\nmapping (uint256 => [uint256]) _masternodeCheck; // STORAGE[0x17]\nmapping (uint256 => [uint256]) _registeredAtBlock; // STORAGE[0x18]\nmapping (uint256 => [uint256]) _lastTimeRewarded; // STORAGE[0x19]\nmapping (uint256 => [uint256]) _addressHasParkedToken; // STORAGE[0x1a]\nmapping (uint256 => [uint256]) _getCurrentLockedAmount; // STORAGE[0x1b]\nmapping (uint256 => [uint256]) _getBlacklistblockForUser; // STORAGE[0x1c]\naddress _adjustBlocksBetweenReward; // STORAGE[0x11] bytes 0 to 19\nuint160 stor_12_0_19; // STORAGE[0x12] bytes 0 to 19\n\n// Events\nApproval(address, address, uint256);\nBurn(address, uint256);\nTransfer(address, address, uint256);\n\nfunction 0x1652() private { \n    assert(stor_4 <= block.number);\n    return block.number - stor_4;\n}\n\nfunction 0x1728(uint256 varg0) private { \n    v0 = _SafeMul(80, varg0);\n    assert(100);\n    return v0 / 100;\n}\n\nfunction 0x173f(uint256 varg0) private { \n    v0 = _SafeMul(20, varg0);\n    assert(100);\n    return v0 / 100;\n}\n\nfunction 0x1761(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    require(address(varg1));\n    v0 = address(varg2);\n    require(varg0 <= _getCurrentUnlockedAmount[v0]);\n    v1 = address(varg1);\n    require(_getCurrentUnlockedAmount[v1] + varg0 >= _getCurrentUnlockedAmount[v1]);\n    v2 = address(varg1);\n    v3 = address(varg2);\n    _getCurrentUnlockedAmount[v3] = _getCurrentUnlockedAmount[v3] - varg0;\n    _getCurrentUnlockedAmount[v2] += varg0;\n    emit Transfer(v3, v2, varg0);\n    v4 = address(varg1);\n    v5 = address(varg2);\n    assert(_getCurrentUnlockedAmount[v2] + _getCurrentUnlockedAmount[v3] == _getCurrentUnlockedAmount[v5] + _getCurrentUnlockedAmount[v4]);\n    return ;\n}\n\nfunction _SafeMul(uint256 varg0, uint256 varg1) private { \n    if (varg1) {\n        v0 = varg0 * varg1;\n        assert(varg1);\n        assert(v0 / varg1 == varg0);\n        return v0;\n    } else {\n        return 0;\n    }\n}\n\nfunction fallback() public payable { \n    revert();\n}\n\nfunction claimMasternodeReward() public nonPayable { \n    require(0xff & _masternodeCheck[msg.sender]);\n    require(_getRemainingMasternodeSupply > 0);\n    require(0xff & _addressHasParkedToken[msg.sender]);\n    v0 = 0xb9c(msg.sender);\n    v1 = 0x1728(v0);\n    require(this.code.size);\n    v2 = this.transfer(msg.sender, v1).gas(msg.gas);\n    require(v2); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    v3 = 0x173f(v0);\n    require(this.code.size);\n    v4 = this.transfer(stor_12_0_19, v3).gas(msg.gas);\n    require(v4); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    v5 = 0x1652();\n    _lastTimeRewarded[msg.sender] = v5;\n    assert(v0 <= _getRemainingMasternodeSupply);\n    _getRemainingMasternodeSupply = _getRemainingMasternodeSupply - v0;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    _allowance[msg.sender] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction getCurrentMiningReward() public nonPayable { \n    return _getCurrentMiningReward;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(msg.data.length - 4 >= 96);\n    require(varg2 <= _allowance[msg.sender]);\n    _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    0x1761(varg2, varg1, varg0);\n    return 1;\n}\n\nfunction getCurrentLockedAmount() public nonPayable { \n    return _getCurrentLockedAmount[msg.sender];\n}\n\nfunction checkForMasterNode(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return 0xff & _masternodeCheck[varg0];\n}\n\nfunction getBlacklistblockForUser() public nonPayable { \n    return _getBlacklistblockForUser[msg.sender];\n}\n\nfunction interestToClaim(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    v0 = 0x1652();\n    assert(_lastTimeRewarded[varg0] <= v0);\n    assert(stor_10);\n    v1 = _SafeMul(_getCurrentLockedAmount[varg0], _getCurrentMasternodeNumerator);\n    assert(_getCurrentMasternodeDenominator);\n    v2 = _SafeMul((v0 - _lastTimeRewarded[varg0]) / stor_10, v1 / _getCurrentMasternodeDenominator);\n    return v2;\n}\n\nfunction burn(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(varg0 <= _getCurrentUnlockedAmount[msg.sender]);\n    _getCurrentUnlockedAmount[msg.sender] = _getCurrentUnlockedAmount[msg.sender] - varg0;\n    _getTotalSupply = _getTotalSupply - varg0;\n    emit Burn(msg.sender, varg0);\n    return 1;\n}\n\nfunction adjustMiningRewards() public nonPayable { \n    v0 = v1 = _getRemainingPublicMineSupply < 0x90c1b1025e16710f000000;\n    if (v1) {\n        v0 = _getRemainingPublicMineSupply > 0x6c9144c1c690d4cb400000;\n    }\n    if (v0) {\n        _getCurrentMiningReward = 0x15af1d78b58c40000;\n    }\n    v2 = v3 = _getRemainingPublicMineSupply < 0x6c9144c1c690d4cb400000;\n    if (v3) {\n        v2 = _getRemainingPublicMineSupply > 0x4d8c55aefb8c05b5c00000;\n    }\n    if (v2) {\n        _getCurrentMiningReward = 0xad78ebc5ac620000;\n    }\n    v4 = v5 = _getRemainingPublicMineSupply < 0x4d8c55aefb8c05b5c00000;\n    if (v5) {\n        v4 = _getRemainingPublicMineSupply > 0x33b2e3c9fd0803ce800000;\n    }\n    if (v4) {\n        _getCurrentMiningReward = 0x56bc75e2d6310000;\n    }\n    v6 = v7 = _getRemainingPublicMineSupply < 0x33b2e3c9fd0803ce800000;\n    if (v7) {\n        v6 = _getRemainingPublicMineSupply > 0x1f04ef12cb04cf15800000;\n    }\n    if (v6) {\n        _getCurrentMiningReward = 0x2b5e3af16b188000;\n    }\n    v8 = v9 = _getRemainingPublicMineSupply < 0x1f04ef12cb04cf15800000;\n    if (v9) {\n        v8 = _getRemainingPublicMineSupply > 0xf8277896582678ac00000;\n    }\n    if (v8) {\n        _getCurrentMiningReward = 0x15af1d78b58c4000;\n    }\n    v10 = v11 = _getRemainingPublicMineSupply < 0xf8277896582678ac00000;\n    if (v11) {\n        v10 = _getRemainingPublicMineSupply > 0xa56fa5b99019a5c800000;\n    }\n    if (v10) {\n        _getCurrentMiningReward = 0xb1a2bc2ec500000;\n    }\n    v12 = v13 = _getRemainingPublicMineSupply < 0xa56fa5b99019a5c800000;\n    if (v13) {\n        v12 = _getRemainingPublicMineSupply > 0x52b7d2dcc80cd2e400000;\n    }\n    if (v12) {\n        _getCurrentMiningReward = 0x58d15e176280000;\n    }\n    if (_getRemainingPublicMineSupply < 0x52b7d2dcc80cd2e400000) {\n        _getCurrentMiningReward = 0x2c68af0bb140000;\n    }\n}\n\nfunction getCurrentMasterNodeReward() public nonPayable { \n    assert(_getCurrentMasternodeDenominator);\n    v0 = _SafeMul(100, _getCurrentMasternodeNumerator / _getCurrentMasternodeDenominator);\n    return v0;\n}\n\nfunction getRemainingPublicMineSupply() public nonPayable { \n    return _getRemainingPublicMineSupply;\n}\n\nfunction getMasternodeRequiredAmount() public nonPayable { \n    return _getMasternodeRequiredAmount;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return _getCurrentUnlockedAmount[varg0];\n}\n\nfunction burnFrom(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    require(varg1 <= _getCurrentUnlockedAmount[varg0]);\n    require(varg1 <= _allowance[msg.sender]);\n    _getCurrentUnlockedAmount[varg0] = _getCurrentUnlockedAmount[varg0] - varg1;\n    _allowance[msg.sender] = _allowance[msg.sender] - varg1;\n    _getTotalSupply = _getTotalSupply - varg1;\n    emit Burn(varg0, varg1);\n    return 1;\n}\n\nfunction getStaticFinney() public nonPayable { \n    return _getStaticFinney;\n}\n\nfunction registeredAtBlock(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return _registeredAtBlock[varg0];\n}\n\nfunction maxAmountForMasternode() public nonPayable { \n    return _maxAmountForMasternode;\n}\n\nfunction getCurrentMasternodeDenominator() public nonPayable { \n    return _getCurrentMasternodeDenominator;\n}\n\nfunction unlockAmountFromMasterNode() public nonPayable { \n    require(0xff & _masternodeCheck[msg.sender]);\n    _addressHasParkedToken[msg.sender] = ~0xff & _addressHasParkedToken[msg.sender];\n    _getCurrentLockedAmount[msg.sender] = 0;\n    return 1;\n}\n\nfunction publicMine() public payable { \n    require(_getRemainingPublicMineSupply > _getCurrentMiningReward);\n    v0 = 0x1652();\n    require(v0 > _getBlacklistblockForUser[msg.sender]);\n    v1 = 0x1652();\n    require(!(0xff & _blockHasBeenMined[v1]));\n    _getCurrentMiningReward = _getCurrentMiningReward;\n    v2 = 0x173f(_getCurrentMiningReward);\n    stor_9 = v2;\n    v3 = 0x1728(_getCurrentMiningReward);\n    stor_a = v3;\n    require(this.code.size);\n    v4 = this.transfer(msg.sender, v3).gas(msg.gas);\n    require(v4); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    require(this.code.size);\n    v5 = this.transfer(stor_12_0_19, stor_9).gas(msg.gas);\n    require(v5); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    assert(_getCurrentMiningReward <= _getRemainingPublicMineSupply);\n    _getRemainingPublicMineSupply = _getRemainingPublicMineSupply - _getCurrentMiningReward;\n    v6 = 0x1652();\n    _blockHasBeenMined[v6] = 0x1 | ~0xff & _blockHasBeenMined[v6];\n    v7 = 0x1652();\n    assert(stor_13 + v7 >= v7);\n    _getBlacklistblockForUser[msg.sender] = stor_13 + v7;\n}\n\nfunction adjustMasternodeRewards() public nonPayable { \n    v0 = v1 = _getRemainingMasternodeSupply < 0xb4f21d42f59c0d52c00000;\n    if (v1) {\n        v0 = _getRemainingMasternodeSupply > 0xaa9b22e75c9a72f6400000;\n    }\n    if (v0) {\n        _getCurrentMasternodeNumerator = 5410;\n        _getCurrentMasternodeDenominator = 0x7a120;\n    }\n    v2 = v3 = _getRemainingMasternodeSupply < 0xaa9b22e75c9a72f6400000;\n    if (v3) {\n        v2 = _getRemainingMasternodeSupply > 0x9b18ab5df7180b6b800000;\n    }\n    if (v2) {\n        _getCurrentMasternodeNumerator = 469;\n        _getCurrentMasternodeDenominator = 50000;\n    }\n    v4 = v5 = _getRemainingMasternodeSupply < 0x9b18ab5df7180b6b800000;\n    if (v5) {\n        v4 = _getRemainingMasternodeSupply > 0x866ab6a6c514d6b2800000;\n    }\n    if (v4) {\n        _getCurrentMasternodeNumerator = 783;\n        _getCurrentMasternodeDenominator = 0x186a0;\n    }\n    v6 = v7 = _getRemainingMasternodeSupply < 0x866ab6a6c514d6b2800000;\n    if (v7) {\n        v6 = _getRemainingMasternodeSupply > 0x6c9144c1c690d4cb400000;\n    }\n    if (v6) {\n        _getCurrentMasternodeNumerator = 307;\n        _getCurrentMasternodeDenominator = 50000;\n    }\n    v8 = v9 = _getRemainingMasternodeSupply < 0x6c9144c1c690d4cb400000;\n    if (v9) {\n        v8 = _getRemainingMasternodeSupply > 0x4d8c55aefb8c05b5c00000;\n    }\n    if (v8) {\n        _getCurrentMasternodeNumerator = 43;\n        _getCurrentMasternodeDenominator = 10000;\n    }\n    v10 = v11 = _getRemainingMasternodeSupply < 0x4d8c55aefb8c05b5c00000;\n    if (v11) {\n        v10 = _getRemainingMasternodeSupply > 0x295be96e64066972000000;\n    }\n    if (v10) {\n        _getCurrentMasternodeNumerator = 269;\n        _getCurrentMasternodeDenominator = 0x186a0;\n    }\n    if (_getRemainingMasternodeSupply < 0x295be96e64066972000000) {\n        _getCurrentMasternodeNumerator = 183;\n        _getCurrentMasternodeDenominator = 0x186a0;\n        goto 0x2600x522;\n    }\n}\n\nfunction lockedAmount(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return _getCurrentLockedAmount[varg0];\n}\n\nfunction masternodeCheck(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return 0xff & _masternodeCheck[varg0];\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    0x1761(varg1, varg0, msg.sender);\n    return 1;\n}\n\nfunction getCurrentMasternodeNumerator() public nonPayable { \n    return _getCurrentMasternodeNumerator;\n}\n\nfunction addressHasParkedToken(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return 0xff & _addressHasParkedToken[varg0];\n}\n\nfunction blacklistedTillBlock(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return _getBlacklistblockForUser[varg0];\n}\n\nfunction registerMasternode() public nonPayable { \n    require(!(0xff & _masternodeCheck[msg.sender]));\n    require(_getCurrentUnlockedAmount[msg.sender] > _getMasternodeRequiredAmount);\n    require(!(0xff & _masternodeCheck[msg.sender]));\n    v0 = 0x1652();\n    _masternodeCheck[msg.sender] = 0x1 | ~0xff & _masternodeCheck[msg.sender];\n    _registeredAtBlock[msg.sender] = v0;\n    _registeredAtBlock[msg.sender] = v0;\n}\n\nfunction blockHasBeenMined(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return 0xff & _blockHasBeenMined[varg0];\n}\n\nfunction getTotalSupply() public nonPayable { \n    return _getTotalSupply;\n}\n\nfunction getCurrentUnlockedAmount() public nonPayable { \n    assert(_getCurrentLockedAmount[msg.sender] <= _getCurrentUnlockedAmount[msg.sender]);\n    return _getCurrentUnlockedAmount[msg.sender] - _getCurrentLockedAmount[msg.sender];\n}\n\nfunction approveAndCall(address varg0, uint256 varg1, bytes varg2) public nonPayable { \n    require(msg.data.length - 4 >= 96);\n    require(varg2 <= 0x100000000);\n    require(4 + varg2 + 32 <= 4 + (msg.data.length - 4));\n    require(!(((?).length > 0x100000000) | (36 + varg2 + (?).length > 4 + (msg.data.length - 4))));\n    v0 = new bytes[]((?).length);\n    CALLDATACOPY(v0.data, 36 + varg2, (?).length);\n    MEM[v0.data + (?).length] = 0;\n    v1 = v2 = 0;\n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    if (1) {\n        v3 = new array[](v0.length);\n        v4 = v5 = 0;\n        while (v4 < v0.length) {\n            MEM[v4 + v3.data] = MEM[v4 + v0.data];\n            v4 += 32;\n        }\n        v6 = v7 = v0.length + v3.data;\n        if (0x1f & v0.length) {\n            MEM[v7 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v7 - (0x1f & v0.length)];\n        }\n        require(varg0.code.size);\n        v8 = varg0.receiveApproval(msg.sender, varg1, this, v3).gas(msg.gas);\n        require(v8); // checks call status, propagates error data on error\n        v1 = v9 = 1;\n    }\n    return v1;\n}\n\nfunction lockAmountForMasternode(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(0xff & _masternodeCheck[msg.sender]);\n    assert(_getCurrentLockedAmount[msg.sender] <= _getCurrentUnlockedAmount[msg.sender]);\n    require(_getCurrentUnlockedAmount[msg.sender] - _getCurrentLockedAmount[msg.sender] >= varg0);\n    v0 = v1 = varg0 <= _maxAmountForMasternode;\n    if (v1) {\n        assert(varg0 + _getCurrentLockedAmount[msg.sender] >= _getCurrentLockedAmount[msg.sender]);\n        v0 = v2 = varg0 + _getCurrentLockedAmount[msg.sender] <= _maxAmountForMasternode;\n    }\n    require(v0);\n    _addressHasParkedToken[msg.sender] = 0x1 | ~0xff & _addressHasParkedToken[msg.sender];\n    if (!_getCurrentLockedAmount[msg.sender]) {\n        v3 = 0x1652();\n        _lastTimeRewarded[msg.sender] = v3;\n    }\n    assert(varg0 + _getCurrentLockedAmount[msg.sender] >= _getCurrentLockedAmount[msg.sender]);\n    _getCurrentLockedAmount[msg.sender] += varg0;\n}\n\nfunction lastTimeRewarded(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return _lastTimeRewarded[varg0];\n}\n\nfunction getCurrentCyleBlock() public nonPayable { \n    v0 = 0x1652();\n    return v0;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    return _allowance[varg1];\n}\n\nfunction adjustBlocksBetweenReward(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _adjustBlocksBetweenReward);\n    stor_10 = varg0;\n}\n\nfunction getRemainingMasternodeSupply() public nonPayable { \n    return _getRemainingMasternodeSupply;\n}\n\nfunction getLastTimeRewarded(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return _lastTimeRewarded[varg0];\n}\n\nfunction getCurrentPossibleAmountOfAddress(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    if (0xff & _addressHasParkedToken[varg0]) {\n        v0 = 0xb9c(varg0);\n        v1 = v0 + _getCurrentLockedAmount[varg0];\n        assert(v1 >= _getCurrentLockedAmount[varg0]);\n    } else {\n        v1 = v2 = 0;\n    }\n    return v1;\n}\n\nfunction 0xb9c(uint256 varg0) private { \n    v0 = 0x1652();\n    v1 = address(varg0);\n    assert(_lastTimeRewarded[v1] <= v0);\n    assert(stor_10);\n    v2 = address(varg0);\n    v3 = _SafeMul(_getCurrentLockedAmount[v2], _getCurrentMasternodeNumerator);\n    assert(_getCurrentMasternodeDenominator);\n    v4 = _SafeMul((v0 - _lastTimeRewarded[v1]) / stor_10, v3 / _getCurrentMasternodeDenominator);\n    return v4;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        v0 = function_selector >> 224;\n        if (0x9e4d1b2b > v0) {\n            if (0x617459e5 > v0) {\n                if (0x26f00c4d > v0) {\n                    if (0x4cdc542 == v0) {\n                        claimMasternodeReward();\n                    } else if (0x95ea7b3 == v0) {\n                        approve(address,uint256);\n                    } else if (0xad61b5f == v0) {\n                        getCurrentMiningReward();\n                    } else if (0x23b872dd == v0) {\n                        transferFrom(address,address,uint256);\n                    } else if (0x257476df == v0) {\n                        getCurrentLockedAmount();\n                    }\n                } else if (0x26f00c4d == v0) {\n                    checkForMasterNode(address);\n                } else if (0x2e2a3101 == v0) {\n                    getBlacklistblockForUser();\n                } else if (0x35823e80 == v0) {\n                    interestToClaim(address);\n                } else if (0x42966c68 == v0) {\n                    burn(uint256);\n                } else if (0x47392ce4 == v0) {\n                    adjustMiningRewards();\n                }\n            } else if (0x7cd55bd9 > v0) {\n                if (0x617459e5 == v0) {\n                    getCurrentMasterNodeReward();\n                } else if (0x68c64689 == v0) {\n                    getRemainingPublicMineSupply();\n                } else if (0x6efcbe04 == v0) {\n                    getMasternodeRequiredAmount();\n                } else if (0x70a08231 == v0) {\n                    balanceOf(address);\n                } else if (0x79cc6790 == v0) {\n                    burnFrom(address,uint256);\n                }\n            } else if (0x7cd55bd9 == v0) {\n                getStaticFinney();\n            } else if (0x7ec3fbfa == v0) {\n                registeredAtBlock(address);\n            } else if (0x8f89a447 == v0) {\n                maxAmountForMasternode();\n            } else if (0x96058e9b == v0) {\n                getCurrentMasternodeDenominator();\n            } else if (0x9696ccf2 == v0) {\n                unlockAmountFromMasterNode();\n            }\n        } else if (0xc4e41b22 > v0) {\n            if (0xa941c122 > v0) {\n                if (0x9e4d1b2b == v0) {\n                    publicMine();\n                } else if (0x9e85ef41 == v0) {\n                    adjustMasternodeRewards();\n                } else if (0xa153e708 == v0) {\n                    lockedAmount(address);\n                } else if (0xa3f43d24 == v0) {\n                    masternodeCheck(address);\n                } else if (0xa9059cbb == v0) {\n                    transfer(address,uint256);\n                }\n            } else if (0xa941c122 == v0) {\n                getCurrentMasternodeNumerator();\n            } else if (0xaea1eeef == v0) {\n                addressHasParkedToken(address);\n            } else if (0xb1500682 == v0) {\n                blacklistedTillBlock(address);\n            } else if (0xb1a4904e == v0) {\n                registerMasternode();\n            } else if (0xb61a125e == v0) {\n                blockHasBeenMined(uint256);\n            }\n        } else if (0xd4f9674b > v0) {\n            if (0xc4e41b22 == v0) {\n                getTotalSupply();\n            } else if (0xcae811e2 == v0) {\n                getCurrentUnlockedAmount();\n            } else if (0xcae9ca51 == v0) {\n                approveAndCall(address,uint256,bytes);\n            } else if (0xcc5e6c50 == v0) {\n                lockAmountForMasternode(uint256);\n            } else if (0xd018458e == v0) {\n                lastTimeRewarded(address);\n            }\n        } else if (0xd4f9674b == v0) {\n            getCurrentCyleBlock();\n        } else if (0xdd62ed3e == v0) {\n            allowance(address,address);\n        } else if (0xe79bafa1 == v0) {\n            adjustBlocksBetweenReward(uint256);\n        } else if (0xf12389f5 == v0) {\n            getRemainingMasternodeSupply();\n        } else if (0xf31ac520 == v0) {\n            getLastTimeRewarded(address);\n        } else if (0xf7db31f1 == v0) {\n            getCurrentPossibleAmountOfAddress(address);\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.09.13 17:40 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _getTotalSupply; // STORAGE[0x3]\nuint256 stor_4; // STORAGE[0x4]\nuint256 _getCurrentMiningReward; // STORAGE[0x6]\nuint256 _getRemainingPublicMineSupply; // STORAGE[0x7]\nuint256 _getRemainingMasternodeSupply; // STORAGE[0x8]\nuint256 stor_9; // STORAGE[0x9]\nuint256 stor_a; // STORAGE[0xa]\nuint256 _getCurrentMasternodeNumerator; // STORAGE[0xb]\nuint256 _getCurrentMasternodeDenominator; // STORAGE[0xc]\nuint256 _getStaticFinney; // STORAGE[0xd]\nuint256 _getMasternodeRequiredAmount; // STORAGE[0xe]\nuint256 _maxAmountForMasternode; // STORAGE[0xf]\nuint256 stor_10; // STORAGE[0x10]\nuint256 stor_13; // STORAGE[0x13]\nmapping (uint256 => [uint256]) _getCurrentUnlockedAmount; // STORAGE[0x14]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x15]\nmapping (uint256 => [uint256]) _blockHasBeenMined; // STORAGE[0x16]\nmapping (uint256 => [uint256]) _masternodeCheck; // STORAGE[0x17]\nmapping (uint256 => [uint256]) _registeredAtBlock; // STORAGE[0x18]\nmapping (uint256 => [uint256]) _lastTimeRewarded; // STORAGE[0x19]\nmapping (uint256 => [uint256]) _addressHasParkedToken; // STORAGE[0x1a]\nmapping (uint256 => [uint256]) _getCurrentLockedAmount; // STORAGE[0x1b]\nmapping (uint256 => [uint256]) _getBlacklistblockForUser; // STORAGE[0x1c]\naddress _adjustBlocksBetweenReward; // STORAGE[0x11] bytes 0 to 19\nuint160 stor_12_0_19; // STORAGE[0x12] bytes 0 to 19\n\n// Events\nApproval(address, address, uint256);\nBurn(address, uint256);\nTransfer(address, address, uint256);\n\nfunction 0x1652() private { \n    assert(stor_4 <= block.number);\n    return block.number - stor_4;\n}\n\nfunction 0x1728(uint256 varg0) private { \n    v0 = _SafeMul(80, varg0);\n    assert(100);\n    return v0 / 100;\n}\n\nfunction 0x173f(uint256 varg0) private { \n    v0 = _SafeMul(20, varg0);\n    assert(100);\n    return v0 / 100;\n}\n\nfunction 0x1761(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    require(address(varg1));\n    v0 = address(varg2);\n    require(varg0 <= _getCurrentUnlockedAmount[v0]);\n    v1 = address(varg1);\n    require(_getCurrentUnlockedAmount[v1] + varg0 >= _getCurrentUnlockedAmount[v1]);\n    v2 = address(varg1);\n    v3 = address(varg2);\n    _getCurrentUnlockedAmount[v3] = _getCurrentUnlockedAmount[v3] - varg0;\n    _getCurrentUnlockedAmount[v2] += varg0;\n    emit Transfer(v3, v2, varg0);\n    v4 = address(varg1);\n    v5 = address(varg2);\n    assert(_getCurrentUnlockedAmount[v2] + _getCurrentUnlockedAmount[v3] == _getCurrentUnlockedAmount[v5] + _getCurrentUnlockedAmount[v4]);\n    return ;\n}\n\nfunction _SafeMul(uint256 varg0, uint256 varg1) private { \n    if (varg1) {\n        v0 = varg0 * varg1;\n        assert(varg1);\n        assert(v0 / varg1 == varg0);\n        return v0;\n    } else {\n        return 0;\n    }\n}\n\nfunction fallback() public payable { \n    revert();\n}\n\nfunction claimMasternodeReward() public nonPayable { \n    require(0xff & _masternodeCheck[msg.sender]);\n    require(_getRemainingMasternodeSupply > 0);\n    require(0xff & _addressHasParkedToken[msg.sender]);\n    v0 = 0xb9c(msg.sender);\n    v1 = 0x1728(v0);\n    require(this.code.size);\n    v2 = this.transfer(msg.sender, v1).gas(msg.gas);\n    require(v2); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    v3 = 0x173f(v0);\n    require(this.code.size);\n    v4 = this.transfer(stor_12_0_19, v3).gas(msg.gas);\n    require(v4); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    v5 = 0x1652();\n    _lastTimeRewarded[msg.sender] = v5;\n    assert(v0 <= _getRemainingMasternodeSupply);\n    _getRemainingMasternodeSupply = _getRemainingMasternodeSupply - v0;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    _allowance[msg.sender] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction getCurrentMiningReward() public nonPayable { \n    return _getCurrentMiningReward;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(msg.data.length - 4 >= 96);\n    require(varg2 <= _allowance[msg.sender]);\n    _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    0x1761(varg2, varg1, varg0);\n    return 1;\n}\n\nfunction getCurrentLockedAmount() public nonPayable { \n    return _getCurrentLockedAmount[msg.sender];\n}\n\nfunction checkForMasterNode(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return 0xff & _masternodeCheck[varg0];\n}\n\nfunction getBlacklistblockForUser() public nonPayable { \n    return _getBlacklistblockForUser[msg.sender];\n}\n\nfunction interestToClaim(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    v0 = 0x1652();\n    assert(_lastTimeRewarded[varg0] <= v0);\n    assert(stor_10);\n    v1 = _SafeMul(_getCurrentLockedAmount[varg0], _getCurrentMasternodeNumerator);\n    assert(_getCurrentMasternodeDenominator);\n    v2 = _SafeMul((v0 - _lastTimeRewarded[varg0]) / stor_10, v1 / _getCurrentMasternodeDenominator);\n    return v2;\n}\n\nfunction burn(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(varg0 <= _getCurrentUnlockedAmount[msg.sender]);\n    _getCurrentUnlockedAmount[msg.sender] = _getCurrentUnlockedAmount[msg.sender] - varg0;\n    _getTotalSupply = _getTotalSupply - varg0;\n    emit Burn(msg.sender, varg0);\n    return 1;\n}\n\nfunction adjustMiningRewards() public nonPayable { \n    v0 = v1 = _getRemainingPublicMineSupply < 0x90c1b1025e16710f000000;\n    if (v1) {\n        v0 = _getRemainingPublicMineSupply > 0x6c9144c1c690d4cb400000;\n    }\n    if (v0) {\n        _getCurrentMiningReward = 0x15af1d78b58c40000;\n    }\n    v2 = v3 = _getRemainingPublicMineSupply < 0x6c9144c1c690d4cb400000;\n    if (v3) {\n        v2 = _getRemainingPublicMineSupply > 0x4d8c55aefb8c05b5c00000;\n    }\n    if (v2) {\n        _getCurrentMiningReward = 0xad78ebc5ac620000;\n    }\n    v4 = v5 = _getRemainingPublicMineSupply < 0x4d8c55aefb8c05b5c00000;\n    if (v5) {\n        v4 = _getRemainingPublicMineSupply > 0x33b2e3c9fd0803ce800000;\n    }\n    if (v4) {\n        _getCurrentMiningReward = 0x56bc75e2d6310000;\n    }\n    v6 = v7 = _getRemainingPublicMineSupply < 0x33b2e3c9fd0803ce800000;\n    if (v7) {\n        v6 = _getRemainingPublicMineSupply > 0x1f04ef12cb04cf15800000;\n    }\n    if (v6) {\n        _getCurrentMiningReward = 0x2b5e3af16b188000;\n    }\n    v8 = v9 = _getRemainingPublicMineSupply < 0x1f04ef12cb04cf15800000;\n    if (v9) {\n        v8 = _getRemainingPublicMineSupply > 0xf8277896582678ac00000;\n    }\n    if (v8) {\n        _getCurrentMiningReward = 0x15af1d78b58c4000;\n    }\n    v10 = v11 = _getRemainingPublicMineSupply < 0xf8277896582678ac00000;\n    if (v11) {\n        v10 = _getRemainingPublicMineSupply > 0xa56fa5b99019a5c800000;\n    }\n    if (v10) {\n        _getCurrentMiningReward = 0xb1a2bc2ec500000;\n    }\n    v12 = v13 = _getRemainingPublicMineSupply < 0xa56fa5b99019a5c800000;\n    if (v13) {\n        v12 = _getRemainingPublicMineSupply > 0x52b7d2dcc80cd2e400000;\n    }\n    if (v12) {\n        _getCurrentMiningReward = 0x58d15e176280000;\n    }\n    if (_getRemainingPublicMineSupply < 0x52b7d2dcc80cd2e400000) {\n        _getCurrentMiningReward = 0x2c68af0bb140000;\n    }\n}\n\nfunction getCurrentMasterNodeReward() public nonPayable { \n    assert(_getCurrentMasternodeDenominator);\n    v0 = _SafeMul(100, _getCurrentMasternodeNumerator / _getCurrentMasternodeDenominator);\n    return v0;\n}\n\nfunction getRemainingPublicMineSupply() public nonPayable { \n    return _getRemainingPublicMineSupply;\n}\n\nfunction getMasternodeRequiredAmount() public nonPayable { \n    return _getMasternodeRequiredAmount;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return _getCurrentUnlockedAmount[varg0];\n}\n\nfunction burnFrom(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    require(varg1 <= _getCurrentUnlockedAmount[varg0]);\n    require(varg1 <= _allowance[msg.sender]);\n    _getCurrentUnlockedAmount[varg0] = _getCurrentUnlockedAmount[varg0] - varg1;\n    _allowance[msg.sender] = _allowance[msg.sender] - varg1;\n    _getTotalSupply = _getTotalSupply - varg1;\n    emit Burn(varg0, varg1);\n    return 1;\n}\n\nfunction getStaticFinney() public nonPayable { \n    return _getStaticFinney;\n}\n\nfunction registeredAtBlock(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return _registeredAtBlock[varg0];\n}\n\nfunction maxAmountForMasternode() public nonPayable { \n    return _maxAmountForMasternode;\n}\n\nfunction getCurrentMasternodeDenominator() public nonPayable { \n    return _getCurrentMasternodeDenominator;\n}\n\nfunction unlockAmountFromMasterNode() public nonPayable { \n    require(0xff & _masternodeCheck[msg.sender]);\n    _addressHasParkedToken[msg.sender] = ~0xff & _addressHasParkedToken[msg.sender];\n    _getCurrentLockedAmount[msg.sender] = 0;\n    return 1;\n}\n\nfunction publicMine() public payable { \n    require(_getRemainingPublicMineSupply > _getCurrentMiningReward);\n    v0 = 0x1652();\n    require(v0 > _getBlacklistblockForUser[msg.sender]);\n    v1 = 0x1652();\n    require(!(0xff & _blockHasBeenMined[v1]));\n    _getCurrentMiningReward = _getCurrentMiningReward;\n    v2 = 0x173f(_getCurrentMiningReward);\n    stor_9 = v2;\n    v3 = 0x1728(_getCurrentMiningReward);\n    stor_a = v3;\n    require(this.code.size);\n    v4 = this.transfer(msg.sender, v3).gas(msg.gas);\n    require(v4); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    require(this.code.size);\n    v5 = this.transfer(stor_12_0_19, stor_9).gas(msg.gas);\n    require(v5); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    assert(_getCurrentMiningReward <= _getRemainingPublicMineSupply);\n    _getRemainingPublicMineSupply = _getRemainingPublicMineSupply - _getCurrentMiningReward;\n    v6 = 0x1652();\n    _blockHasBeenMined[v6] = 0x1 | ~0xff & _blockHasBeenMined[v6];\n    v7 = 0x1652();\n    assert(stor_13 + v7 >= v7);\n    _getBlacklistblockForUser[msg.sender] = stor_13 + v7;\n}\n\nfunction adjustMasternodeRewards() public nonPayable { \n    v0 = v1 = _getRemainingMasternodeSupply < 0xb4f21d42f59c0d52c00000;\n    if (v1) {\n        v0 = _getRemainingMasternodeSupply > 0xaa9b22e75c9a72f6400000;\n    }\n    if (v0) {\n        _getCurrentMasternodeNumerator = 5410;\n        _getCurrentMasternodeDenominator = 0x7a120;\n    }\n    v2 = v3 = _getRemainingMasternodeSupply < 0xaa9b22e75c9a72f6400000;\n    if (v3) {\n        v2 = _getRemainingMasternodeSupply > 0x9b18ab5df7180b6b800000;\n    }\n    if (v2) {\n        _getCurrentMasternodeNumerator = 469;\n        _getCurrentMasternodeDenominator = 50000;\n    }\n    v4 = v5 = _getRemainingMasternodeSupply < 0x9b18ab5df7180b6b800000;\n    if (v5) {\n        v4 = _getRemainingMasternodeSupply > 0x866ab6a6c514d6b2800000;\n    }\n    if (v4) {\n        _getCurrentMasternodeNumerator = 783;\n        _getCurrentMasternodeDenominator = 0x186a0;\n    }\n    v6 = v7 = _getRemainingMasternodeSupply < 0x866ab6a6c514d6b2800000;\n    if (v7) {\n        v6 = _getRemainingMasternodeSupply > 0x6c9144c1c690d4cb400000;\n    }\n    if (v6) {\n        _getCurrentMasternodeNumerator = 307;\n        _getCurrentMasternodeDenominator = 50000;\n    }\n    v8 = v9 = _getRemainingMasternodeSupply < 0x6c9144c1c690d4cb400000;\n    if (v9) {\n        v8 = _getRemainingMasternodeSupply > 0x4d8c55aefb8c05b5c00000;\n    }\n    if (v8) {\n        _getCurrentMasternodeNumerator = 43;\n        _getCurrentMasternodeDenominator = 10000;\n    }\n    v10 = v11 = _getRemainingMasternodeSupply < 0x4d8c55aefb8c05b5c00000;\n    if (v11) {\n        v10 = _getRemainingMasternodeSupply > 0x295be96e64066972000000;\n    }\n    if (v10) {\n        _getCurrentMasternodeNumerator = 269;\n        _getCurrentMasternodeDenominator = 0x186a0;\n    }\n    if (_getRemainingMasternodeSupply < 0x295be96e64066972000000) {\n        _getCurrentMasternodeNumerator = 183;\n        _getCurrentMasternodeDenominator = 0x186a0;\n        goto 0x2600x522;\n    }\n}\n\nfunction lockedAmount(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return _getCurrentLockedAmount[varg0];\n}\n\nfunction masternodeCheck(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return 0xff & _masternodeCheck[varg0];\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    0x1761(varg1, varg0, msg.sender);\n    return 1;\n}\n\nfunction getCurrentMasternodeNumerator() public nonPayable { \n    return _getCurrentMasternodeNumerator;\n}\n\nfunction addressHasParkedToken(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return 0xff & _addressHasParkedToken[varg0];\n}\n\nfunction blacklistedTillBlock(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return _getBlacklistblockForUser[varg0];\n}\n\nfunction registerMasternode() public nonPayable { \n    require(!(0xff & _masternodeCheck[msg.sender]));\n    require(_getCurrentUnlockedAmount[msg.sender] > _getMasternodeRequiredAmount);\n    require(!(0xff & _masternodeCheck[msg.sender]));\n    v0 = 0x1652();\n    _masternodeCheck[msg.sender] = 0x1 | ~0xff & _masternodeCheck[msg.sender];\n    _registeredAtBlock[msg.sender] = v0;\n    _registeredAtBlock[msg.sender] = v0;\n}\n\nfunction blockHasBeenMined(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return 0xff & _blockHasBeenMined[varg0];\n}\n\nfunction getTotalSupply() public nonPayable { \n    return _getTotalSupply;\n}\n\nfunction getCurrentUnlockedAmount() public nonPayable { \n    assert(_getCurrentLockedAmount[msg.sender] <= _getCurrentUnlockedAmount[msg.sender]);\n    return _getCurrentUnlockedAmount[msg.sender] - _getCurrentLockedAmount[msg.sender];\n}\n\nfunction approveAndCall(address varg0, uint256 varg1, bytes varg2) public nonPayable { \n    require(msg.data.length - 4 >= 96);\n    require(varg2 <= 0x100000000);\n    require(4 + varg2 + 32 <= 4 + (msg.data.length - 4));\n    require(!(((?).length > 0x100000000) | (36 + varg2 + (?).length > 4 + (msg.data.length - 4))));\n    v0 = new bytes[]((?).length);\n    CALLDATACOPY(v0.data, 36 + varg2, (?).length);\n    MEM[v0.data + (?).length] = 0;\n    v1 = v2 = 0;\n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    if (1) {\n        v3 = new array[](v0.length);\n        v4 = v5 = 0;\n        while (v4 < v0.length) {\n            MEM[v4 + v3.data] = MEM[v4 + v0.data];\n            v4 += 32;\n        }\n        v6 = v7 = v0.length + v3.data;\n        if (0x1f & v0.length) {\n            MEM[v7 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v7 - (0x1f & v0.length)];\n        }\n        require(varg0.code.size);\n        v8 = varg0.receiveApproval(msg.sender, varg1, this, v3).gas(msg.gas);\n        require(v8); // checks call status, propagates error data on error\n        v1 = v9 = 1;\n    }\n    return v1;\n}\n\nfunction lockAmountForMasternode(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(0xff & _masternodeCheck[msg.sender]);\n    assert(_getCurrentLockedAmount[msg.sender] <= _getCurrentUnlockedAmount[msg.sender]);\n    require(_getCurrentUnlockedAmount[msg.sender] - _getCurrentLockedAmount[msg.sender] >= varg0);\n    v0 = v1 = varg0 <= _maxAmountForMasternode;\n    if (v1) {\n        assert(varg0 + _getCurrentLockedAmount[msg.sender] >= _getCurrentLockedAmount[msg.sender]);\n        v0 = v2 = varg0 + _getCurrentLockedAmount[msg.sender] <= _maxAmountForMasternode;\n    }\n    require(v0);\n    _addressHasParkedToken[msg.sender] = 0x1 | ~0xff & _addressHasParkedToken[msg.sender];\n    if (!_getCurrentLockedAmount[msg.sender]) {\n        v3 = 0x1652();\n        _lastTimeRewarded[msg.sender] = v3;\n    }\n    assert(varg0 + _getCurrentLockedAmount[msg.sender] >= _getCurrentLockedAmount[msg.sender]);\n    _getCurrentLockedAmount[msg.sender] += varg0;\n}\n\nfunction lastTimeRewarded(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return _lastTimeRewarded[varg0];\n}\n\nfunction getCurrentCyleBlock() public nonPayable { \n    v0 = 0x1652();\n    return v0;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    return _allowance[varg1];\n}\n\nfunction adjustBlocksBetweenReward(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _adjustBlocksBetweenReward);\n    stor_10 = varg0;\n}\n\nfunction getRemainingMasternodeSupply() public nonPayable { \n    return _getRemainingMasternodeSupply;\n}\n\nfunction getLastTimeRewarded(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return _lastTimeRewarded[varg0];\n}\n\nfunction getCurrentPossibleAmountOfAddress(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    if (0xff & _addressHasParkedToken[varg0]) {\n        v0 = 0xb9c(varg0);\n        v1 = v0 + _getCurrentLockedAmount[varg0];\n        assert(v1 >= _getCurrentLockedAmount[varg0]);\n    } else {\n        v1 = v2 = 0;\n    }\n    return v1;\n}\n\nfunction 0xb9c(uint256 varg0) private { \n    v0 = 0x1652();\n    v1 = address(varg0);\n    assert(_lastTimeRewarded[v1] <= v0);\n    assert(stor_10);\n    v2 = address(varg0);\n    v3 = _SafeMul(_getCurrentLockedAmount[v2], _getCurrentMasternodeNumerator);\n    assert(_getCurrentMasternodeDenominator);\n    v4 = _SafeMul((v0 - _lastTimeRewarded[v1]) / stor_10, v3 / _getCurrentMasternodeDenominator);\n    return v4;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        v0 = function_selector >> 224;\n        if (0x9e4d1b2b > v0) {\n            if (0x617459e5 > v0) {\n                if (0x26f00c4d > v0) {\n                    if (0x4cdc542 == v0) {\n                        claimMasternodeReward();\n                    } else if (0x95ea7b3 == v0) {\n                        approve(address,uint256);\n                    } else if (0xad61b5f == v0) {\n                        getCurrentMiningReward();\n                    } else if (0x23b872dd == v0) {\n                        transferFrom(address,address,uint256);\n                    } else if (0x257476df == v0) {\n                        getCurrentLockedAmount();\n                    }\n                } else if (0x26f00c4d == v0) {\n                    checkForMasterNode(address);\n                } else if (0x2e2a3101 == v0) {\n                    getBlacklistblockForUser();\n                } else if (0x35823e80 == v0) {\n                    interestToClaim(address);\n                } else if (0x42966c68 == v0) {\n                    burn(uint256);\n                } else if (0x47392ce4 == v0) {\n                    adjustMiningRewards();\n                }\n            } else if (0x7cd55bd9 > v0) {\n                if (0x617459e5 == v0) {\n                    getCurrentMasterNodeReward();\n                } else if (0x68c64689 == v0) {\n                    getRemainingPublicMineSupply();\n                } else if (0x6efcbe04 == v0) {\n                    getMasternodeRequiredAmount();\n                } else if (0x70a08231 == v0) {\n                    balanceOf(address);\n                } else if (0x79cc6790 == v0) {\n                    burnFrom(address,uint256);\n                }\n            } else if (0x7cd55bd9 == v0) {\n                getStaticFinney();\n            } else if (0x7ec3fbfa == v0) {\n                registeredAtBlock(address);\n            } else if (0x8f89a447 == v0) {\n                maxAmountForMasternode();\n            } else if (0x96058e9b == v0) {\n                getCurrentMasternodeDenominator();\n            } else if (0x9696ccf2 == v0) {\n                unlockAmountFromMasterNode();\n            }\n        } else if (0xc4e41b22 > v0) {\n            if (0xa941c122 > v0) {\n                if (0x9e4d1b2b == v0) {\n                    publicMine();\n                } else if (0x9e85ef41 == v0) {\n                    adjustMasternodeRewards();\n                } else if (0xa153e708 == v0) {\n                    lockedAmount(address);\n                } else if (0xa3f43d24 == v0) {\n                    masternodeCheck(address);\n                } else if (0xa9059cbb == v0) {\n                    transfer(address,uint256);\n                }\n            } else if (0xa941c122 == v0) {\n                getCurrentMasternodeNumerator();\n            } else if (0xaea1eeef == v0) {\n                addressHasParkedToken(address);\n            } else if (0xb1500682 == v0) {\n                blacklistedTillBlock(address);\n            } else if (0xb1a4904e == v0) {\n                registerMasternode();\n            } else if (0xb61a125e == v0) {\n                blockHasBeenMined(uint256);\n            }\n        } else if (0xd4f9674b > v0) {\n            if (0xc4e41b22 == v0) {\n                getTotalSupply();\n            } else if (0xcae811e2 == v0) {\n                getCurrentUnlockedAmount();\n            } else if (0xcae9ca51 == v0) {\n                approveAndCall(address,uint256,bytes);\n            } else if (0xcc5e6c50 == v0) {\n                lockAmountForMasternode(uint256);\n            } else if (0xd018458e == v0) {\n                lastTimeRewarded(address);\n            }\n        } else if (0xd4f9674b == v0) {\n            getCurrentCyleBlock();\n        } else if (0xdd62ed3e == v0) {\n            allowance(address,address);\n        } else if (0xe79bafa1 == v0) {\n            adjustBlocksBetweenReward(uint256);\n        } else if (0xf12389f5 == v0) {\n            getRemainingMasternodeSupply();\n        } else if (0xf31ac520 == v0) {\n            getLastTimeRewarded(address);\n        } else if (0xf7db31f1 == v0) {\n            getCurrentPossibleAmountOfAddress(address);\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 40.405574560165405,
	"usage": {
		"completion_tokens": 706,
		"prompt_tokens": 6815,
		"total_tokens": 7521
	}
}