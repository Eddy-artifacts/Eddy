{
	"address": "0x54c716c88a3eb59f41e69f15d6714616fea64ed9",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is the Solidity smart contract code based on your provided specifications:\n\n```solidity\npragma solidity >=0.4.22 <0.9.0;\n\ncontract Fundraiser {\n    address public beneficiary;\n    uint public fundingGoal;\n    uint public amountRaised;\n    uint public deadline;\n    uint public price;\n    address public tokenReward;\n    mapping(address => uint256) public balanceOf;\n    bool private paused = false;\n    bool private paused1 = false;\n\n    constructor(address _beneficiary, uint _fundingGoal, uint _deadline, uint _price, address _tokenReward) payable public {\n        beneficiary = _beneficiary;\n        fundingGoal = _fundingGoal;\n        deadline = _deadline;\n        price = _price;\n        tokenReward = _tokenReward;\n        paused1 = false;\n        paused = false;\n    }\n\n    function () payable public {\n        require(!paused);\n        balanceOf[msg.sender] += msg.value;\n        amountRaised += msg.value;\n        if(price != 0){\n            TokenReward token = TokenReward(tokenReward);\n            token.transfer(msg.sender, msg.value / price);\n        }\n    }\n\n    function checkGoalReached() public {\n        require(block.timestamp >= deadline);\n        paused = true;\n        if(amountRaised >= fundingGoal){\n            paused1 = true;\n        }\n    }\n\n    function safeWithdrawal() public {\n        require(block.timestamp >= deadline);\n        if(!paused1){\n            uint amount = balanceOf[msg.sender];\n            balanceOf[msg.sender] = 0;\n            if (amount > 0) {\n                if(msg.sender.send(amount)) {\n                    balanceOf[msg.sender] = balanceOf[msg.sender];\n                }\n            }\n        }\n        if(beneficiary == msg.sender && paused1){\n            if(beneficiary.send(amountRaised)) {\n                paused1 = false;\n            }\n        }\n    }\n}\n\ncontract TokenReward {\n    function transfer(address _to, uint256 _value) public;\n}\n```\nThis contract assumes the existence of an external contract, `TokenReward`, with a `transfer` function. Please replace this contract with the actual contract you intend to interact with.",
				"role": "assistant"
			}
		}
	],
	"created": 1701719274,
	"id": "chatcmpl-8S9D0EbKVNxnCOMp1L2IgOvNzzXNG",
	"input_format": "LayedDescription",
	"ir": "For the payable constructor function.\n- the state variable paused1 will be updated to 0.\n- the state variable paused will be updated to 0.\n\nFor the payable fallback function.\n- When paused is 0:\n  - the balance of caller will be updated to (the balance of caller+the ether just received (i.e., msg.value)).\n  - the state variable amountraised will be updated to (amountraised+the ether just received (i.e., msg.value)).\n  - When price is not 0:\n    - it calls an external function transfer of the external contract tokenreward with the following argument list: caller, and (the ether just received (i.e., msg.value)/price).\n\nFor the checkGoalReached function.\n- After deadline:\n  - the state variable paused will be updated to 1.\n  - When amountraised is not smaller than fundinggoal:\n    - the state variable paused1 will be updated to 1.\n\nFor the safeWithdrawal function.\n- After deadline:\n  - When paused1 is 0:\n    - the balance of caller will be updated to 0.\n    - When the balance of caller is greater than 0:\n      - it transfers ether valued the balance of caller to caller. Afterthat, \n        - the balance of caller will be updated to the balance of caller.\n  - For beneficiary, and paused1 is not 0:\n    - it transfers ether valued amountraised to beneficiary.\n    - the state variable paused1 will be updated to 0.\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following contract descriptions. Some state variables are provided to help you develop.",
			"role": "system"
		},
		{
			"content": "The following is the description of the contract logic: For the payable constructor function.\n- the state variable paused1 will be updated to 0.\n- the state variable paused will be updated to 0.\n\nFor the payable fallback function.\n- When paused is 0:\n  - the balance of caller will be updated to (the balance of caller+the ether just received (i.e., msg.value)).\n  - the state variable amountraised will be updated to (amountraised+the ether just received (i.e., msg.value)).\n  - When price is not 0:\n    - it calls an external function transfer of the external contract tokenreward with the following argument list: caller, and (the ether just received (i.e., msg.value)/price).\n\nFor the checkGoalReached function.\n- After deadline:\n  - the state variable paused will be updated to 1.\n  - When amountraised is not smaller than fundinggoal:\n    - the state variable paused1 will be updated to 1.\n\nFor the safeWithdrawal function.\n- After deadline:\n  - When paused1 is 0:\n    - the balance of caller will be updated to 0.\n    - When the balance of caller is greater than 0:\n      - it transfers ether valued the balance of caller to caller. Afterthat, \n        - the balance of caller will be updated to the balance of caller.\n  - For beneficiary, and paused1 is not 0:\n    - it transfers ether valued amountraised to beneficiary.\n    - the state variable paused1 will be updated to 0.\n\n.\n Here are some state variables with their corresponding types: public state variable `beneficiary` is typed address,public state variable `fundinggoal` is typed uint256,public state variable `amountraised` is typed uint256,public state variable `deadline` is typed uint256,public state variable `price` is typed uint256,public state variable `tokenreward` is typed address,public state variable `balanceof` is typed mapping,private state variable `paused` is typed bool,private state variable `paused1` is typed bool.\n ",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following contract descriptions. Some state variables are provided to help you develop.The following is the description of the contract logic: For the payable constructor function.\n- the state variable paused1 will be updated to 0.\n- the state variable paused will be updated to 0.\n\nFor the payable fallback function.\n- When paused is 0:\n  - the balance of caller will be updated to (the balance of caller+the ether just received (i.e., msg.value)).\n  - the state variable amountraised will be updated to (amountraised+the ether just received (i.e., msg.value)).\n  - When price is not 0:\n    - it calls an external function transfer of the external contract tokenreward with the following argument list: caller, and (the ether just received (i.e., msg.value)/price).\n\nFor the checkGoalReached function.\n- After deadline:\n  - the state variable paused will be updated to 1.\n  - When amountraised is not smaller than fundinggoal:\n    - the state variable paused1 will be updated to 1.\n\nFor the safeWithdrawal function.\n- After deadline:\n  - When paused1 is 0:\n    - the balance of caller will be updated to 0.\n    - When the balance of caller is greater than 0:\n      - it transfers ether valued the balance of caller to caller. Afterthat, \n        - the balance of caller will be updated to the balance of caller.\n  - For beneficiary, and paused1 is not 0:\n    - it transfers ether valued amountraised to beneficiary.\n    - the state variable paused1 will be updated to 0.\n\n.\n Here are some state variables with their corresponding types: public state variable `beneficiary` is typed address,public state variable `fundinggoal` is typed uint256,public state variable `amountraised` is typed uint256,public state variable `deadline` is typed uint256,public state variable `price` is typed uint256,public state variable `tokenreward` is typed address,public state variable `balanceof` is typed mapping,private state variable `paused` is typed bool,private state variable `paused1` is typed bool.\n ",
	"status": "1",
	"time_cost": 13.38592004776001,
	"usage": {
		"completion_tokens": 439,
		"prompt_tokens": 488,
		"total_tokens": 927
	}
}