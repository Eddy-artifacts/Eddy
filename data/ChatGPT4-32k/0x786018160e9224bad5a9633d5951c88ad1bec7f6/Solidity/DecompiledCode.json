{
	"address": "0x786018160e9224bad5a9633d5951c88ad1bec7f6",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is the Solidity version of the decompiled code:\n\n```solidity\npragma solidity ^0.5.0;\n\ncontract MyContract {\n\n    address private _admin;\n    address private _fallback;\n    \n    event AdminChanged(address indexed previousAdmin, address indexed newAdmin);\n    event Upgraded(address indexed implementation);\n\n    function implementation() public view returns (address) {\n        require(msg.sender == _admin, \"Access denied\");\n        return _fallback;\n    }\n\n    function changeAdmin(address newAdmin) public {\n        require(msg.sender == _admin, \"Access denied\");\n        require(newAdmin != address(0), \"Cannot change the admin of a proxy to the zero address\");\n        emit AdminChanged(_admin, newAdmin);\n        _admin = newAdmin;\n    }\n\n    function admin() public view returns (address) {\n        require(msg.sender == _admin, \"Access denied\");\n        return _admin;\n    }\n\n    function() external payable {\n        require(msg.sender != _admin, \"Cannot call fallback function from the proxy admin\");\n        (bool success, bytes memory data) = _fallback.delegatecall(msg.data);\n        require(success);\n        assembly { revert(add(data, 0x20), mload(data)) }\n    }\n\n    function upgradeTo(address newImplementation) public {\n        require(msg.sender == _admin, \"Access denied\");\n        require(codeSize(newImplementation) > 0, \"Cannot set a proxy implementation to a non-contract address\");\n        _fallback = newImplementation;\n        emit Upgraded(newImplementation);\n    }\n\n    function codeSize(address _addr) internal view returns(uint _size) {\n        assembly { _size := extcodesize(_addr) }\n    }\n\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable {\n        upgradeTo(newImplementation);\n        (bool success,) = newImplementation.delegatecall(data);\n        require(success);\n    }\n}\n```\n\nPlease note that this code is a general reconstruction of the decompiled code and may require adjustments to fit your specific needs. Also, the original code uses low-level calls and assembly which are replaced by higher-level Solidity constructs in the reconstructed version.",
				"role": "assistant"
			}
		}
	],
	"created": 1701465840,
	"id": "chatcmpl-8R5HMejaR1A2wOOrQAW3CPcjMvGza",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.15 12:21 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _admin; // STORAGE[0x10d6a54a4754c8869d6886b5f5d7fbfa5b4522237ea5c60d11bc4e7a1ff9390b]\nuint256 _fallback; // STORAGE[0x7050c9e0f4ca769c69bd3a8ef740bc37934f8e2c036e5a723fd8ee048ed3f8c3]\n\n// Events\nAdminChanged(address, address);\nUpgraded(address);\n\nfunction implementation() public nonPayable { \n    if (msg.sender != address(_admin)) {\n        v0 = v1 = 0;\n    } else {\n        v0 = _fallback;\n        goto 0x3d3B0x14a;\n    }\n    return address(v0);\n}\n\nfunction changeAdmin(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    if (msg.sender != address(_admin)) {\n        0x5a3();\n        v0 = _fallback.delegatecall(MEM[0 len msg.data.length], MEM[0 len 0]).gas(msg.gas);\n        require(v0 != 0); // checks call status, propagates error data on error\n        return MEM[0 len (RETURNDATASIZE())];\n    } else {\n        require(varg0 != 0, 'Cannot change the admin of a proxy to the zero address');\n        emit AdminChanged(address(_admin), varg0);\n        _admin = varg0;\n        exit;\n    }\n}\n\nfunction admin() public nonPayable { \n    if (msg.sender != address(_admin)) {\n        v0 = v1 = 0;\n    } else {\n        v0 = _admin;\n        goto 0x5a0B0x1f2;\n    }\n    return address(v0);\n}\n\nfunction fallback() public payable { \n    0x5a3();\n    v0 = _fallback.delegatecall(MEM[0 len msg.data.length], MEM[0 len 0]).gas(msg.gas);\n    require(v0 != 0); // checks call status, propagates error data on error\n    return MEM[0 len (RETURNDATASIZE())];\n}\n\nfunction upgradeTo(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    if (msg.sender != address(_admin)) {\n        0x5a3();\n        v0 = _fallback.delegatecall(MEM[0 len msg.data.length], MEM[0 len 0]).gas(msg.gas);\n        require(v0 != 0); // checks call status, propagates error data on error\n        return MEM[0 len (RETURNDATASIZE())];\n    } else {\n        0x6c1(varg0);\n        exit;\n    }\n}\n\nfunction 0x5a3() private { \n    require(msg.sender != address(_admin), 'Cannot call fallback function from the proxy admin');\n    return ;\n}\n\nfunction 0x6c1(uint256 varg0) private { \n    require(varg0.code.size > 0, 'Cannot set a proxy implementation to a non-contract address');\n    _fallback = varg0;\n    v0 = address(varg0);\n    emit Upgraded(v0);\n    return ;\n}\n\nfunction upgradeToAndCall(address varg0, bytes varg1) public payable { \n    require(msg.data.length - 4 >= 64);\n    require(varg1 <= 0x100000000);\n    require(4 + varg1 + 32 <= 4 + (msg.data.length - 4));\n    require(!((varg1.length > 0x100000000) | (36 + varg1 + varg1.length > 4 + (msg.data.length - 4))));\n    if (msg.sender != address(_admin)) {\n        0x5a3();\n        v0 = _fallback.delegatecall(MEM[0 len msg.data.length], MEM[0 len 0]).gas(msg.gas);\n        require(v0 != 0); // checks call status, propagates error data on error\n        return MEM[0 len (RETURNDATASIZE())];\n    } else {\n        0x6c1(varg0);\n        v1, v2 = varg0.delegatecall(MEM[(MEM[64]) len (MEM[64] + varg1.length - MEM[64])], MEM[(MEM[64]) len 0]).gas(msg.gas);\n        if (RETURNDATASIZE() != 0) {\n            v3 = new bytes[](RETURNDATASIZE());\n            v2 = v3.data;\n            RETURNDATACOPY(v2, 0, RETURNDATASIZE());\n        }\n        require(v1);\n        exit;\n    }\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x3659cfe6 == function_selector >> 224) {\n            upgradeTo(address);\n        } else if (0x4f1ef286 == function_selector >> 224) {\n            upgradeToAndCall(address,bytes);\n        } else if (0x5c60da1b == function_selector >> 224) {\n            implementation();\n        } else if (0x8f283970 == function_selector >> 224) {\n            changeAdmin(address);\n        } else if (0xf851a440 == function_selector >> 224) {\n            admin();\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.15 12:21 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _admin; // STORAGE[0x10d6a54a4754c8869d6886b5f5d7fbfa5b4522237ea5c60d11bc4e7a1ff9390b]\nuint256 _fallback; // STORAGE[0x7050c9e0f4ca769c69bd3a8ef740bc37934f8e2c036e5a723fd8ee048ed3f8c3]\n\n// Events\nAdminChanged(address, address);\nUpgraded(address);\n\nfunction implementation() public nonPayable { \n    if (msg.sender != address(_admin)) {\n        v0 = v1 = 0;\n    } else {\n        v0 = _fallback;\n        goto 0x3d3B0x14a;\n    }\n    return address(v0);\n}\n\nfunction changeAdmin(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    if (msg.sender != address(_admin)) {\n        0x5a3();\n        v0 = _fallback.delegatecall(MEM[0 len msg.data.length], MEM[0 len 0]).gas(msg.gas);\n        require(v0 != 0); // checks call status, propagates error data on error\n        return MEM[0 len (RETURNDATASIZE())];\n    } else {\n        require(varg0 != 0, 'Cannot change the admin of a proxy to the zero address');\n        emit AdminChanged(address(_admin), varg0);\n        _admin = varg0;\n        exit;\n    }\n}\n\nfunction admin() public nonPayable { \n    if (msg.sender != address(_admin)) {\n        v0 = v1 = 0;\n    } else {\n        v0 = _admin;\n        goto 0x5a0B0x1f2;\n    }\n    return address(v0);\n}\n\nfunction fallback() public payable { \n    0x5a3();\n    v0 = _fallback.delegatecall(MEM[0 len msg.data.length], MEM[0 len 0]).gas(msg.gas);\n    require(v0 != 0); // checks call status, propagates error data on error\n    return MEM[0 len (RETURNDATASIZE())];\n}\n\nfunction upgradeTo(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    if (msg.sender != address(_admin)) {\n        0x5a3();\n        v0 = _fallback.delegatecall(MEM[0 len msg.data.length], MEM[0 len 0]).gas(msg.gas);\n        require(v0 != 0); // checks call status, propagates error data on error\n        return MEM[0 len (RETURNDATASIZE())];\n    } else {\n        0x6c1(varg0);\n        exit;\n    }\n}\n\nfunction 0x5a3() private { \n    require(msg.sender != address(_admin), 'Cannot call fallback function from the proxy admin');\n    return ;\n}\n\nfunction 0x6c1(uint256 varg0) private { \n    require(varg0.code.size > 0, 'Cannot set a proxy implementation to a non-contract address');\n    _fallback = varg0;\n    v0 = address(varg0);\n    emit Upgraded(v0);\n    return ;\n}\n\nfunction upgradeToAndCall(address varg0, bytes varg1) public payable { \n    require(msg.data.length - 4 >= 64);\n    require(varg1 <= 0x100000000);\n    require(4 + varg1 + 32 <= 4 + (msg.data.length - 4));\n    require(!((varg1.length > 0x100000000) | (36 + varg1 + varg1.length > 4 + (msg.data.length - 4))));\n    if (msg.sender != address(_admin)) {\n        0x5a3();\n        v0 = _fallback.delegatecall(MEM[0 len msg.data.length], MEM[0 len 0]).gas(msg.gas);\n        require(v0 != 0); // checks call status, propagates error data on error\n        return MEM[0 len (RETURNDATASIZE())];\n    } else {\n        0x6c1(varg0);\n        v1, v2 = varg0.delegatecall(MEM[(MEM[64]) len (MEM[64] + varg1.length - MEM[64])], MEM[(MEM[64]) len 0]).gas(msg.gas);\n        if (RETURNDATASIZE() != 0) {\n            v3 = new bytes[](RETURNDATASIZE());\n            v2 = v3.data;\n            RETURNDATACOPY(v2, 0, RETURNDATASIZE());\n        }\n        require(v1);\n        exit;\n    }\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x3659cfe6 == function_selector >> 224) {\n            upgradeTo(address);\n        } else if (0x4f1ef286 == function_selector >> 224) {\n            upgradeToAndCall(address,bytes);\n        } else if (0x5c60da1b == function_selector >> 224) {\n            implementation();\n        } else if (0x8f283970 == function_selector >> 224) {\n            changeAdmin(address);\n        } else if (0xf851a440 == function_selector >> 224) {\n            admin();\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.15 12:21 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _admin; // STORAGE[0x10d6a54a4754c8869d6886b5f5d7fbfa5b4522237ea5c60d11bc4e7a1ff9390b]\nuint256 _fallback; // STORAGE[0x7050c9e0f4ca769c69bd3a8ef740bc37934f8e2c036e5a723fd8ee048ed3f8c3]\n\n// Events\nAdminChanged(address, address);\nUpgraded(address);\n\nfunction implementation() public nonPayable { \n    if (msg.sender != address(_admin)) {\n        v0 = v1 = 0;\n    } else {\n        v0 = _fallback;\n        goto 0x3d3B0x14a;\n    }\n    return address(v0);\n}\n\nfunction changeAdmin(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    if (msg.sender != address(_admin)) {\n        0x5a3();\n        v0 = _fallback.delegatecall(MEM[0 len msg.data.length], MEM[0 len 0]).gas(msg.gas);\n        require(v0 != 0); // checks call status, propagates error data on error\n        return MEM[0 len (RETURNDATASIZE())];\n    } else {\n        require(varg0 != 0, 'Cannot change the admin of a proxy to the zero address');\n        emit AdminChanged(address(_admin), varg0);\n        _admin = varg0;\n        exit;\n    }\n}\n\nfunction admin() public nonPayable { \n    if (msg.sender != address(_admin)) {\n        v0 = v1 = 0;\n    } else {\n        v0 = _admin;\n        goto 0x5a0B0x1f2;\n    }\n    return address(v0);\n}\n\nfunction fallback() public payable { \n    0x5a3();\n    v0 = _fallback.delegatecall(MEM[0 len msg.data.length], MEM[0 len 0]).gas(msg.gas);\n    require(v0 != 0); // checks call status, propagates error data on error\n    return MEM[0 len (RETURNDATASIZE())];\n}\n\nfunction upgradeTo(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    if (msg.sender != address(_admin)) {\n        0x5a3();\n        v0 = _fallback.delegatecall(MEM[0 len msg.data.length], MEM[0 len 0]).gas(msg.gas);\n        require(v0 != 0); // checks call status, propagates error data on error\n        return MEM[0 len (RETURNDATASIZE())];\n    } else {\n        0x6c1(varg0);\n        exit;\n    }\n}\n\nfunction 0x5a3() private { \n    require(msg.sender != address(_admin), 'Cannot call fallback function from the proxy admin');\n    return ;\n}\n\nfunction 0x6c1(uint256 varg0) private { \n    require(varg0.code.size > 0, 'Cannot set a proxy implementation to a non-contract address');\n    _fallback = varg0;\n    v0 = address(varg0);\n    emit Upgraded(v0);\n    return ;\n}\n\nfunction upgradeToAndCall(address varg0, bytes varg1) public payable { \n    require(msg.data.length - 4 >= 64);\n    require(varg1 <= 0x100000000);\n    require(4 + varg1 + 32 <= 4 + (msg.data.length - 4));\n    require(!((varg1.length > 0x100000000) | (36 + varg1 + varg1.length > 4 + (msg.data.length - 4))));\n    if (msg.sender != address(_admin)) {\n        0x5a3();\n        v0 = _fallback.delegatecall(MEM[0 len msg.data.length], MEM[0 len 0]).gas(msg.gas);\n        require(v0 != 0); // checks call status, propagates error data on error\n        return MEM[0 len (RETURNDATASIZE())];\n    } else {\n        0x6c1(varg0);\n        v1, v2 = varg0.delegatecall(MEM[(MEM[64]) len (MEM[64] + varg1.length - MEM[64])], MEM[(MEM[64]) len 0]).gas(msg.gas);\n        if (RETURNDATASIZE() != 0) {\n            v3 = new bytes[](RETURNDATASIZE());\n            v2 = v3.data;\n            RETURNDATACOPY(v2, 0, RETURNDATASIZE());\n        }\n        require(v1);\n        exit;\n    }\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x3659cfe6 == function_selector >> 224) {\n            upgradeTo(address);\n        } else if (0x4f1ef286 == function_selector >> 224) {\n            upgradeToAndCall(address,bytes);\n        } else if (0x5c60da1b == function_selector >> 224) {\n            implementation();\n        } else if (0x8f283970 == function_selector >> 224) {\n            changeAdmin(address);\n        } else if (0xf851a440 == function_selector >> 224) {\n            admin();\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 20.428821086883545,
	"usage": {
		"completion_tokens": 437,
		"prompt_tokens": 1326,
		"total_tokens": 1763
	}
}