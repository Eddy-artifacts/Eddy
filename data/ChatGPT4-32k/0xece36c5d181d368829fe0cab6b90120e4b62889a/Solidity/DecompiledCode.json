{
	"address": "0xece36c5d181d368829fe0cab6b90120e4b62889a",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Based on the decompiled code provided, below is a Solidity contract:\n\n```solidity\npragma solidity ^0.8.0;\n\ncontract ICOContract {\n    string public _name;\n    string public _symbol;\n    uint256 public _totalSupply;\n    address public _icoSender;\n    address public _icoHolder;\n    uint256 public _icoRatio;\n    uint256 public _icoBegintime;\n    uint256 public _icoEndtime;\n    uint8 public _decimals;\n    mapping(address => uint256) public _balanceOf;\n    mapping(address => mapping(address => uint256)) public _allowance;\n\n    event ICO(address indexed sender, uint256 value, uint256 amount);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Withdraw(address indexed from, address indexed to, uint256 amount);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    function approve(address spender, uint256 value) public returns (bool) {\n        _allowance[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        require(value <= _allowance[from][msg.sender]);\n        _allowance[from][msg.sender] -= value;\n        _transfer(from, to, value);\n        return true;\n    }\n\n    function withdraw() public {\n        require(msg.sender == _icoHolder);\n        payable(_icoHolder).transfer(address(this).balance);\n        emit Withdraw(msg.sender, _icoHolder, address(this).balance);\n    }\n    \n    function transfer(address to, uint256 value) public returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowance[owner][spender];\n    }\n\n    function _transfer(address from, address to, uint256 value) private {\n        require(to != address(0));\n        require(_balanceOf[from] >= value);\n        require(_balanceOf[to] + value > _balanceOf[to]);\n\n        _balanceOf[from] -= value;\n        _balanceOf[to] += value;\n        emit Transfer(from, to, value);\n    }\n\n    function ico() public payable {\n        require(block.timestamp >= _icoBegintime && block.timestamp <= _icoEndtime);\n        require(msg.value > 0);\n        uint256 amount = _icoRatio * msg.value;\n        require(_balanceOf[_icoSender] >= amount);\n\n        _transfer(_icoSender, msg.sender, amount);\n        emit ICO(msg.sender, msg.value, amount);\n    }\n}\n```\n\nPlease note that the original decompiled code seems to contain some errors (such as non-existing `nonPayable` keyword, direct memory manipulation, etc.), so I had to make some assumptions to create this contract. This contract might not behave exactly as the original one, but it should be a good starting point.",
				"role": "assistant"
			}
		}
	],
	"created": 1701457753,
	"id": "chatcmpl-8R3AvydjELIeasVRoaUV34FQLX1ep",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.22 03:23 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256[] _name; // STORAGE[0x0]\nuint256[] _symbol; // STORAGE[0x1]\nuint256 _totalSupply; // STORAGE[0x3]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x4]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x5]\nuint256 _icoRatio; // STORAGE[0x6]\nuint256 _icoBegintime; // STORAGE[0x7]\nuint256 _icoEndtime; // STORAGE[0x8]\nuint8 _decimals; // STORAGE[0x2] bytes 0 to 0\nuint160 _icoSender; // STORAGE[0x9] bytes 0 to 19\naddress _icoHolder; // STORAGE[0xa] bytes 0 to 19\n\n// Events\nICO(address, uint256, uint256);\nApproval(address, address, uint256);\nWithdraw(address, address, uint256);\nTransfer(address, address, uint256);\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(varg2 <= _allowance[msg.sender]);\n    _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    0x6e3(varg2, varg1, varg0);\n    return 1;\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction withdraw() public nonPayable { \n    v0 = _icoHolder.call().value((address(this)).balance).gas(2300 * !(address(this)).balance);\n    require(v0);\n    emit Withdraw(msg.sender, _icoHolder, (address(this)).balance);\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[](_symbol.length);\n    v1 = v2 = v0.data;\n    if (_symbol.length) {\n        if (31 < _symbol.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _symbol.length <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v0.data + v5];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction icoHolder() public nonPayable { \n    return _icoHolder;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    0x6e3(varg1, varg0, msg.sender);\n    return 1;\n}\n\nfunction icoRatio() public nonPayable { \n    return _icoRatio;\n}\n\nfunction icoEndtime() public nonPayable { \n    return _icoEndtime;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction icoSender() public nonPayable { \n    return _icoSender;\n}\n\nfunction icoBegintime() public nonPayable { \n    return _icoBegintime;\n}\n\nfunction 0x6e3(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    require(address(varg1));\n    v0 = address(varg2);\n    require(_balanceOf[v0] >= varg0);\n    v1 = address(varg1);\n    require(_balanceOf[v1] + varg0 > _balanceOf[v1]);\n    v2 = address(varg1);\n    v3 = address(varg2);\n    _balanceOf[v3] = _balanceOf[v3] - varg0;\n    v4 = varg0 + _balanceOf[v2];\n    _balanceOf[v2] = v4;\n    assert(_balanceOf[v2] + _balanceOf[v3] == _balanceOf[v3] + v4);\n    emit Transfer(address(varg2), address(varg1), varg0);\n    return ;\n}\n\nfunction ico() public payable { \n    v0 = v1 = block.timestamp >= _icoBegintime;\n    if (v1) {\n        v0 = v2 = block.timestamp <= _icoEndtime;\n    }\n    require(v0);\n    v3 = v4 = !(_icoRatio * msg.value * 10 ** _decimals / 0xde0b6b3a7640000);\n    if (_icoRatio * msg.value * 10 ** _decimals / 0xde0b6b3a7640000) {\n        v3 = v5 = _balanceOf[_icoSender] < _icoRatio * msg.value * 10 ** _decimals / 0xde0b6b3a7640000;\n    }\n    require(!v3);\n    0x6e3(_icoRatio * msg.value * 10 ** _decimals / 0xde0b6b3a7640000, msg.sender, _icoSender);\n    emit ICO(msg.sender, msg.value, _icoRatio * msg.value * 10 ** _decimals / 0xde0b6b3a7640000);\n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[](_name.length);\n    v1 = v2 = v0.data;\n    if (_name.length) {\n        if (31 < _name.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _name.length <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v0.data + v5];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x6fdde03) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x3ccfd60b == function_selector) {\n            withdraw();\n        } else if (0x5d452201 != function_selector) {\n            if (0x70a08231 == function_selector) {\n                balanceOf(address);\n            } else if (0x95d89b41 == function_selector) {\n                symbol();\n            } else if (0xa2ebb20b == function_selector) {\n                icoHolder();\n            } else if (0xa9059cbb == function_selector) {\n                transfer(address,uint256);\n            } else if (0xb3b8c620 == function_selector) {\n                icoRatio();\n            } else if (0xd211fe86 == function_selector) {\n                icoEndtime();\n            } else if (0xdd62ed3e == function_selector) {\n                allowance(address,address);\n            } else if (0xde28fc1d == function_selector) {\n                icoSender();\n            } else if (0xe6136d84 == function_selector) {\n                icoBegintime();\n            }\n        }\n    }\n    ico();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.22 03:23 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256[] _name; // STORAGE[0x0]\nuint256[] _symbol; // STORAGE[0x1]\nuint256 _totalSupply; // STORAGE[0x3]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x4]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x5]\nuint256 _icoRatio; // STORAGE[0x6]\nuint256 _icoBegintime; // STORAGE[0x7]\nuint256 _icoEndtime; // STORAGE[0x8]\nuint8 _decimals; // STORAGE[0x2] bytes 0 to 0\nuint160 _icoSender; // STORAGE[0x9] bytes 0 to 19\naddress _icoHolder; // STORAGE[0xa] bytes 0 to 19\n\n// Events\nICO(address, uint256, uint256);\nApproval(address, address, uint256);\nWithdraw(address, address, uint256);\nTransfer(address, address, uint256);\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(varg2 <= _allowance[msg.sender]);\n    _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    0x6e3(varg2, varg1, varg0);\n    return 1;\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction withdraw() public nonPayable { \n    v0 = _icoHolder.call().value((address(this)).balance).gas(2300 * !(address(this)).balance);\n    require(v0);\n    emit Withdraw(msg.sender, _icoHolder, (address(this)).balance);\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[](_symbol.length);\n    v1 = v2 = v0.data;\n    if (_symbol.length) {\n        if (31 < _symbol.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _symbol.length <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v0.data + v5];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction icoHolder() public nonPayable { \n    return _icoHolder;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    0x6e3(varg1, varg0, msg.sender);\n    return 1;\n}\n\nfunction icoRatio() public nonPayable { \n    return _icoRatio;\n}\n\nfunction icoEndtime() public nonPayable { \n    return _icoEndtime;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction icoSender() public nonPayable { \n    return _icoSender;\n}\n\nfunction icoBegintime() public nonPayable { \n    return _icoBegintime;\n}\n\nfunction 0x6e3(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    require(address(varg1));\n    v0 = address(varg2);\n    require(_balanceOf[v0] >= varg0);\n    v1 = address(varg1);\n    require(_balanceOf[v1] + varg0 > _balanceOf[v1]);\n    v2 = address(varg1);\n    v3 = address(varg2);\n    _balanceOf[v3] = _balanceOf[v3] - varg0;\n    v4 = varg0 + _balanceOf[v2];\n    _balanceOf[v2] = v4;\n    assert(_balanceOf[v2] + _balanceOf[v3] == _balanceOf[v3] + v4);\n    emit Transfer(address(varg2), address(varg1), varg0);\n    return ;\n}\n\nfunction ico() public payable { \n    v0 = v1 = block.timestamp >= _icoBegintime;\n    if (v1) {\n        v0 = v2 = block.timestamp <= _icoEndtime;\n    }\n    require(v0);\n    v3 = v4 = !(_icoRatio * msg.value * 10 ** _decimals / 0xde0b6b3a7640000);\n    if (_icoRatio * msg.value * 10 ** _decimals / 0xde0b6b3a7640000) {\n        v3 = v5 = _balanceOf[_icoSender] < _icoRatio * msg.value * 10 ** _decimals / 0xde0b6b3a7640000;\n    }\n    require(!v3);\n    0x6e3(_icoRatio * msg.value * 10 ** _decimals / 0xde0b6b3a7640000, msg.sender, _icoSender);\n    emit ICO(msg.sender, msg.value, _icoRatio * msg.value * 10 ** _decimals / 0xde0b6b3a7640000);\n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[](_name.length);\n    v1 = v2 = v0.data;\n    if (_name.length) {\n        if (31 < _name.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _name.length <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v0.data + v5];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x6fdde03) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x3ccfd60b == function_selector) {\n            withdraw();\n        } else if (0x5d452201 != function_selector) {\n            if (0x70a08231 == function_selector) {\n                balanceOf(address);\n            } else if (0x95d89b41 == function_selector) {\n                symbol();\n            } else if (0xa2ebb20b == function_selector) {\n                icoHolder();\n            } else if (0xa9059cbb == function_selector) {\n                transfer(address,uint256);\n            } else if (0xb3b8c620 == function_selector) {\n                icoRatio();\n            } else if (0xd211fe86 == function_selector) {\n                icoEndtime();\n            } else if (0xdd62ed3e == function_selector) {\n                allowance(address,address);\n            } else if (0xde28fc1d == function_selector) {\n                icoSender();\n            } else if (0xe6136d84 == function_selector) {\n                icoBegintime();\n            }\n        }\n    }\n    ico();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.22 03:23 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256[] _name; // STORAGE[0x0]\nuint256[] _symbol; // STORAGE[0x1]\nuint256 _totalSupply; // STORAGE[0x3]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x4]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x5]\nuint256 _icoRatio; // STORAGE[0x6]\nuint256 _icoBegintime; // STORAGE[0x7]\nuint256 _icoEndtime; // STORAGE[0x8]\nuint8 _decimals; // STORAGE[0x2] bytes 0 to 0\nuint160 _icoSender; // STORAGE[0x9] bytes 0 to 19\naddress _icoHolder; // STORAGE[0xa] bytes 0 to 19\n\n// Events\nICO(address, uint256, uint256);\nApproval(address, address, uint256);\nWithdraw(address, address, uint256);\nTransfer(address, address, uint256);\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(varg2 <= _allowance[msg.sender]);\n    _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    0x6e3(varg2, varg1, varg0);\n    return 1;\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction withdraw() public nonPayable { \n    v0 = _icoHolder.call().value((address(this)).balance).gas(2300 * !(address(this)).balance);\n    require(v0);\n    emit Withdraw(msg.sender, _icoHolder, (address(this)).balance);\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[](_symbol.length);\n    v1 = v2 = v0.data;\n    if (_symbol.length) {\n        if (31 < _symbol.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _symbol.length <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v0.data + v5];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction icoHolder() public nonPayable { \n    return _icoHolder;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    0x6e3(varg1, varg0, msg.sender);\n    return 1;\n}\n\nfunction icoRatio() public nonPayable { \n    return _icoRatio;\n}\n\nfunction icoEndtime() public nonPayable { \n    return _icoEndtime;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction icoSender() public nonPayable { \n    return _icoSender;\n}\n\nfunction icoBegintime() public nonPayable { \n    return _icoBegintime;\n}\n\nfunction 0x6e3(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    require(address(varg1));\n    v0 = address(varg2);\n    require(_balanceOf[v0] >= varg0);\n    v1 = address(varg1);\n    require(_balanceOf[v1] + varg0 > _balanceOf[v1]);\n    v2 = address(varg1);\n    v3 = address(varg2);\n    _balanceOf[v3] = _balanceOf[v3] - varg0;\n    v4 = varg0 + _balanceOf[v2];\n    _balanceOf[v2] = v4;\n    assert(_balanceOf[v2] + _balanceOf[v3] == _balanceOf[v3] + v4);\n    emit Transfer(address(varg2), address(varg1), varg0);\n    return ;\n}\n\nfunction ico() public payable { \n    v0 = v1 = block.timestamp >= _icoBegintime;\n    if (v1) {\n        v0 = v2 = block.timestamp <= _icoEndtime;\n    }\n    require(v0);\n    v3 = v4 = !(_icoRatio * msg.value * 10 ** _decimals / 0xde0b6b3a7640000);\n    if (_icoRatio * msg.value * 10 ** _decimals / 0xde0b6b3a7640000) {\n        v3 = v5 = _balanceOf[_icoSender] < _icoRatio * msg.value * 10 ** _decimals / 0xde0b6b3a7640000;\n    }\n    require(!v3);\n    0x6e3(_icoRatio * msg.value * 10 ** _decimals / 0xde0b6b3a7640000, msg.sender, _icoSender);\n    emit ICO(msg.sender, msg.value, _icoRatio * msg.value * 10 ** _decimals / 0xde0b6b3a7640000);\n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[](_name.length);\n    v1 = v2 = v0.data;\n    if (_name.length) {\n        if (31 < _name.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _name.length <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v0.data + v5];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x6fdde03) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x3ccfd60b == function_selector) {\n            withdraw();\n        } else if (0x5d452201 != function_selector) {\n            if (0x70a08231 == function_selector) {\n                balanceOf(address);\n            } else if (0x95d89b41 == function_selector) {\n                symbol();\n            } else if (0xa2ebb20b == function_selector) {\n                icoHolder();\n            } else if (0xa9059cbb == function_selector) {\n                transfer(address,uint256);\n            } else if (0xb3b8c620 == function_selector) {\n                icoRatio();\n            } else if (0xd211fe86 == function_selector) {\n                icoEndtime();\n            } else if (0xdd62ed3e == function_selector) {\n                allowance(address,address);\n            } else if (0xde28fc1d == function_selector) {\n                icoSender();\n            } else if (0xe6136d84 == function_selector) {\n                icoBegintime();\n            }\n        }\n    }\n    ico();\n}\n.",
	"status": "1",
	"time_cost": 23.661928176879883,
	"usage": {
		"completion_tokens": 627,
		"prompt_tokens": 2082,
		"total_tokens": 2709
	}
}