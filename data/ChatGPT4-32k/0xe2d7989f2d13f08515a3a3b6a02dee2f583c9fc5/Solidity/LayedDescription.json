{
	"address": "0xe2d7989f2d13f08515a3a3b6a02dee2f583c9fc5",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is a smart contract that follows the given requirements:\n\n```solidity\npragma solidity ^0.6.0;\n\ncontract YourContract {\n    address public owner;\n    address public token;\n    uint256 public cap;\n    uint256 public initialcap;\n    uint256 public start;\n    uint256 public end;\n    address public btctoken;\n    uint256 public sold;\n    uint256 public btcethrate;\n    \n    constructor() payable public {\n        owner = msg.sender;\n        sold = 0x3635c9adc5dea00000;\n        btcethrate = 0x174876e800;\n    }\n    \n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n    \n    function transferTokenOwnership(address _newOwner) public onlyOwner {\n        token.transferOwnership(_newOwner);\n    }\n    \n    function pauseToken() public onlyOwner {\n        token.pause();\n    }\n    \n    function setEthRate(uint256 _rate) public onlyOwner {\n        sold = _rate;\n    }\n    \n    function unpauseToken() public onlyOwner {\n        token.unpause();\n    }\n    \n    function withdrawEth(address payable _to, uint256 _amount) public onlyOwner {\n        require(_to != address(0));\n        _to.transfer(_amount);\n    }\n    \n    function setBtcEthRate(uint256 _rate) public onlyOwner {\n        btcethrate = _rate;\n    }\n    \n    function withdrawBtc(bytes memory _to, uint256 _amount) public onlyOwner {\n        btctoken.burn(_to, _amount);\n    }\n    \n    function burnWithData(address _token, uint256 _amount, bytes memory _data) public onlyOwner {\n        _token.burn(_amount, _data);\n    }\n    \n    function transferOwnership(address newOwner) public onlyOwner {\n        owner = newOwner;\n    }\n    \n    function withdraw(address _token, address _to, uint256 _amount) public onlyOwner {\n        require(_to != address(0));\n        if (_token == address(0)) {\n            _to.transfer(_amount);\n        } else {\n            _token.transfer(_to, _amount);\n        }\n    }\n    \n    function transfer(address _to, uint256 _amount) public onlyOwner {\n        cap = cap - _amount;\n        token.mint(_to, _amount);\n    }\n    \n    fallback() external payable {\n        // implement your logic here\n    }\n    \n    function receive(address _from, uint256 _value, bytes memory _data) public {\n        // implement your logic here\n    }\n    \n    function receiveWithData(bytes memory _data) public payable {\n        // implement your logic here\n    }\n    \n    function onTokenTransfer(address _from, uint256 _value, bytes memory _data) public {\n        // implement your logic here\n    }\n}\n```\nPlease note, this is a template. The functions `fallback()`, `receive()`, `receiveWithData()`, and `onTokenTransfer()` need to be implemented as per your business logic. Also, the actual implementation of the external contract `token` and `btctoken` is not provided. You need to replace `token` and `btctoken` with the actual contract instance.",
				"role": "assistant"
			}
		}
	],
	"created": 1701715886,
	"id": "chatcmpl-8S8KMYLMkoK9OjSh7dQ4bROxbGlza",
	"input_format": "LayedDescription",
	"ir": "For the payable constructor function.\n- the state variable sold will be updated to 0x3635c9adc5dea00000.\n- the state variable btcethrate will be updated to 0x174876e800.\n\nFor the transferTokenOwnership function, it has one argument and its type is address.\n- For owner:\n  - it calls an external function transferOwnership of the external contract token with the first argument.\n\nFor the pauseToken function.\n- For owner:\n  - it calls an external function pause of the external contract token.\n\nFor the setEthRate function, it has one argument and its type is uint256.\n- For owner:\n  - the state variable sold will be updated to the first argument.\n\nFor the unpauseToken function.\n- For owner:\n  - it calls an external function unpause of the external contract token.\n\nFor the withdrawEth function, it has 2 arguments and the type of each argument is as follows: address, uint256.\n- For owner, and the first argument is not 0:\n  - it transfers ether valued the second argument to the first argument.\n\nFor the setBtcEthRate function, it has one argument and its type is uint256.\n- For owner:\n  - the state variable btcethrate will be updated to the first argument.\n\nFor the withdrawBtc function, it has 2 arguments and the type of each argument is as follows: bytes, uint256.\n- For owner:\n  - When 0 is not smaller than the first argument:\n    - it calls an external function burn of the external contract btctoken.\n  - When 0 is smaller than the first argument:\n    - When 32 is not smaller than the first argument:\n      - it calls an external function burn of the external contract btctoken.\n    - When 32 is smaller than the first argument:\n      - When 64 is not smaller than the first argument:\n        - it calls an external function burn of the external contract btctoken.\n      - When 64 is smaller than the first argument:\n        - When 96 is not smaller than the first argument:\n          - it calls an external function burn of the external contract btctoken.\n        - When 96 is smaller than the first argument:\n          - When 128 is not smaller than the first argument:\n            - it calls an external function burn of the external contract btctoken.\n          - When 160 is not smaller than the first argument, and 128 is smaller than the first argument:\n            - it calls an external function burn of the external contract btctoken.\n\nFor the burnWithData function, it has 3 arguments and the type of each argument is as follows: address, uint256, bytes.\n- For owner:\n  - When 0 is not smaller than the length of the third argument:\n    - it calls an external function burn of the first argument.\n  - When 0 is smaller than the length of the third argument:\n    - When 32 is not smaller than the length of the third argument:\n      - it calls an external function burn of the first argument.\n    - When 32 is smaller than the length of the third argument:\n      - When 64 is not smaller than the length of the third argument:\n        - it calls an external function burn of the first argument.\n      - When 64 is smaller than the length of the third argument:\n        - When 96 is not smaller than the length of the third argument:\n          - it calls an external function burn of the first argument.\n        - When 96 is smaller than the length of the third argument:\n          - When 128 is not smaller than the length of the third argument:\n            - it calls an external function burn of the first argument.\n          - When 160 is not smaller than the length of the third argument, and 128 is smaller than the length of the third argument:\n            - it calls an external function burn of the first argument.\n\nFor the transferOwnership function, it has one argument and its type is address.\n- For owner:\n  - the state variable owner will be updated to the first argument.\n\nFor the withdraw function, it has 3 arguments and the type of each argument is as follows: address, address, uint256.\n- For owner, and the second argument is not 0:\n  - When the first argument is 0:\n    - it transfers ether valued the length of the third argument to the second argument.\n  - it calls an external function transfer of the first argument with the following argument list: the second argument, and the length of the third argument.\n\nFor the transfer function, it has 2 arguments and the type of each argument is as follows: address, uint256.\n- For owner:\n  - the state variable cap will be updated to (cap-the second argument).\n  - it calls an external function mint of the external contract token with the following argument list: the first argument, and the second argument.\n\nFor the payable fallback function.\n- When the ether just received (i.e., msg.value) is not 0, and after start, and before end:\n  - When the external contract btctoken equals to 0, and (((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is greater than 0, and (btcethrate*sold) is greater than 0:\n    - When cap is not smaller than ((((((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))+(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)):\n      - it calls an external function mint of the external contract token with the following argument list: caller, and ((((((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))+(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)).\n      - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))-(((((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))).\n    - When (((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is smaller than 0x152d02c7e14af6800000:\n      - When cap is not smaller than (((((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)):\n        - When (((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is smaller than 0xa968163f0a57b400000:\n          - it calls an external function mint of the external contract token with the following argument list: caller, and (((((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)).\n          - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))-((((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)).\n        - When (((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is 0, and (((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is not smaller than 0xa968163f0a57b400000:\n          - it calls an external function mint of the external contract token with the following argument list: caller, and (((((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)).\n          - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))-((((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)).\n      - When cap is not smaller than ((((((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+((75*(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))/100))+(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)), and (((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is not smaller than 0xa968163f0a57b400000, and (((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is not 0:\n        - it calls an external function mint of the external contract token with the following argument list: caller, and ((((((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+((75*(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))/100))+(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)).\n        - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))-(((((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+((75*(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))/100))).\n  - When ((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is greater than 0, and sold is greater than 0, and the external contract btctoken does not equal to 0:\n    - When cap is not smaller than (((((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))+((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)):\n      - it calls an external function mint of the external contract token with the following argument list: caller, and (((((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))+((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)).\n      - the state variable cap will be updated to ((cap-((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))-((((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))).\n    - When ((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is smaller than 0x152d02c7e14af6800000:\n      - When cap is not smaller than ((((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)):\n        - When ((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is smaller than 0xa968163f0a57b400000:\n          - it calls an external function mint of the external contract token with the following argument list: caller, and ((((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)).\n          - the state variable cap will be updated to ((cap-((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))-(((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)).\n        - When ((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is 0, and ((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is not smaller than 0xa968163f0a57b400000:\n          - it calls an external function mint of the external contract token with the following argument list: caller, and ((((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)).\n          - the state variable cap will be updated to ((cap-((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))-(((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)).\n      - When cap is not smaller than (((((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+((75*((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))/100))+((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)), and ((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is not 0, and ((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is not smaller than 0xa968163f0a57b400000:\n        - it calls an external function mint of the external contract token with the following argument list: caller, and (((((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+((75*((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))/100))+((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)).\n        - the state variable cap will be updated to ((cap-((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))-((((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+((75*((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))/100))).\n\nFor the receive function, it has 3 arguments and the type of each argument is as follows: address, uint256, bytes.\n- After start, and the second argument is not 0, and before end:\n  - When 20 does not equal to the length of the third argument, and the length of the third argument is 0:\n    - When the external contract btctoken equals to the first argument, and (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is greater than 0, and (btcethrate*sold) is greater than 0:\n      - When cap is not smaller than ((((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)+(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))+(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)):\n        - it calls an external function mint of the external contract token.\n        - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))-(((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)+(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))).\n      - When (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is smaller than 0x152d02c7e14af6800000:\n        - When cap is not smaller than (((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)+(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)):\n          - When (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is smaller than 0xa968163f0a57b400000:\n            - it calls an external function mint of the external contract token.\n            - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))-((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)).\n          - When (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is not smaller than 0xa968163f0a57b400000, and (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is 0:\n            - it calls an external function mint of the external contract token.\n            - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))-((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)).\n        - When (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is not 0, and (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is not smaller than 0xa968163f0a57b400000, and cap is not smaller than ((((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)+((75*(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))/100))+(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)):\n          - it calls an external function mint of the external contract token.\n          - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))-(((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)+((75*(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))/100))).\n    - When sold is greater than 0, and the external contract btctoken does not equal to the first argument, and the first argument is 0, and ((sold*the second argument)/0xde0b6b3a7640000) is greater than 0:\n      - When cap is not smaller than (((((sold*the second argument)/0xde0b6b3a7640000)/2)+((sold*the second argument)/0xde0b6b3a7640000))+((sold*the second argument)/0xde0b6b3a7640000)):\n        - it calls an external function mint of the external contract token.\n        - the state variable cap will be updated to ((cap-((sold*the second argument)/0xde0b6b3a7640000))-((((sold*the second argument)/0xde0b6b3a7640000)/2)+((sold*the second argument)/0xde0b6b3a7640000))).\n      - When ((sold*the second argument)/0xde0b6b3a7640000) is smaller than 0x152d02c7e14af6800000:\n        - When cap is not smaller than ((((sold*the second argument)/0xde0b6b3a7640000)/2)+((sold*the second argument)/0xde0b6b3a7640000)):\n          - When ((sold*the second argument)/0xde0b6b3a7640000) is smaller than 0xa968163f0a57b400000:\n            - it calls an external function mint of the external contract token.\n            - the state variable cap will be updated to ((cap-((sold*the second argument)/0xde0b6b3a7640000))-(((sold*the second argument)/0xde0b6b3a7640000)/2)).\n          - When ((sold*the second argument)/0xde0b6b3a7640000) is 0, and ((sold*the second argument)/0xde0b6b3a7640000) is not smaller than 0xa968163f0a57b400000:\n            - it calls an external function mint of the external contract token.\n            - the state variable cap will be updated to ((cap-((sold*the second argument)/0xde0b6b3a7640000))-(((sold*the second argument)/0xde0b6b3a7640000)/2)).\n        - When ((sold*the second argument)/0xde0b6b3a7640000) is not 0, and ((sold*the second argument)/0xde0b6b3a7640000) is not smaller than 0xa968163f0a57b400000, and cap is not smaller than (((((sold*the second argument)/0xde0b6b3a7640000)/2)+((75*((sold*the second argument)/0xde0b6b3a7640000))/100))+((sold*the second argument)/0xde0b6b3a7640000)):\n          - it calls an external function mint of the external contract token.\n          - the state variable cap will be updated to ((cap-((sold*the second argument)/0xde0b6b3a7640000))-((((sold*the second argument)/0xde0b6b3a7640000)/2)+((75*((sold*the second argument)/0xde0b6b3a7640000))/100))).\n  - When 20 is not greater than the length of the third argument, and 20 equals to the length of the third argument:\n    - When the external contract btctoken equals to the first argument, and (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is greater than 0, and (btcethrate*sold) is greater than 0:\n      - When cap is not smaller than ((((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)+(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))+(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)):\n        - it calls an external function mint of the external contract token.\n        - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))-(((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)+(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))).\n      - When (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is smaller than 0x152d02c7e14af6800000:\n        - When cap is not smaller than (((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)+(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)):\n          - When (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is smaller than 0xa968163f0a57b400000:\n            - it calls an external function mint of the external contract token.\n            - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))-((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)).\n          - When (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is not smaller than 0xa968163f0a57b400000, and (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is 0:\n            - it calls an external function mint of the external contract token.\n            - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))-((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)).\n        - When (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is not 0, and (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is not smaller than 0xa968163f0a57b400000, and cap is not smaller than ((((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)+((75*(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))/100))+(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)):\n          - it calls an external function mint of the external contract token.\n          - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))-(((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)+((75*(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))/100))).\n    - When sold is greater than 0, and the external contract btctoken does not equal to the first argument, and the first argument is 0, and ((sold*the second argument)/0xde0b6b3a7640000) is greater than 0:\n      - When cap is not smaller than (((((sold*the second argument)/0xde0b6b3a7640000)/2)+((sold*the second argument)/0xde0b6b3a7640000))+((sold*the second argument)/0xde0b6b3a7640000)):\n        - it calls an external function mint of the external contract token.\n        - the state variable cap will be updated to ((cap-((sold*the second argument)/0xde0b6b3a7640000))-((((sold*the second argument)/0xde0b6b3a7640000)/2)+((sold*the second argument)/0xde0b6b3a7640000))).\n      - When ((sold*the second argument)/0xde0b6b3a7640000) is smaller than 0x152d02c7e14af6800000:\n        - When cap is not smaller than ((((sold*the second argument)/0xde0b6b3a7640000)/2)+((sold*the second argument)/0xde0b6b3a7640000)):\n          - When ((sold*the second argument)/0xde0b6b3a7640000) is smaller than 0xa968163f0a57b400000:\n            - it calls an external function mint of the external contract token.\n            - the state variable cap will be updated to ((cap-((sold*the second argument)/0xde0b6b3a7640000))-(((sold*the second argument)/0xde0b6b3a7640000)/2)).\n          - When ((sold*the second argument)/0xde0b6b3a7640000) is 0, and ((sold*the second argument)/0xde0b6b3a7640000) is not smaller than 0xa968163f0a57b400000:\n            - it calls an external function mint of the external contract token.\n            - the state variable cap will be updated to ((cap-((sold*the second argument)/0xde0b6b3a7640000))-(((sold*the second argument)/0xde0b6b3a7640000)/2)).\n        - When ((sold*the second argument)/0xde0b6b3a7640000) is not 0, and ((sold*the second argument)/0xde0b6b3a7640000) is not smaller than 0xa968163f0a57b400000, and cap is not smaller than (((((sold*the second argument)/0xde0b6b3a7640000)/2)+((75*((sold*the second argument)/0xde0b6b3a7640000))/100))+((sold*the second argument)/0xde0b6b3a7640000)):\n          - it calls an external function mint of the external contract token.\n          - the state variable cap will be updated to ((cap-((sold*the second argument)/0xde0b6b3a7640000))-((((sold*the second argument)/0xde0b6b3a7640000)/2)+((75*((sold*the second argument)/0xde0b6b3a7640000))/100))).\n- it calls an external function transferFrom of the first argument.\n\nFor the payable receiveWithData function, it has one argument and its type is bytes.\n- When the ether just received (i.e., msg.value) is not 0, and after start, and before end:\n  - When 20 does not equal to the first argument, and the first argument is 0:\n    - When the external contract btctoken equals to 0, and (((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is greater than 0, and (btcethrate*sold) is greater than 0:\n      - When cap is not smaller than ((((((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))+(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)):\n        - it calls an external function mint of the external contract token.\n        - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))-(((((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))).\n      - When (((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is smaller than 0x152d02c7e14af6800000:\n        - When cap is not smaller than (((((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)):\n          - When (((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is smaller than 0xa968163f0a57b400000:\n            - it calls an external function mint of the external contract token.\n            - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))-((((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)).\n          - When (((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is 0, and (((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is not smaller than 0xa968163f0a57b400000:\n            - it calls an external function mint of the external contract token.\n            - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))-((((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)).\n        - When cap is not smaller than ((((((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+((75*(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))/100))+(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)), and (((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is not smaller than 0xa968163f0a57b400000, and (((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is not 0:\n          - it calls an external function mint of the external contract token.\n          - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))-(((((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+((75*(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))/100))).\n    - When ((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is greater than 0, and sold is greater than 0, and the external contract btctoken does not equal to 0:\n      - When cap is not smaller than (((((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))+((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)):\n        - it calls an external function mint of the external contract token.\n        - the state variable cap will be updated to ((cap-((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))-((((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))).\n      - When ((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is smaller than 0x152d02c7e14af6800000:\n        - When cap is not smaller than ((((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)):\n          - When ((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is smaller than 0xa968163f0a57b400000:\n            - it calls an external function mint of the external contract token.\n            - the state variable cap will be updated to ((cap-((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))-(((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)).\n          - When ((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is 0, and ((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is not smaller than 0xa968163f0a57b400000:\n            - it calls an external function mint of the external contract token.\n            - the state variable cap will be updated to ((cap-((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))-(((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)).\n        - When cap is not smaller than (((((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+((75*((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))/100))+((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)), and ((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is not 0, and ((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is not smaller than 0xa968163f0a57b400000:\n          - it calls an external function mint of the external contract token.\n          - the state variable cap will be updated to ((cap-((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))-((((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+((75*((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))/100))).\n  - When 20 equals to the first argument, and 20 is not greater than the first argument:\n    - When the external contract btctoken equals to 0, and (((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is greater than 0, and (btcethrate*sold) is greater than 0:\n      - When cap is not smaller than ((((((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))+(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)):\n        - it calls an external function mint of the external contract token.\n        - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))-(((((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))).\n      - When (((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is smaller than 0x152d02c7e14af6800000:\n        - When cap is not smaller than (((((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)):\n          - When (((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is smaller than 0xa968163f0a57b400000:\n            - it calls an external function mint of the external contract token.\n            - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))-((((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)).\n          - When (((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is 0, and (((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is not smaller than 0xa968163f0a57b400000:\n            - it calls an external function mint of the external contract token.\n            - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))-((((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)).\n        - When cap is not smaller than ((((((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+((75*(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))/100))+(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)), and (((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is not smaller than 0xa968163f0a57b400000, and (((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is not 0:\n          - it calls an external function mint of the external contract token.\n          - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))-(((((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+((75*(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))/100))).\n    - When ((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is greater than 0, and sold is greater than 0, and the external contract btctoken does not equal to 0:\n      - When cap is not smaller than (((((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))+((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)):\n        - it calls an external function mint of the external contract token.\n        - the state variable cap will be updated to ((cap-((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))-((((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))).\n      - When ((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is smaller than 0x152d02c7e14af6800000:\n        - When cap is not smaller than ((((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)):\n          - When ((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is smaller than 0xa968163f0a57b400000:\n            - it calls an external function mint of the external contract token.\n            - the state variable cap will be updated to ((cap-((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))-(((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)).\n          - When ((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is 0, and ((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is not smaller than 0xa968163f0a57b400000:\n            - it calls an external function mint of the external contract token.\n            - the state variable cap will be updated to ((cap-((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))-(((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)).\n        - When cap is not smaller than (((((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+((75*((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))/100))+((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)), and ((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is not 0, and ((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is not smaller than 0xa968163f0a57b400000:\n          - it calls an external function mint of the external contract token.\n          - the state variable cap will be updated to ((cap-((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))-((((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+((75*((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))/100))).\n\nFor the onTokenTransfer function, it has 3 arguments and the type of each argument is as follows: address, uint256, bytes.\n- For the external contract btctoken, and after start, and the second argument is not 0, and (btcethrate*sold) is greater than 0, and (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is greater than 0, and before end:\n  - When 20 does not equal to the length of the third argument, and the length of the third argument is 0:\n    - When cap is not smaller than ((((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)+(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))+(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)):\n      - it calls an external function mint of the external contract token.\n      - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))-(((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)+(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))).\n    - When (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is smaller than 0x152d02c7e14af6800000:\n      - When cap is not smaller than (((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)+(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)):\n        - When (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is smaller than 0xa968163f0a57b400000:\n          - it calls an external function mint of the external contract token.\n          - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))-((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)).\n        - When (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is not smaller than 0xa968163f0a57b400000, and (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is 0:\n          - it calls an external function mint of the external contract token.\n          - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))-((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)).\n      - When (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is not 0, and (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is not smaller than 0xa968163f0a57b400000, and cap is not smaller than ((((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)+((75*(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))/100))+(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)):\n        - it calls an external function mint of the external contract token.\n        - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))-(((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)+((75*(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))/100))).\n  - When 20 is not greater than the length of the third argument, and 20 equals to the length of the third argument:\n    - When cap is not smaller than ((((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)+(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))+(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)):\n      - it calls an external function mint of the external contract token.\n      - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))-(((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)+(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))).\n    - When (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is smaller than 0x152d02c7e14af6800000:\n      - When cap is not smaller than (((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)+(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)):\n        - When (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is smaller than 0xa968163f0a57b400000:\n          - it calls an external function mint of the external contract token.\n          - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))-((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)).\n        - When (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is not smaller than 0xa968163f0a57b400000, and (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is 0:\n          - it calls an external function mint of the external contract token.\n          - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))-((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)).\n      - When (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is not 0, and (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is not smaller than 0xa968163f0a57b400000, and cap is not smaller than ((((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)+((75*(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))/100))+(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)):\n        - it calls an external function mint of the external contract token.\n        - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))-(((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)+((75*(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))/100))).\n\nFor the tokenFallback function, it has 3 arguments and the type of each argument is as follows: address, uint256, bytes.\n- For the external contract btctoken, and after start, and the second argument is not 0, and (btcethrate*sold) is greater than 0, and (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is greater than 0, and before end:\n  - When 20 does not equal to the length of the third argument, and the length of the third argument is 0:\n    - When cap is not smaller than ((((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)+(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))+(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)):\n      - it calls an external function mint of the external contract token.\n      - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))-(((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)+(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))).\n    - When (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is smaller than 0x152d02c7e14af6800000:\n      - When cap is not smaller than (((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)+(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)):\n        - When (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is smaller than 0xa968163f0a57b400000:\n          - it calls an external function mint of the external contract token.\n          - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))-((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)).\n        - When (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is not smaller than 0xa968163f0a57b400000, and (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is 0:\n          - it calls an external function mint of the external contract token.\n          - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))-((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)).\n      - When (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is not 0, and (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is not smaller than 0xa968163f0a57b400000, and cap is not smaller than ((((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)+((75*(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))/100))+(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)):\n        - it calls an external function mint of the external contract token.\n        - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))-(((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)+((75*(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))/100))).\n  - When 20 is not greater than the length of the third argument, and 20 equals to the length of the third argument:\n    - When cap is not smaller than ((((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)+(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))+(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)):\n      - it calls an external function mint of the external contract token.\n      - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))-(((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)+(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))).\n    - When (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is smaller than 0x152d02c7e14af6800000:\n      - When cap is not smaller than (((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)+(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)):\n        - When (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is smaller than 0xa968163f0a57b400000:\n          - it calls an external function mint of the external contract token.\n          - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))-((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)).\n        - When (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is not smaller than 0xa968163f0a57b400000, and (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is 0:\n          - it calls an external function mint of the external contract token.\n          - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))-((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)).\n      - When (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is not 0, and (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is not smaller than 0xa968163f0a57b400000, and cap is not smaller than ((((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)+((75*(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))/100))+(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)):\n        - it calls an external function mint of the external contract token.\n        - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))-(((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)+((75*(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))/100))).\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following contract descriptions. Some state variables are provided to help you develop.",
			"role": "system"
		},
		{
			"content": "The following is the description of the contract logic: For the payable constructor function.\n- the state variable sold will be updated to 0x3635c9adc5dea00000.\n- the state variable btcethrate will be updated to 0x174876e800.\n\nFor the transferTokenOwnership function, it has one argument and its type is address.\n- For owner:\n  - it calls an external function transferOwnership of the external contract token with the first argument.\n\nFor the pauseToken function.\n- For owner:\n  - it calls an external function pause of the external contract token.\n\nFor the setEthRate function, it has one argument and its type is uint256.\n- For owner:\n  - the state variable sold will be updated to the first argument.\n\nFor the unpauseToken function.\n- For owner:\n  - it calls an external function unpause of the external contract token.\n\nFor the withdrawEth function, it has 2 arguments and the type of each argument is as follows: address, uint256.\n- For owner, and the first argument is not 0:\n  - it transfers ether valued the second argument to the first argument.\n\nFor the setBtcEthRate function, it has one argument and its type is uint256.\n- For owner:\n  - the state variable btcethrate will be updated to the first argument.\n\nFor the withdrawBtc function, it has 2 arguments and the type of each argument is as follows: bytes, uint256.\n- For owner:\n  - When 0 is not smaller than the first argument:\n    - it calls an external function burn of the external contract btctoken.\n  - When 0 is smaller than the first argument:\n    - When 32 is not smaller than the first argument:\n      - it calls an external function burn of the external contract btctoken.\n    - When 32 is smaller than the first argument:\n      - When 64 is not smaller than the first argument:\n        - it calls an external function burn of the external contract btctoken.\n      - When 64 is smaller than the first argument:\n        - When 96 is not smaller than the first argument:\n          - it calls an external function burn of the external contract btctoken.\n        - When 96 is smaller than the first argument:\n          - When 128 is not smaller than the first argument:\n            - it calls an external function burn of the external contract btctoken.\n          - When 160 is not smaller than the first argument, and 128 is smaller than the first argument:\n            - it calls an external function burn of the external contract btctoken.\n\nFor the burnWithData function, it has 3 arguments and the type of each argument is as follows: address, uint256, bytes.\n- For owner:\n  - When 0 is not smaller than the length of the third argument:\n    - it calls an external function burn of the first argument.\n  - When 0 is smaller than the length of the third argument:\n    - When 32 is not smaller than the length of the third argument:\n      - it calls an external function burn of the first argument.\n    - When 32 is smaller than the length of the third argument:\n      - When 64 is not smaller than the length of the third argument:\n        - it calls an external function burn of the first argument.\n      - When 64 is smaller than the length of the third argument:\n        - When 96 is not smaller than the length of the third argument:\n          - it calls an external function burn of the first argument.\n        - When 96 is smaller than the length of the third argument:\n          - When 128 is not smaller than the length of the third argument:\n            - it calls an external function burn of the first argument.\n          - When 160 is not smaller than the length of the third argument, and 128 is smaller than the length of the third argument:\n            - it calls an external function burn of the first argument.\n\nFor the transferOwnership function, it has one argument and its type is address.\n- For owner:\n  - the state variable owner will be updated to the first argument.\n\nFor the withdraw function, it has 3 arguments and the type of each argument is as follows: address, address, uint256.\n- For owner, and the second argument is not 0:\n  - When the first argument is 0:\n    - it transfers ether valued the length of the third argument to the second argument.\n  - it calls an external function transfer of the first argument with the following argument list: the second argument, and the length of the third argument.\n\nFor the transfer function, it has 2 arguments and the type of each argument is as follows: address, uint256.\n- For owner:\n  - the state variable cap will be updated to (cap-the second argument).\n  - it calls an external function mint of the external contract token with the following argument list: the first argument, and the second argument.\n\nFor the payable fallback function.\n- When the ether just received (i.e., msg.value) is not 0, and after start, and before end:\n  - When the external contract btctoken equals to 0, and (((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is greater than 0, and (btcethrate*sold) is greater than 0:\n    - When cap is not smaller than ((((((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))+(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)):\n      - it calls an external function mint of the external contract token with the following argument list: caller, and ((((((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))+(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)).\n      - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))-(((((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))).\n    - When (((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is smaller than 0x152d02c7e14af6800000:\n      - When cap is not smaller than (((((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)):\n        - When (((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is smaller than 0xa968163f0a57b400000:\n          - it calls an external function mint of the external contract token with the following argument list: caller, and (((((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)).\n          - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))-((((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)).\n        - When (((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is 0, and (((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is not smaller than 0xa968163f0a57b400000:\n          - it calls an external function mint of the external contract token with the following argument list: caller, and (((((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)).\n          - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))-((((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)).\n      - When cap is not smaller than ((((((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+((75*(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))/100))+(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)), and (((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is not smaller than 0xa968163f0a57b400000, and (((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is not 0:\n        - it calls an external function mint of the external contract token with the following argument list: caller, and ((((((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+((75*(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))/100))+(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)).\n        - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))-(((((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+((75*(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))/100))).\n  - When ((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is greater than 0, and sold is greater than 0, and the external contract btctoken does not equal to 0:\n    - When cap is not smaller than (((((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))+((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)):\n      - it calls an external function mint of the external contract token with the following argument list: caller, and (((((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))+((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)).\n      - the state variable cap will be updated to ((cap-((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))-((((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))).\n    - When ((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is smaller than 0x152d02c7e14af6800000:\n      - When cap is not smaller than ((((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)):\n        - When ((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is smaller than 0xa968163f0a57b400000:\n          - it calls an external function mint of the external contract token with the following argument list: caller, and ((((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)).\n          - the state variable cap will be updated to ((cap-((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))-(((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)).\n        - When ((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is 0, and ((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is not smaller than 0xa968163f0a57b400000:\n          - it calls an external function mint of the external contract token with the following argument list: caller, and ((((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)).\n          - the state variable cap will be updated to ((cap-((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))-(((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)).\n      - When cap is not smaller than (((((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+((75*((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))/100))+((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)), and ((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is not 0, and ((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is not smaller than 0xa968163f0a57b400000:\n        - it calls an external function mint of the external contract token with the following argument list: caller, and (((((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+((75*((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))/100))+((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)).\n        - the state variable cap will be updated to ((cap-((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))-((((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+((75*((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))/100))).\n\nFor the receive function, it has 3 arguments and the type of each argument is as follows: address, uint256, bytes.\n- After start, and the second argument is not 0, and before end:\n  - When 20 does not equal to the length of the third argument, and the length of the third argument is 0:\n    - When the external contract btctoken equals to the first argument, and (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is greater than 0, and (btcethrate*sold) is greater than 0:\n      - When cap is not smaller than ((((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)+(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))+(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)):\n        - it calls an external function mint of the external contract token.\n        - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))-(((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)+(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))).\n      - When (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is smaller than 0x152d02c7e14af6800000:\n        - When cap is not smaller than (((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)+(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)):\n          - When (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is smaller than 0xa968163f0a57b400000:\n            - it calls an external function mint of the external contract token.\n            - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))-((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)).\n          - When (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is not smaller than 0xa968163f0a57b400000, and (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is 0:\n            - it calls an external function mint of the external contract token.\n            - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))-((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)).\n        - When (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is not 0, and (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is not smaller than 0xa968163f0a57b400000, and cap is not smaller than ((((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)+((75*(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))/100))+(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)):\n          - it calls an external function mint of the external contract token.\n          - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))-(((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)+((75*(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))/100))).\n    - When sold is greater than 0, and the external contract btctoken does not equal to the first argument, and the first argument is 0, and ((sold*the second argument)/0xde0b6b3a7640000) is greater than 0:\n      - When cap is not smaller than (((((sold*the second argument)/0xde0b6b3a7640000)/2)+((sold*the second argument)/0xde0b6b3a7640000))+((sold*the second argument)/0xde0b6b3a7640000)):\n        - it calls an external function mint of the external contract token.\n        - the state variable cap will be updated to ((cap-((sold*the second argument)/0xde0b6b3a7640000))-((((sold*the second argument)/0xde0b6b3a7640000)/2)+((sold*the second argument)/0xde0b6b3a7640000))).\n      - When ((sold*the second argument)/0xde0b6b3a7640000) is smaller than 0x152d02c7e14af6800000:\n        - When cap is not smaller than ((((sold*the second argument)/0xde0b6b3a7640000)/2)+((sold*the second argument)/0xde0b6b3a7640000)):\n          - When ((sold*the second argument)/0xde0b6b3a7640000) is smaller than 0xa968163f0a57b400000:\n            - it calls an external function mint of the external contract token.\n            - the state variable cap will be updated to ((cap-((sold*the second argument)/0xde0b6b3a7640000))-(((sold*the second argument)/0xde0b6b3a7640000)/2)).\n          - When ((sold*the second argument)/0xde0b6b3a7640000) is 0, and ((sold*the second argument)/0xde0b6b3a7640000) is not smaller than 0xa968163f0a57b400000:\n            - it calls an external function mint of the external contract token.\n            - the state variable cap will be updated to ((cap-((sold*the second argument)/0xde0b6b3a7640000))-(((sold*the second argument)/0xde0b6b3a7640000)/2)).\n        - When ((sold*the second argument)/0xde0b6b3a7640000) is not 0, and ((sold*the second argument)/0xde0b6b3a7640000) is not smaller than 0xa968163f0a57b400000, and cap is not smaller than (((((sold*the second argument)/0xde0b6b3a7640000)/2)+((75*((sold*the second argument)/0xde0b6b3a7640000))/100))+((sold*the second argument)/0xde0b6b3a7640000)):\n          - it calls an external function mint of the external contract token.\n          - the state variable cap will be updated to ((cap-((sold*the second argument)/0xde0b6b3a7640000))-((((sold*the second argument)/0xde0b6b3a7640000)/2)+((75*((sold*the second argument)/0xde0b6b3a7640000))/100))).\n  - When 20 is not greater than the length of the third argument, and 20 equals to the length of the third argument:\n    - When the external contract btctoken equals to the first argument, and (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is greater than 0, and (btcethrate*sold) is greater than 0:\n      - When cap is not smaller than ((((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)+(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))+(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)):\n        - it calls an external function mint of the external contract token.\n        - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))-(((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)+(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))).\n      - When (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is smaller than 0x152d02c7e14af6800000:\n        - When cap is not smaller than (((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)+(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)):\n          - When (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is smaller than 0xa968163f0a57b400000:\n            - it calls an external function mint of the external contract token.\n            - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))-((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)).\n          - When (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is not smaller than 0xa968163f0a57b400000, and (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is 0:\n            - it calls an external function mint of the external contract token.\n            - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))-((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)).\n        - When (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is not 0, and (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is not smaller than 0xa968163f0a57b400000, and cap is not smaller than ((((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)+((75*(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))/100))+(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)):\n          - it calls an external function mint of the external contract token.\n          - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))-(((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)+((75*(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))/100))).\n    - When sold is greater than 0, and the external contract btctoken does not equal to the first argument, and the first argument is 0, and ((sold*the second argument)/0xde0b6b3a7640000) is greater than 0:\n      - When cap is not smaller than (((((sold*the second argument)/0xde0b6b3a7640000)/2)+((sold*the second argument)/0xde0b6b3a7640000))+((sold*the second argument)/0xde0b6b3a7640000)):\n        - it calls an external function mint of the external contract token.\n        - the state variable cap will be updated to ((cap-((sold*the second argument)/0xde0b6b3a7640000))-((((sold*the second argument)/0xde0b6b3a7640000)/2)+((sold*the second argument)/0xde0b6b3a7640000))).\n      - When ((sold*the second argument)/0xde0b6b3a7640000) is smaller than 0x152d02c7e14af6800000:\n        - When cap is not smaller than ((((sold*the second argument)/0xde0b6b3a7640000)/2)+((sold*the second argument)/0xde0b6b3a7640000)):\n          - When ((sold*the second argument)/0xde0b6b3a7640000) is smaller than 0xa968163f0a57b400000:\n            - it calls an external function mint of the external contract token.\n            - the state variable cap will be updated to ((cap-((sold*the second argument)/0xde0b6b3a7640000))-(((sold*the second argument)/0xde0b6b3a7640000)/2)).\n          - When ((sold*the second argument)/0xde0b6b3a7640000) is 0, and ((sold*the second argument)/0xde0b6b3a7640000) is not smaller than 0xa968163f0a57b400000:\n            - it calls an external function mint of the external contract token.\n            - the state variable cap will be updated to ((cap-((sold*the second argument)/0xde0b6b3a7640000))-(((sold*the second argument)/0xde0b6b3a7640000)/2)).\n        - When ((sold*the second argument)/0xde0b6b3a7640000) is not 0, and ((sold*the second argument)/0xde0b6b3a7640000) is not smaller than 0xa968163f0a57b400000, and cap is not smaller than (((((sold*the second argument)/0xde0b6b3a7640000)/2)+((75*((sold*the second argument)/0xde0b6b3a7640000))/100))+((sold*the second argument)/0xde0b6b3a7640000)):\n          - it calls an external function mint of the external contract token.\n          - the state variable cap will be updated to ((cap-((sold*the second argument)/0xde0b6b3a7640000))-((((sold*the second argument)/0xde0b6b3a7640000)/2)+((75*((sold*the second argument)/0xde0b6b3a7640000))/100))).\n- it calls an external function transferFrom of the first argument.\n\nFor the payable receiveWithData function, it has one argument and its type is bytes.\n- When the ether just received (i.e., msg.value) is not 0, and after start, and before end:\n  - When 20 does not equal to the first argument, and the first argument is 0:\n    - When the external contract btctoken equals to 0, and (((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is greater than 0, and (btcethrate*sold) is greater than 0:\n      - When cap is not smaller than ((((((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))+(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)):\n        - it calls an external function mint of the external contract token.\n        - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))-(((((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))).\n      - When (((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is smaller than 0x152d02c7e14af6800000:\n        - When cap is not smaller than (((((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)):\n          - When (((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is smaller than 0xa968163f0a57b400000:\n            - it calls an external function mint of the external contract token.\n            - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))-((((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)).\n          - When (((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is 0, and (((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is not smaller than 0xa968163f0a57b400000:\n            - it calls an external function mint of the external contract token.\n            - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))-((((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)).\n        - When cap is not smaller than ((((((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+((75*(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))/100))+(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)), and (((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is not smaller than 0xa968163f0a57b400000, and (((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is not 0:\n          - it calls an external function mint of the external contract token.\n          - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))-(((((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+((75*(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))/100))).\n    - When ((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is greater than 0, and sold is greater than 0, and the external contract btctoken does not equal to 0:\n      - When cap is not smaller than (((((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))+((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)):\n        - it calls an external function mint of the external contract token.\n        - the state variable cap will be updated to ((cap-((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))-((((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))).\n      - When ((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is smaller than 0x152d02c7e14af6800000:\n        - When cap is not smaller than ((((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)):\n          - When ((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is smaller than 0xa968163f0a57b400000:\n            - it calls an external function mint of the external contract token.\n            - the state variable cap will be updated to ((cap-((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))-(((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)).\n          - When ((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is 0, and ((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is not smaller than 0xa968163f0a57b400000:\n            - it calls an external function mint of the external contract token.\n            - the state variable cap will be updated to ((cap-((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))-(((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)).\n        - When cap is not smaller than (((((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+((75*((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))/100))+((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)), and ((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is not 0, and ((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is not smaller than 0xa968163f0a57b400000:\n          - it calls an external function mint of the external contract token.\n          - the state variable cap will be updated to ((cap-((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))-((((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+((75*((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))/100))).\n  - When 20 equals to the first argument, and 20 is not greater than the first argument:\n    - When the external contract btctoken equals to 0, and (((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is greater than 0, and (btcethrate*sold) is greater than 0:\n      - When cap is not smaller than ((((((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))+(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)):\n        - it calls an external function mint of the external contract token.\n        - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))-(((((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))).\n      - When (((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is smaller than 0x152d02c7e14af6800000:\n        - When cap is not smaller than (((((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)):\n          - When (((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is smaller than 0xa968163f0a57b400000:\n            - it calls an external function mint of the external contract token.\n            - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))-((((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)).\n          - When (((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is 0, and (((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is not smaller than 0xa968163f0a57b400000:\n            - it calls an external function mint of the external contract token.\n            - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))-((((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)).\n        - When cap is not smaller than ((((((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+((75*(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))/100))+(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)), and (((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is not smaller than 0xa968163f0a57b400000, and (((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is not 0:\n          - it calls an external function mint of the external contract token.\n          - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))-(((((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+((75*(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))/100))).\n    - When ((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is greater than 0, and sold is greater than 0, and the external contract btctoken does not equal to 0:\n      - When cap is not smaller than (((((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))+((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)):\n        - it calls an external function mint of the external contract token.\n        - the state variable cap will be updated to ((cap-((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))-((((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))).\n      - When ((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is smaller than 0x152d02c7e14af6800000:\n        - When cap is not smaller than ((((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)):\n          - When ((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is smaller than 0xa968163f0a57b400000:\n            - it calls an external function mint of the external contract token.\n            - the state variable cap will be updated to ((cap-((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))-(((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)).\n          - When ((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is 0, and ((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is not smaller than 0xa968163f0a57b400000:\n            - it calls an external function mint of the external contract token.\n            - the state variable cap will be updated to ((cap-((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))-(((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)).\n        - When cap is not smaller than (((((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+((75*((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))/100))+((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)), and ((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is not 0, and ((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is not smaller than 0xa968163f0a57b400000:\n          - it calls an external function mint of the external contract token.\n          - the state variable cap will be updated to ((cap-((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))-((((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+((75*((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))/100))).\n\nFor the onTokenTransfer function, it has 3 arguments and the type of each argument is as follows: address, uint256, bytes.\n- For the external contract btctoken, and after start, and the second argument is not 0, and (btcethrate*sold) is greater than 0, and (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is greater than 0, and before end:\n  - When 20 does not equal to the length of the third argument, and the length of the third argument is 0:\n    - When cap is not smaller than ((((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)+(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))+(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)):\n      - it calls an external function mint of the external contract token.\n      - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))-(((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)+(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))).\n    - When (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is smaller than 0x152d02c7e14af6800000:\n      - When cap is not smaller than (((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)+(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)):\n        - When (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is smaller than 0xa968163f0a57b400000:\n          - it calls an external function mint of the external contract token.\n          - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))-((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)).\n        - When (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is not smaller than 0xa968163f0a57b400000, and (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is 0:\n          - it calls an external function mint of the external contract token.\n          - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))-((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)).\n      - When (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is not 0, and (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is not smaller than 0xa968163f0a57b400000, and cap is not smaller than ((((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)+((75*(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))/100))+(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)):\n        - it calls an external function mint of the external contract token.\n        - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))-(((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)+((75*(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))/100))).\n  - When 20 is not greater than the length of the third argument, and 20 equals to the length of the third argument:\n    - When cap is not smaller than ((((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)+(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))+(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)):\n      - it calls an external function mint of the external contract token.\n      - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))-(((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)+(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))).\n    - When (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is smaller than 0x152d02c7e14af6800000:\n      - When cap is not smaller than (((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)+(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)):\n        - When (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is smaller than 0xa968163f0a57b400000:\n          - it calls an external function mint of the external contract token.\n          - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))-((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)).\n        - When (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is not smaller than 0xa968163f0a57b400000, and (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is 0:\n          - it calls an external function mint of the external contract token.\n          - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))-((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)).\n      - When (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is not 0, and (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is not smaller than 0xa968163f0a57b400000, and cap is not smaller than ((((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)+((75*(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))/100))+(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)):\n        - it calls an external function mint of the external contract token.\n        - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))-(((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)+((75*(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))/100))).\n\nFor the tokenFallback function, it has 3 arguments and the type of each argument is as follows: address, uint256, bytes.\n- For the external contract btctoken, and after start, and the second argument is not 0, and (btcethrate*sold) is greater than 0, and (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is greater than 0, and before end:\n  - When 20 does not equal to the length of the third argument, and the length of the third argument is 0:\n    - When cap is not smaller than ((((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)+(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))+(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)):\n      - it calls an external function mint of the external contract token.\n      - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))-(((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)+(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))).\n    - When (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is smaller than 0x152d02c7e14af6800000:\n      - When cap is not smaller than (((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)+(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)):\n        - When (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is smaller than 0xa968163f0a57b400000:\n          - it calls an external function mint of the external contract token.\n          - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))-((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)).\n        - When (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is not smaller than 0xa968163f0a57b400000, and (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is 0:\n          - it calls an external function mint of the external contract token.\n          - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))-((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)).\n      - When (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is not 0, and (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is not smaller than 0xa968163f0a57b400000, and cap is not smaller than ((((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)+((75*(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))/100))+(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)):\n        - it calls an external function mint of the external contract token.\n        - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))-(((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)+((75*(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))/100))).\n  - When 20 is not greater than the length of the third argument, and 20 equals to the length of the third argument:\n    - When cap is not smaller than ((((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)+(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))+(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)):\n      - it calls an external function mint of the external contract token.\n      - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))-(((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)+(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))).\n    - When (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is smaller than 0x152d02c7e14af6800000:\n      - When cap is not smaller than (((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)+(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)):\n        - When (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is smaller than 0xa968163f0a57b400000:\n          - it calls an external function mint of the external contract token.\n          - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))-((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)).\n        - When (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is not smaller than 0xa968163f0a57b400000, and (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is 0:\n          - it calls an external function mint of the external contract token.\n          - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))-((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)).\n      - When (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is not 0, and (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is not smaller than 0xa968163f0a57b400000, and cap is not smaller than ((((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)+((75*(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))/100))+(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)):\n        - it calls an external function mint of the external contract token.\n        - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))-(((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)+((75*(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))/100))).\n\n.\n Here are some state variables with their corresponding types: public state variable `owner` is typed address,public state variable `token` is typed address,public state variable `cap` is typed uint256,public state variable `initialcap` is typed uint256,public state variable `start` is typed uint256,public state variable `end` is typed uint256,public state variable `btctoken` is typed address,public state variable `sold` is typed uint256,public state variable `btcethrate` is typed uint256.\n ",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following contract descriptions. Some state variables are provided to help you develop.The following is the description of the contract logic: For the payable constructor function.\n- the state variable sold will be updated to 0x3635c9adc5dea00000.\n- the state variable btcethrate will be updated to 0x174876e800.\n\nFor the transferTokenOwnership function, it has one argument and its type is address.\n- For owner:\n  - it calls an external function transferOwnership of the external contract token with the first argument.\n\nFor the pauseToken function.\n- For owner:\n  - it calls an external function pause of the external contract token.\n\nFor the setEthRate function, it has one argument and its type is uint256.\n- For owner:\n  - the state variable sold will be updated to the first argument.\n\nFor the unpauseToken function.\n- For owner:\n  - it calls an external function unpause of the external contract token.\n\nFor the withdrawEth function, it has 2 arguments and the type of each argument is as follows: address, uint256.\n- For owner, and the first argument is not 0:\n  - it transfers ether valued the second argument to the first argument.\n\nFor the setBtcEthRate function, it has one argument and its type is uint256.\n- For owner:\n  - the state variable btcethrate will be updated to the first argument.\n\nFor the withdrawBtc function, it has 2 arguments and the type of each argument is as follows: bytes, uint256.\n- For owner:\n  - When 0 is not smaller than the first argument:\n    - it calls an external function burn of the external contract btctoken.\n  - When 0 is smaller than the first argument:\n    - When 32 is not smaller than the first argument:\n      - it calls an external function burn of the external contract btctoken.\n    - When 32 is smaller than the first argument:\n      - When 64 is not smaller than the first argument:\n        - it calls an external function burn of the external contract btctoken.\n      - When 64 is smaller than the first argument:\n        - When 96 is not smaller than the first argument:\n          - it calls an external function burn of the external contract btctoken.\n        - When 96 is smaller than the first argument:\n          - When 128 is not smaller than the first argument:\n            - it calls an external function burn of the external contract btctoken.\n          - When 160 is not smaller than the first argument, and 128 is smaller than the first argument:\n            - it calls an external function burn of the external contract btctoken.\n\nFor the burnWithData function, it has 3 arguments and the type of each argument is as follows: address, uint256, bytes.\n- For owner:\n  - When 0 is not smaller than the length of the third argument:\n    - it calls an external function burn of the first argument.\n  - When 0 is smaller than the length of the third argument:\n    - When 32 is not smaller than the length of the third argument:\n      - it calls an external function burn of the first argument.\n    - When 32 is smaller than the length of the third argument:\n      - When 64 is not smaller than the length of the third argument:\n        - it calls an external function burn of the first argument.\n      - When 64 is smaller than the length of the third argument:\n        - When 96 is not smaller than the length of the third argument:\n          - it calls an external function burn of the first argument.\n        - When 96 is smaller than the length of the third argument:\n          - When 128 is not smaller than the length of the third argument:\n            - it calls an external function burn of the first argument.\n          - When 160 is not smaller than the length of the third argument, and 128 is smaller than the length of the third argument:\n            - it calls an external function burn of the first argument.\n\nFor the transferOwnership function, it has one argument and its type is address.\n- For owner:\n  - the state variable owner will be updated to the first argument.\n\nFor the withdraw function, it has 3 arguments and the type of each argument is as follows: address, address, uint256.\n- For owner, and the second argument is not 0:\n  - When the first argument is 0:\n    - it transfers ether valued the length of the third argument to the second argument.\n  - it calls an external function transfer of the first argument with the following argument list: the second argument, and the length of the third argument.\n\nFor the transfer function, it has 2 arguments and the type of each argument is as follows: address, uint256.\n- For owner:\n  - the state variable cap will be updated to (cap-the second argument).\n  - it calls an external function mint of the external contract token with the following argument list: the first argument, and the second argument.\n\nFor the payable fallback function.\n- When the ether just received (i.e., msg.value) is not 0, and after start, and before end:\n  - When the external contract btctoken equals to 0, and (((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is greater than 0, and (btcethrate*sold) is greater than 0:\n    - When cap is not smaller than ((((((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))+(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)):\n      - it calls an external function mint of the external contract token with the following argument list: caller, and ((((((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))+(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)).\n      - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))-(((((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))).\n    - When (((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is smaller than 0x152d02c7e14af6800000:\n      - When cap is not smaller than (((((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)):\n        - When (((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is smaller than 0xa968163f0a57b400000:\n          - it calls an external function mint of the external contract token with the following argument list: caller, and (((((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)).\n          - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))-((((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)).\n        - When (((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is 0, and (((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is not smaller than 0xa968163f0a57b400000:\n          - it calls an external function mint of the external contract token with the following argument list: caller, and (((((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)).\n          - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))-((((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)).\n      - When cap is not smaller than ((((((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+((75*(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))/100))+(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)), and (((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is not smaller than 0xa968163f0a57b400000, and (((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is not 0:\n        - it calls an external function mint of the external contract token with the following argument list: caller, and ((((((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+((75*(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))/100))+(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)).\n        - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))-(((((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+((75*(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))/100))).\n  - When ((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is greater than 0, and sold is greater than 0, and the external contract btctoken does not equal to 0:\n    - When cap is not smaller than (((((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))+((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)):\n      - it calls an external function mint of the external contract token with the following argument list: caller, and (((((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))+((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)).\n      - the state variable cap will be updated to ((cap-((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))-((((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))).\n    - When ((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is smaller than 0x152d02c7e14af6800000:\n      - When cap is not smaller than ((((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)):\n        - When ((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is smaller than 0xa968163f0a57b400000:\n          - it calls an external function mint of the external contract token with the following argument list: caller, and ((((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)).\n          - the state variable cap will be updated to ((cap-((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))-(((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)).\n        - When ((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is 0, and ((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is not smaller than 0xa968163f0a57b400000:\n          - it calls an external function mint of the external contract token with the following argument list: caller, and ((((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)).\n          - the state variable cap will be updated to ((cap-((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))-(((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)).\n      - When cap is not smaller than (((((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+((75*((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))/100))+((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)), and ((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is not 0, and ((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is not smaller than 0xa968163f0a57b400000:\n        - it calls an external function mint of the external contract token with the following argument list: caller, and (((((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+((75*((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))/100))+((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)).\n        - the state variable cap will be updated to ((cap-((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))-((((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+((75*((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))/100))).\n\nFor the receive function, it has 3 arguments and the type of each argument is as follows: address, uint256, bytes.\n- After start, and the second argument is not 0, and before end:\n  - When 20 does not equal to the length of the third argument, and the length of the third argument is 0:\n    - When the external contract btctoken equals to the first argument, and (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is greater than 0, and (btcethrate*sold) is greater than 0:\n      - When cap is not smaller than ((((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)+(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))+(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)):\n        - it calls an external function mint of the external contract token.\n        - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))-(((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)+(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))).\n      - When (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is smaller than 0x152d02c7e14af6800000:\n        - When cap is not smaller than (((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)+(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)):\n          - When (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is smaller than 0xa968163f0a57b400000:\n            - it calls an external function mint of the external contract token.\n            - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))-((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)).\n          - When (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is not smaller than 0xa968163f0a57b400000, and (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is 0:\n            - it calls an external function mint of the external contract token.\n            - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))-((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)).\n        - When (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is not 0, and (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is not smaller than 0xa968163f0a57b400000, and cap is not smaller than ((((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)+((75*(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))/100))+(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)):\n          - it calls an external function mint of the external contract token.\n          - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))-(((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)+((75*(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))/100))).\n    - When sold is greater than 0, and the external contract btctoken does not equal to the first argument, and the first argument is 0, and ((sold*the second argument)/0xde0b6b3a7640000) is greater than 0:\n      - When cap is not smaller than (((((sold*the second argument)/0xde0b6b3a7640000)/2)+((sold*the second argument)/0xde0b6b3a7640000))+((sold*the second argument)/0xde0b6b3a7640000)):\n        - it calls an external function mint of the external contract token.\n        - the state variable cap will be updated to ((cap-((sold*the second argument)/0xde0b6b3a7640000))-((((sold*the second argument)/0xde0b6b3a7640000)/2)+((sold*the second argument)/0xde0b6b3a7640000))).\n      - When ((sold*the second argument)/0xde0b6b3a7640000) is smaller than 0x152d02c7e14af6800000:\n        - When cap is not smaller than ((((sold*the second argument)/0xde0b6b3a7640000)/2)+((sold*the second argument)/0xde0b6b3a7640000)):\n          - When ((sold*the second argument)/0xde0b6b3a7640000) is smaller than 0xa968163f0a57b400000:\n            - it calls an external function mint of the external contract token.\n            - the state variable cap will be updated to ((cap-((sold*the second argument)/0xde0b6b3a7640000))-(((sold*the second argument)/0xde0b6b3a7640000)/2)).\n          - When ((sold*the second argument)/0xde0b6b3a7640000) is 0, and ((sold*the second argument)/0xde0b6b3a7640000) is not smaller than 0xa968163f0a57b400000:\n            - it calls an external function mint of the external contract token.\n            - the state variable cap will be updated to ((cap-((sold*the second argument)/0xde0b6b3a7640000))-(((sold*the second argument)/0xde0b6b3a7640000)/2)).\n        - When ((sold*the second argument)/0xde0b6b3a7640000) is not 0, and ((sold*the second argument)/0xde0b6b3a7640000) is not smaller than 0xa968163f0a57b400000, and cap is not smaller than (((((sold*the second argument)/0xde0b6b3a7640000)/2)+((75*((sold*the second argument)/0xde0b6b3a7640000))/100))+((sold*the second argument)/0xde0b6b3a7640000)):\n          - it calls an external function mint of the external contract token.\n          - the state variable cap will be updated to ((cap-((sold*the second argument)/0xde0b6b3a7640000))-((((sold*the second argument)/0xde0b6b3a7640000)/2)+((75*((sold*the second argument)/0xde0b6b3a7640000))/100))).\n  - When 20 is not greater than the length of the third argument, and 20 equals to the length of the third argument:\n    - When the external contract btctoken equals to the first argument, and (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is greater than 0, and (btcethrate*sold) is greater than 0:\n      - When cap is not smaller than ((((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)+(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))+(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)):\n        - it calls an external function mint of the external contract token.\n        - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))-(((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)+(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))).\n      - When (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is smaller than 0x152d02c7e14af6800000:\n        - When cap is not smaller than (((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)+(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)):\n          - When (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is smaller than 0xa968163f0a57b400000:\n            - it calls an external function mint of the external contract token.\n            - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))-((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)).\n          - When (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is not smaller than 0xa968163f0a57b400000, and (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is 0:\n            - it calls an external function mint of the external contract token.\n            - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))-((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)).\n        - When (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is not 0, and (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is not smaller than 0xa968163f0a57b400000, and cap is not smaller than ((((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)+((75*(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))/100))+(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)):\n          - it calls an external function mint of the external contract token.\n          - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))-(((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)+((75*(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))/100))).\n    - When sold is greater than 0, and the external contract btctoken does not equal to the first argument, and the first argument is 0, and ((sold*the second argument)/0xde0b6b3a7640000) is greater than 0:\n      - When cap is not smaller than (((((sold*the second argument)/0xde0b6b3a7640000)/2)+((sold*the second argument)/0xde0b6b3a7640000))+((sold*the second argument)/0xde0b6b3a7640000)):\n        - it calls an external function mint of the external contract token.\n        - the state variable cap will be updated to ((cap-((sold*the second argument)/0xde0b6b3a7640000))-((((sold*the second argument)/0xde0b6b3a7640000)/2)+((sold*the second argument)/0xde0b6b3a7640000))).\n      - When ((sold*the second argument)/0xde0b6b3a7640000) is smaller than 0x152d02c7e14af6800000:\n        - When cap is not smaller than ((((sold*the second argument)/0xde0b6b3a7640000)/2)+((sold*the second argument)/0xde0b6b3a7640000)):\n          - When ((sold*the second argument)/0xde0b6b3a7640000) is smaller than 0xa968163f0a57b400000:\n            - it calls an external function mint of the external contract token.\n            - the state variable cap will be updated to ((cap-((sold*the second argument)/0xde0b6b3a7640000))-(((sold*the second argument)/0xde0b6b3a7640000)/2)).\n          - When ((sold*the second argument)/0xde0b6b3a7640000) is 0, and ((sold*the second argument)/0xde0b6b3a7640000) is not smaller than 0xa968163f0a57b400000:\n            - it calls an external function mint of the external contract token.\n            - the state variable cap will be updated to ((cap-((sold*the second argument)/0xde0b6b3a7640000))-(((sold*the second argument)/0xde0b6b3a7640000)/2)).\n        - When ((sold*the second argument)/0xde0b6b3a7640000) is not 0, and ((sold*the second argument)/0xde0b6b3a7640000) is not smaller than 0xa968163f0a57b400000, and cap is not smaller than (((((sold*the second argument)/0xde0b6b3a7640000)/2)+((75*((sold*the second argument)/0xde0b6b3a7640000))/100))+((sold*the second argument)/0xde0b6b3a7640000)):\n          - it calls an external function mint of the external contract token.\n          - the state variable cap will be updated to ((cap-((sold*the second argument)/0xde0b6b3a7640000))-((((sold*the second argument)/0xde0b6b3a7640000)/2)+((75*((sold*the second argument)/0xde0b6b3a7640000))/100))).\n- it calls an external function transferFrom of the first argument.\n\nFor the payable receiveWithData function, it has one argument and its type is bytes.\n- When the ether just received (i.e., msg.value) is not 0, and after start, and before end:\n  - When 20 does not equal to the first argument, and the first argument is 0:\n    - When the external contract btctoken equals to 0, and (((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is greater than 0, and (btcethrate*sold) is greater than 0:\n      - When cap is not smaller than ((((((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))+(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)):\n        - it calls an external function mint of the external contract token.\n        - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))-(((((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))).\n      - When (((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is smaller than 0x152d02c7e14af6800000:\n        - When cap is not smaller than (((((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)):\n          - When (((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is smaller than 0xa968163f0a57b400000:\n            - it calls an external function mint of the external contract token.\n            - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))-((((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)).\n          - When (((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is 0, and (((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is not smaller than 0xa968163f0a57b400000:\n            - it calls an external function mint of the external contract token.\n            - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))-((((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)).\n        - When cap is not smaller than ((((((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+((75*(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))/100))+(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)), and (((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is not smaller than 0xa968163f0a57b400000, and (((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is not 0:\n          - it calls an external function mint of the external contract token.\n          - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))-(((((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+((75*(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))/100))).\n    - When ((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is greater than 0, and sold is greater than 0, and the external contract btctoken does not equal to 0:\n      - When cap is not smaller than (((((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))+((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)):\n        - it calls an external function mint of the external contract token.\n        - the state variable cap will be updated to ((cap-((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))-((((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))).\n      - When ((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is smaller than 0x152d02c7e14af6800000:\n        - When cap is not smaller than ((((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)):\n          - When ((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is smaller than 0xa968163f0a57b400000:\n            - it calls an external function mint of the external contract token.\n            - the state variable cap will be updated to ((cap-((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))-(((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)).\n          - When ((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is 0, and ((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is not smaller than 0xa968163f0a57b400000:\n            - it calls an external function mint of the external contract token.\n            - the state variable cap will be updated to ((cap-((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))-(((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)).\n        - When cap is not smaller than (((((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+((75*((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))/100))+((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)), and ((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is not 0, and ((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is not smaller than 0xa968163f0a57b400000:\n          - it calls an external function mint of the external contract token.\n          - the state variable cap will be updated to ((cap-((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))-((((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+((75*((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))/100))).\n  - When 20 equals to the first argument, and 20 is not greater than the first argument:\n    - When the external contract btctoken equals to 0, and (((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is greater than 0, and (btcethrate*sold) is greater than 0:\n      - When cap is not smaller than ((((((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))+(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)):\n        - it calls an external function mint of the external contract token.\n        - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))-(((((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))).\n      - When (((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is smaller than 0x152d02c7e14af6800000:\n        - When cap is not smaller than (((((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)):\n          - When (((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is smaller than 0xa968163f0a57b400000:\n            - it calls an external function mint of the external contract token.\n            - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))-((((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)).\n          - When (((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is 0, and (((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is not smaller than 0xa968163f0a57b400000:\n            - it calls an external function mint of the external contract token.\n            - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))-((((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)).\n        - When cap is not smaller than ((((((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+((75*(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))/100))+(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)), and (((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is not smaller than 0xa968163f0a57b400000, and (((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is not 0:\n          - it calls an external function mint of the external contract token.\n          - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))-(((((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+((75*(((btcethrate*sold)*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))/100))).\n    - When ((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is greater than 0, and sold is greater than 0, and the external contract btctoken does not equal to 0:\n      - When cap is not smaller than (((((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))+((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)):\n        - it calls an external function mint of the external contract token.\n        - the state variable cap will be updated to ((cap-((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))-((((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))).\n      - When ((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is smaller than 0x152d02c7e14af6800000:\n        - When cap is not smaller than ((((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)):\n          - When ((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is smaller than 0xa968163f0a57b400000:\n            - it calls an external function mint of the external contract token.\n            - the state variable cap will be updated to ((cap-((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))-(((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)).\n          - When ((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is 0, and ((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is not smaller than 0xa968163f0a57b400000:\n            - it calls an external function mint of the external contract token.\n            - the state variable cap will be updated to ((cap-((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))-(((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)).\n        - When cap is not smaller than (((((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+((75*((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))/100))+((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)), and ((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is not 0, and ((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000) is not smaller than 0xa968163f0a57b400000:\n          - it calls an external function mint of the external contract token.\n          - the state variable cap will be updated to ((cap-((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))-((((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000)/2)+((75*((sold*the ether just received (i.e., msg.value))/0xde0b6b3a7640000))/100))).\n\nFor the onTokenTransfer function, it has 3 arguments and the type of each argument is as follows: address, uint256, bytes.\n- For the external contract btctoken, and after start, and the second argument is not 0, and (btcethrate*sold) is greater than 0, and (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is greater than 0, and before end:\n  - When 20 does not equal to the length of the third argument, and the length of the third argument is 0:\n    - When cap is not smaller than ((((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)+(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))+(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)):\n      - it calls an external function mint of the external contract token.\n      - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))-(((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)+(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))).\n    - When (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is smaller than 0x152d02c7e14af6800000:\n      - When cap is not smaller than (((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)+(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)):\n        - When (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is smaller than 0xa968163f0a57b400000:\n          - it calls an external function mint of the external contract token.\n          - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))-((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)).\n        - When (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is not smaller than 0xa968163f0a57b400000, and (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is 0:\n          - it calls an external function mint of the external contract token.\n          - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))-((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)).\n      - When (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is not 0, and (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is not smaller than 0xa968163f0a57b400000, and cap is not smaller than ((((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)+((75*(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))/100))+(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)):\n        - it calls an external function mint of the external contract token.\n        - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))-(((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)+((75*(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))/100))).\n  - When 20 is not greater than the length of the third argument, and 20 equals to the length of the third argument:\n    - When cap is not smaller than ((((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)+(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))+(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)):\n      - it calls an external function mint of the external contract token.\n      - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))-(((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)+(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))).\n    - When (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is smaller than 0x152d02c7e14af6800000:\n      - When cap is not smaller than (((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)+(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)):\n        - When (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is smaller than 0xa968163f0a57b400000:\n          - it calls an external function mint of the external contract token.\n          - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))-((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)).\n        - When (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is not smaller than 0xa968163f0a57b400000, and (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is 0:\n          - it calls an external function mint of the external contract token.\n          - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))-((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)).\n      - When (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is not 0, and (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is not smaller than 0xa968163f0a57b400000, and cap is not smaller than ((((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)+((75*(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))/100))+(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)):\n        - it calls an external function mint of the external contract token.\n        - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))-(((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)+((75*(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))/100))).\n\nFor the tokenFallback function, it has 3 arguments and the type of each argument is as follows: address, uint256, bytes.\n- For the external contract btctoken, and after start, and the second argument is not 0, and (btcethrate*sold) is greater than 0, and (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is greater than 0, and before end:\n  - When 20 does not equal to the length of the third argument, and the length of the third argument is 0:\n    - When cap is not smaller than ((((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)+(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))+(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)):\n      - it calls an external function mint of the external contract token.\n      - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))-(((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)+(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))).\n    - When (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is smaller than 0x152d02c7e14af6800000:\n      - When cap is not smaller than (((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)+(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)):\n        - When (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is smaller than 0xa968163f0a57b400000:\n          - it calls an external function mint of the external contract token.\n          - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))-((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)).\n        - When (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is not smaller than 0xa968163f0a57b400000, and (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is 0:\n          - it calls an external function mint of the external contract token.\n          - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))-((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)).\n      - When (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is not 0, and (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is not smaller than 0xa968163f0a57b400000, and cap is not smaller than ((((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)+((75*(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))/100))+(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)):\n        - it calls an external function mint of the external contract token.\n        - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))-(((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)+((75*(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))/100))).\n  - When 20 is not greater than the length of the third argument, and 20 equals to the length of the third argument:\n    - When cap is not smaller than ((((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)+(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))+(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)):\n      - it calls an external function mint of the external contract token.\n      - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))-(((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)+(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))).\n    - When (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is smaller than 0x152d02c7e14af6800000:\n      - When cap is not smaller than (((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)+(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)):\n        - When (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is smaller than 0xa968163f0a57b400000:\n          - it calls an external function mint of the external contract token.\n          - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))-((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)).\n        - When (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is not smaller than 0xa968163f0a57b400000, and (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is 0:\n          - it calls an external function mint of the external contract token.\n          - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))-((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)).\n      - When (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is not 0, and (((btcethrate*sold)*the second argument)/0xde0b6b3a7640000) is not smaller than 0xa968163f0a57b400000, and cap is not smaller than ((((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)+((75*(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))/100))+(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)):\n        - it calls an external function mint of the external contract token.\n        - the state variable cap will be updated to ((cap-(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))-(((((btcethrate*sold)*the second argument)/0xde0b6b3a7640000)/2)+((75*(((btcethrate*sold)*the second argument)/0xde0b6b3a7640000))/100))).\n\n.\n Here are some state variables with their corresponding types: public state variable `owner` is typed address,public state variable `token` is typed address,public state variable `cap` is typed uint256,public state variable `initialcap` is typed uint256,public state variable `start` is typed uint256,public state variable `end` is typed uint256,public state variable `btctoken` is typed address,public state variable `sold` is typed uint256,public state variable `btcethrate` is typed uint256.\n ",
	"status": "1",
	"time_cost": 42.70106244087219,
	"usage": {
		"completion_tokens": 666,
		"prompt_tokens": 14736,
		"total_tokens": 15402
	}
}