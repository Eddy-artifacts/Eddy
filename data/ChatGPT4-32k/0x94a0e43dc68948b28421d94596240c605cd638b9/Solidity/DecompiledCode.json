{
	"address": "0x94a0e43dc68948b28421d94596240c605cd638b9",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Below is the Solidity contract code inferred from the given decompiled EVM bytecode:\n\n```solidity\npragma solidity ^0.8.0;\n\ncontract Lottery {\n    uint256 private betAmount;\n    uint256 private playerCount;\n    uint256 private upperBound;\n    address private manager;\n    bool private contractActive;\n    bool private contractPause;\n\n    event Playlottery(uint256 balance, uint256 random, uint256 playerCount);\n\n    modifier onlyManager() {\n        require(msg.sender == manager, \"Only Manager can perform this operation\");\n        _;\n    }\n\n    function destroyContract() public onlyManager {\n        selfdestruct(payable(manager));\n    }\n\n    function getPlayerCount() public view returns (uint256) {\n        return playerCount;\n    }\n\n    function getUpperBound() public view returns (uint256) {\n        return upperBound;\n    }\n\n    function setUpperBound(uint256 _upperBound) public onlyManager {\n        upperBound = _upperBound;\n    }\n\n    function getBetAmount() public view returns (uint256) {\n        return betAmount;\n    }\n\n    function setBetAmount(uint256 _betAmount) public onlyManager {\n        betAmount = _betAmount;\n    }\n\n    function setContractPause(bool _pause) public onlyManager {\n        contractPause = _pause;\n        contractActive = !_pause;\n    }\n\n    function getContractBalance() public view returns (uint256) {\n        return address(this).balance;\n    }\n\n    function playLottery(uint256 number) public payable {\n        require(contractActive, \"Contract is currently not active\");\n        require(number >= 1 && number <= upperBound, \"Number not in range\");\n        require(msg.value == betAmount, \"Incorrect bet amount\");\n        playerCount++;\n        uint256 random = uint256(keccak256(abi.encodePacked(block.difficulty, block.timestamp, block.number, playerCount, msg.sender, number))) % upperBound + 1;\n        if (number != random) {\n            emit Playlottery(address(this).balance, random, playerCount);\n        } else {\n            if (address(this).balance > betAmount * 2) {\n                if (address(this).balance > betAmount * 3) {\n                    payable(manager).transfer((address(this).balance - betAmount) * 10 / 100);\n                    payable(msg.sender).transfer((address(this).balance - betAmount) * 90 / 100);\n                } else {\n                    payable(msg.sender).transfer(betAmount * 2);\n                }\n            } else {\n                payable(msg.sender).transfer(address(this).balance);\n            }\n            playerCount = 0;\n            emit Playlottery(address(this).balance, random, playerCount);\n            if (contractPause) {\n                contractActive = false;\n            }\n        }\n    }\n\n    function getManager() public view returns (address) {\n        return manager;\n    }\n\n    function setManager(address _manager) public onlyManager {\n        manager = _manager;\n    }\n\n    function getContractActive() public view returns (bool) {\n        return contractActive;\n    }\n\n    function getContractPause() public view returns (bool) {\n        return contractPause;\n    }\n}\n```\n\nNote: The function selector is not included as Solidity automatically generates function selectors.",
				"role": "assistant"
			}
		}
	],
	"created": 1701470767,
	"id": "chatcmpl-8R6YpyvCaP9Q0ecKA8bDjpEls0cYH",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.25 09:37 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _getbetamount; // STORAGE[0x1]\nuint256 _getplayercount; // STORAGE[0x2]\nuint256 stor_3; // STORAGE[0x3]\nuint256 _getupperbound; // STORAGE[0x4]\naddress _getmanager; // STORAGE[0x0] bytes 0 to 19\nuint8 _getcontractactive; // STORAGE[0x5] bytes 0 to 0\nuint8 _getcontractpause; // STORAGE[0x5] bytes 1 to 1\n\n// Events\nPlaylottery(uint256, uint256, uint256);\n\nfunction destroyContract() public nonPayable { \n    require(msg.sender == _getmanager);\n    selfdestruct(_getmanager);\n}\n\nfunction getplayercount() public nonPayable { \n    return _getplayercount;\n}\n\nfunction getupperbound() public nonPayable { \n    return _getupperbound;\n}\n\nfunction setupperbound(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _getmanager);\n    _getupperbound = varg0;\n}\n\nfunction getbetamount() public nonPayable { \n    return _getbetamount;\n}\n\nfunction setbetamount(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _getmanager);\n    _getbetamount = varg0;\n}\n\nfunction setcontractpause(bool varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _getmanager);\n    if (varg0 == 0) {\n        _getcontractactive = 1;\n    }\n    _getcontractpause = varg0;\n}\n\nfunction getcontractbalance() public nonPayable { \n    return (address(this)).balance;\n}\n\nfunction playlottery(uint256 varg0) public payable { \n    require(msg.data.length - 4 >= 32);\n    require(_getcontractactive == 1);\n    v0 = v1 = varg0 >= stor_3;\n    if (v1) {\n        v0 = v2 = varg0 <= _getupperbound;\n    }\n    require(v0);\n    require(msg.value == _getbetamount);\n    _getplayercount += 1;\n    MEM[64] += 212;\n    assert(_getupperbound);\n    v3 = keccak256(block.difficulty, block.timestamp, block.number, _getplayercount, msg.sender, varg0) % _getupperbound + 1;\n    if (varg0 != v3) {\n        emit Playlottery((address(this)).balance, v3, _getplayercount);\n    } else {\n        if ((address(this)).balance > _getbetamount << 1) {\n            if ((address(this)).balance > _getbetamount * 3) {\n                v4 = _getmanager.call().value((address(this)).balance - _getbetamount - ((address(this)).balance - _getbetamount) * 90 / 100).gas(!((address(this)).balance - _getbetamount - ((address(this)).balance - _getbetamount) * 90 / 100) * 2300);\n                require(v4); // checks call status, propagates error data on error\n                v5 = msg.sender.call().value(((address(this)).balance - _getbetamount) * 90 / 100).gas(!(((address(this)).balance - _getbetamount) * 90 / 100) * 2300);\n                require(v5); // checks call status, propagates error data on error\n            } else {\n                v6 = msg.sender.call().value(_getbetamount << 1).gas(!(_getbetamount << 1) * 2300);\n                require(v6); // checks call status, propagates error data on error\n            }\n        } else {\n            v7 = msg.sender.call().value((address(this)).balance).gas(!(address(this)).balance * 2300);\n            require(v7); // checks call status, propagates error data on error\n        }\n        _getplayercount = 0;\n        emit Playlottery((address(this)).balance, v3, _getplayercount);\n        if (_getcontractpause == 1) {\n            _getcontractactive = 0;\n        }\n        goto 0x723;\n    }\n}\n\nfunction getmanager() public nonPayable { \n    return _getmanager;\n}\n\nfunction setmanager(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _getmanager);\n    _getmanager = varg0;\n}\n\nfunction getcontractactive() public nonPayable { \n    return _getcontractactive;\n}\n\nfunction fallback() public nonPayable { \n}\n\nfunction getcontractpause() public nonPayable { \n    return _getcontractpause;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0xdc2218ec > function_selector >> 224) {\n            if (0x4655614 == function_selector >> 224) {\n                getcontractpause();\n            } else if (0x92a5cce == function_selector >> 224) {\n                destroyContract();\n            } else if (0x530d217c == function_selector >> 224) {\n                getplayercount();\n            } else if (0x62c316d7 == function_selector >> 224) {\n                getupperbound();\n            } else if (0x8e63bfdb == function_selector >> 224) {\n                setupperbound(uint256);\n            } else if (0xd3690a61 == function_selector >> 224) {\n                getbetamount();\n            }\n        } else if (0xf34fc804 > function_selector >> 224) {\n            if (0xdc2218ec == function_selector >> 224) {\n                setbetamount(uint256);\n            } else if (0xeca76ded == function_selector >> 224) {\n                setcontractpause(bool);\n            } else if (0xf28bf146 == function_selector >> 224) {\n                getcontractbalance();\n            }\n        } else if (0xf34fc804 == function_selector >> 224) {\n            playlottery(uint256);\n        } else if (0xf52294c3 == function_selector >> 224) {\n            getmanager();\n        } else if (0xfa3ff5f1 == function_selector >> 224) {\n            setmanager(address);\n        } else if (0xfbbcedf3 == function_selector >> 224) {\n            getcontractactive();\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.25 09:37 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _getbetamount; // STORAGE[0x1]\nuint256 _getplayercount; // STORAGE[0x2]\nuint256 stor_3; // STORAGE[0x3]\nuint256 _getupperbound; // STORAGE[0x4]\naddress _getmanager; // STORAGE[0x0] bytes 0 to 19\nuint8 _getcontractactive; // STORAGE[0x5] bytes 0 to 0\nuint8 _getcontractpause; // STORAGE[0x5] bytes 1 to 1\n\n// Events\nPlaylottery(uint256, uint256, uint256);\n\nfunction destroyContract() public nonPayable { \n    require(msg.sender == _getmanager);\n    selfdestruct(_getmanager);\n}\n\nfunction getplayercount() public nonPayable { \n    return _getplayercount;\n}\n\nfunction getupperbound() public nonPayable { \n    return _getupperbound;\n}\n\nfunction setupperbound(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _getmanager);\n    _getupperbound = varg0;\n}\n\nfunction getbetamount() public nonPayable { \n    return _getbetamount;\n}\n\nfunction setbetamount(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _getmanager);\n    _getbetamount = varg0;\n}\n\nfunction setcontractpause(bool varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _getmanager);\n    if (varg0 == 0) {\n        _getcontractactive = 1;\n    }\n    _getcontractpause = varg0;\n}\n\nfunction getcontractbalance() public nonPayable { \n    return (address(this)).balance;\n}\n\nfunction playlottery(uint256 varg0) public payable { \n    require(msg.data.length - 4 >= 32);\n    require(_getcontractactive == 1);\n    v0 = v1 = varg0 >= stor_3;\n    if (v1) {\n        v0 = v2 = varg0 <= _getupperbound;\n    }\n    require(v0);\n    require(msg.value == _getbetamount);\n    _getplayercount += 1;\n    MEM[64] += 212;\n    assert(_getupperbound);\n    v3 = keccak256(block.difficulty, block.timestamp, block.number, _getplayercount, msg.sender, varg0) % _getupperbound + 1;\n    if (varg0 != v3) {\n        emit Playlottery((address(this)).balance, v3, _getplayercount);\n    } else {\n        if ((address(this)).balance > _getbetamount << 1) {\n            if ((address(this)).balance > _getbetamount * 3) {\n                v4 = _getmanager.call().value((address(this)).balance - _getbetamount - ((address(this)).balance - _getbetamount) * 90 / 100).gas(!((address(this)).balance - _getbetamount - ((address(this)).balance - _getbetamount) * 90 / 100) * 2300);\n                require(v4); // checks call status, propagates error data on error\n                v5 = msg.sender.call().value(((address(this)).balance - _getbetamount) * 90 / 100).gas(!(((address(this)).balance - _getbetamount) * 90 / 100) * 2300);\n                require(v5); // checks call status, propagates error data on error\n            } else {\n                v6 = msg.sender.call().value(_getbetamount << 1).gas(!(_getbetamount << 1) * 2300);\n                require(v6); // checks call status, propagates error data on error\n            }\n        } else {\n            v7 = msg.sender.call().value((address(this)).balance).gas(!(address(this)).balance * 2300);\n            require(v7); // checks call status, propagates error data on error\n        }\n        _getplayercount = 0;\n        emit Playlottery((address(this)).balance, v3, _getplayercount);\n        if (_getcontractpause == 1) {\n            _getcontractactive = 0;\n        }\n        goto 0x723;\n    }\n}\n\nfunction getmanager() public nonPayable { \n    return _getmanager;\n}\n\nfunction setmanager(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _getmanager);\n    _getmanager = varg0;\n}\n\nfunction getcontractactive() public nonPayable { \n    return _getcontractactive;\n}\n\nfunction fallback() public nonPayable { \n}\n\nfunction getcontractpause() public nonPayable { \n    return _getcontractpause;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0xdc2218ec > function_selector >> 224) {\n            if (0x4655614 == function_selector >> 224) {\n                getcontractpause();\n            } else if (0x92a5cce == function_selector >> 224) {\n                destroyContract();\n            } else if (0x530d217c == function_selector >> 224) {\n                getplayercount();\n            } else if (0x62c316d7 == function_selector >> 224) {\n                getupperbound();\n            } else if (0x8e63bfdb == function_selector >> 224) {\n                setupperbound(uint256);\n            } else if (0xd3690a61 == function_selector >> 224) {\n                getbetamount();\n            }\n        } else if (0xf34fc804 > function_selector >> 224) {\n            if (0xdc2218ec == function_selector >> 224) {\n                setbetamount(uint256);\n            } else if (0xeca76ded == function_selector >> 224) {\n                setcontractpause(bool);\n            } else if (0xf28bf146 == function_selector >> 224) {\n                getcontractbalance();\n            }\n        } else if (0xf34fc804 == function_selector >> 224) {\n            playlottery(uint256);\n        } else if (0xf52294c3 == function_selector >> 224) {\n            getmanager();\n        } else if (0xfa3ff5f1 == function_selector >> 224) {\n            setmanager(address);\n        } else if (0xfbbcedf3 == function_selector >> 224) {\n            getcontractactive();\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.25 09:37 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _getbetamount; // STORAGE[0x1]\nuint256 _getplayercount; // STORAGE[0x2]\nuint256 stor_3; // STORAGE[0x3]\nuint256 _getupperbound; // STORAGE[0x4]\naddress _getmanager; // STORAGE[0x0] bytes 0 to 19\nuint8 _getcontractactive; // STORAGE[0x5] bytes 0 to 0\nuint8 _getcontractpause; // STORAGE[0x5] bytes 1 to 1\n\n// Events\nPlaylottery(uint256, uint256, uint256);\n\nfunction destroyContract() public nonPayable { \n    require(msg.sender == _getmanager);\n    selfdestruct(_getmanager);\n}\n\nfunction getplayercount() public nonPayable { \n    return _getplayercount;\n}\n\nfunction getupperbound() public nonPayable { \n    return _getupperbound;\n}\n\nfunction setupperbound(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _getmanager);\n    _getupperbound = varg0;\n}\n\nfunction getbetamount() public nonPayable { \n    return _getbetamount;\n}\n\nfunction setbetamount(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _getmanager);\n    _getbetamount = varg0;\n}\n\nfunction setcontractpause(bool varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _getmanager);\n    if (varg0 == 0) {\n        _getcontractactive = 1;\n    }\n    _getcontractpause = varg0;\n}\n\nfunction getcontractbalance() public nonPayable { \n    return (address(this)).balance;\n}\n\nfunction playlottery(uint256 varg0) public payable { \n    require(msg.data.length - 4 >= 32);\n    require(_getcontractactive == 1);\n    v0 = v1 = varg0 >= stor_3;\n    if (v1) {\n        v0 = v2 = varg0 <= _getupperbound;\n    }\n    require(v0);\n    require(msg.value == _getbetamount);\n    _getplayercount += 1;\n    MEM[64] += 212;\n    assert(_getupperbound);\n    v3 = keccak256(block.difficulty, block.timestamp, block.number, _getplayercount, msg.sender, varg0) % _getupperbound + 1;\n    if (varg0 != v3) {\n        emit Playlottery((address(this)).balance, v3, _getplayercount);\n    } else {\n        if ((address(this)).balance > _getbetamount << 1) {\n            if ((address(this)).balance > _getbetamount * 3) {\n                v4 = _getmanager.call().value((address(this)).balance - _getbetamount - ((address(this)).balance - _getbetamount) * 90 / 100).gas(!((address(this)).balance - _getbetamount - ((address(this)).balance - _getbetamount) * 90 / 100) * 2300);\n                require(v4); // checks call status, propagates error data on error\n                v5 = msg.sender.call().value(((address(this)).balance - _getbetamount) * 90 / 100).gas(!(((address(this)).balance - _getbetamount) * 90 / 100) * 2300);\n                require(v5); // checks call status, propagates error data on error\n            } else {\n                v6 = msg.sender.call().value(_getbetamount << 1).gas(!(_getbetamount << 1) * 2300);\n                require(v6); // checks call status, propagates error data on error\n            }\n        } else {\n            v7 = msg.sender.call().value((address(this)).balance).gas(!(address(this)).balance * 2300);\n            require(v7); // checks call status, propagates error data on error\n        }\n        _getplayercount = 0;\n        emit Playlottery((address(this)).balance, v3, _getplayercount);\n        if (_getcontractpause == 1) {\n            _getcontractactive = 0;\n        }\n        goto 0x723;\n    }\n}\n\nfunction getmanager() public nonPayable { \n    return _getmanager;\n}\n\nfunction setmanager(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _getmanager);\n    _getmanager = varg0;\n}\n\nfunction getcontractactive() public nonPayable { \n    return _getcontractactive;\n}\n\nfunction fallback() public nonPayable { \n}\n\nfunction getcontractpause() public nonPayable { \n    return _getcontractpause;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0xdc2218ec > function_selector >> 224) {\n            if (0x4655614 == function_selector >> 224) {\n                getcontractpause();\n            } else if (0x92a5cce == function_selector >> 224) {\n                destroyContract();\n            } else if (0x530d217c == function_selector >> 224) {\n                getplayercount();\n            } else if (0x62c316d7 == function_selector >> 224) {\n                getupperbound();\n            } else if (0x8e63bfdb == function_selector >> 224) {\n                setupperbound(uint256);\n            } else if (0xd3690a61 == function_selector >> 224) {\n                getbetamount();\n            }\n        } else if (0xf34fc804 > function_selector >> 224) {\n            if (0xdc2218ec == function_selector >> 224) {\n                setbetamount(uint256);\n            } else if (0xeca76ded == function_selector >> 224) {\n                setcontractpause(bool);\n            } else if (0xf28bf146 == function_selector >> 224) {\n                getcontractbalance();\n            }\n        } else if (0xf34fc804 == function_selector >> 224) {\n            playlottery(uint256);\n        } else if (0xf52294c3 == function_selector >> 224) {\n            getmanager();\n        } else if (0xfa3ff5f1 == function_selector >> 224) {\n            setmanager(address);\n        } else if (0xfbbcedf3 == function_selector >> 224) {\n            getcontractactive();\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 26.255640983581543,
	"usage": {
		"completion_tokens": 672,
		"prompt_tokens": 1564,
		"total_tokens": 2236
	}
}