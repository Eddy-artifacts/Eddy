{
	"address": "0x17fd666fa0784885fa1afec8ac624d9b7e72b752",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is a smart contract that fits your description written in Solidity:\n\n```solidity\npragma solidity ^0.5.16;\n\ncontract TokenContract {\n    address public owner;\n    string public standard;\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n    uint256 public totalsupply;\n    uint8 public locked;\n    uint256 public icosince;\n    uint256 public icotill;\n    mapping (address => uint256) public balanceof;\n    mapping (address => mapping (address => uint256)) public allowance;\n    uint256 public buyprice;\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    function approve(address _spender, uint256 _value) public {\n        allowance[msg.sender][_spender] = _value;\n    }\n\n    function setLocked(bool _lock) public {\n        require(msg.sender == owner);\n        locked = _lock ? 1 : 0;\n    }\n\n    function() external payable {\n        require(now > icosince && now < icotill && locked == 0 && buyprice != 0 && msg.value > 0 && balanceof[address(this)] >= msg.value / buyprice);\n        balanceof[msg.sender] += msg.value / buyprice;\n        balanceof[address(this)] -= msg.value / buyprice;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public {\n        require(_value > 0 && locked == 0 && _value <= allowance[_from][msg.sender] && balanceof[_from] >= _value && balanceof[_to] + _value > balanceof[_to]);\n        balanceof[_from] -= _value;\n        balanceof[_to] += _value;\n        allowance[_from][msg.sender] -= _value;\n    }\n\n    function setBuyPrice(uint256 _newBuyPrice) public {\n        require(msg.sender == owner);\n        buyprice = _newBuyPrice;\n    }\n\n    function icoFinished() public {\n        require(msg.sender == owner && now > icotill);\n        balanceof[owner] += balanceof[address(this)];\n        balanceof[address(this)] = 0;\n    }\n\n    function transfer(address _to, uint256 _value) public {\n        require(balanceof[msg.sender] >= _value && balanceof[_to] + _value > balanceof[_to] && locked == 0);\n        balanceof[msg.sender] -= _value;\n        balanceof[_to] += _value;\n    }\n\n    function transferEthers() public {\n        require(msg.sender == owner);\n        msg.sender.transfer(address(this).balance);\n    }\n\n    function transferOwnership(address _newOwner) public {\n        require(msg.sender == owner);\n        owner = _newOwner;\n    }\n\n    function approveAndCall(address _spender, uint256 _value, bytes memory _extraData) public {\n        allowance[msg.sender][_spender] = _value;\n        if(_extraData.length > 0) {\n            (bool success,) = _spender.call(abi.encodeWithSignature(\"receiveApproval(address,uint256,address,bytes)\", msg.sender, _value, this, _extraData));\n            require(success);\n        }\n    }\n}\n```\nPlease note that this contract uses the ERC20 standard, and some functions may need to be adjusted to fit your specific business logic. Always make sure to test your contracts thoroughly before deploying them to the mainnet.",
				"role": "assistant"
			}
		}
	],
	"created": 1701710962,
	"id": "chatcmpl-8S72wW9kmCqfZ5UwkXCRJaWh7ElwB",
	"input_format": "LayedDescription",
	"ir": "For the approve function, it has 2 arguments and the type of each argument is as follows: address, uint256.\n- the allowance from caller to the first argument will be updated to the second argument.\n\nFor the setLocked function, it has one argument and its type is bool.\n- For owner:\n  - the state variable locked will be updated to the first argument.\n\nFor the payable fallback function.\n- Before icotill, and locked is 0, and buyprice is not 0, and the ether just received (i.e., msg.value) is greater than 0, and the balance of the address of this contract is not smaller than (the ether just received (i.e., msg.value)/buyprice), and after icosince:\n  - the balance of caller will be updated to ((the ether just received (i.e., msg.value)/buyprice)+the balance of caller).\n  - the balance of the address of this contract will be updated to (the balance of the address of this contract-(the ether just received (i.e., msg.value)/buyprice)).\n\nFor the transferFrom function, it has 3 arguments and the type of each argument is as follows: address, address, uint256.\n- When the third argument is greater than 0, and locked is 0, and the third argument is not greater than the allowance from the first argument to caller, and (the balance of the second argument+the third argument) is greater than the balance of the second argument, and the balance of the first argument is not smaller than the third argument:\n  - the balance of the first argument will be updated to (the balance of the first argument-the third argument).\n  - the balance of the second argument will be updated to (the third argument+the balance of the second argument).\n  - the allowance from the first argument to caller will be updated to (the allowance from the first argument to caller-the third argument).\n\nFor the setBuyPrice function, it has one argument and its type is uint256.\n- For owner:\n  - the state variable buyprice will be updated to the first argument.\n\nFor the icoFinished function.\n- After icotill, and for owner:\n  - the balance of owner will be updated to (the balance of the address of this contract+the balance of owner). Afterthat, \n    - the balance of the address of this contract will be updated to 0.\n\nFor the transfer function, it has 2 arguments and the type of each argument is as follows: address, uint256.\n- When (the balance of the first argument+the second argument) is greater than the balance of the first argument, and the balance of caller is not smaller than the second argument, and locked is 0:\n  - the balance of caller will be updated to (the balance of caller-the second argument).\n  - the balance of the first argument will be updated to (the second argument+the balance of the first argument).\n\nFor the transferEthers function.\n- For owner:\n  - it transfers ether valued the balance of the address of this contract to owner.\n\nFor the transferOwnership function, it has one argument and its type is address.\n- For owner:\n  - the state variable owner will be updated to the first argument.\n\nFor the approveAndCall function, it has 3 arguments and the type of each argument is as follows: address, uint256, bytes.\n- the allowance from caller to the first argument will be updated to the second argument.\n- When 0 is not smaller than the third argument:\n  - it calls an external function receiveApproval of the first argument.\n- When 0 is smaller than the third argument:\n  - When 32 is not smaller than the third argument:\n    - it calls an external function receiveApproval of the first argument.\n  - When 32 is smaller than the third argument:\n    - When 64 is not smaller than the third argument:\n      - it calls an external function receiveApproval of the first argument.\n    - When 64 is smaller than the third argument:\n      - When 96 is not smaller than the third argument:\n        - it calls an external function receiveApproval of the first argument.\n      - When 96 is smaller than the third argument:\n        - When 128 is not smaller than the third argument:\n          - it calls an external function receiveApproval of the first argument.\n        - When 160 is not smaller than the third argument, and 128 is smaller than the third argument:\n          - it calls an external function receiveApproval of the first argument.\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following contract descriptions. Some state variables are provided to help you develop.",
			"role": "system"
		},
		{
			"content": "The following is the description of the contract logic: For the approve function, it has 2 arguments and the type of each argument is as follows: address, uint256.\n- the allowance from caller to the first argument will be updated to the second argument.\n\nFor the setLocked function, it has one argument and its type is bool.\n- For owner:\n  - the state variable locked will be updated to the first argument.\n\nFor the payable fallback function.\n- Before icotill, and locked is 0, and buyprice is not 0, and the ether just received (i.e., msg.value) is greater than 0, and the balance of the address of this contract is not smaller than (the ether just received (i.e., msg.value)/buyprice), and after icosince:\n  - the balance of caller will be updated to ((the ether just received (i.e., msg.value)/buyprice)+the balance of caller).\n  - the balance of the address of this contract will be updated to (the balance of the address of this contract-(the ether just received (i.e., msg.value)/buyprice)).\n\nFor the transferFrom function, it has 3 arguments and the type of each argument is as follows: address, address, uint256.\n- When the third argument is greater than 0, and locked is 0, and the third argument is not greater than the allowance from the first argument to caller, and (the balance of the second argument+the third argument) is greater than the balance of the second argument, and the balance of the first argument is not smaller than the third argument:\n  - the balance of the first argument will be updated to (the balance of the first argument-the third argument).\n  - the balance of the second argument will be updated to (the third argument+the balance of the second argument).\n  - the allowance from the first argument to caller will be updated to (the allowance from the first argument to caller-the third argument).\n\nFor the setBuyPrice function, it has one argument and its type is uint256.\n- For owner:\n  - the state variable buyprice will be updated to the first argument.\n\nFor the icoFinished function.\n- After icotill, and for owner:\n  - the balance of owner will be updated to (the balance of the address of this contract+the balance of owner). Afterthat, \n    - the balance of the address of this contract will be updated to 0.\n\nFor the transfer function, it has 2 arguments and the type of each argument is as follows: address, uint256.\n- When (the balance of the first argument+the second argument) is greater than the balance of the first argument, and the balance of caller is not smaller than the second argument, and locked is 0:\n  - the balance of caller will be updated to (the balance of caller-the second argument).\n  - the balance of the first argument will be updated to (the second argument+the balance of the first argument).\n\nFor the transferEthers function.\n- For owner:\n  - it transfers ether valued the balance of the address of this contract to owner.\n\nFor the transferOwnership function, it has one argument and its type is address.\n- For owner:\n  - the state variable owner will be updated to the first argument.\n\nFor the approveAndCall function, it has 3 arguments and the type of each argument is as follows: address, uint256, bytes.\n- the allowance from caller to the first argument will be updated to the second argument.\n- When 0 is not smaller than the third argument:\n  - it calls an external function receiveApproval of the first argument.\n- When 0 is smaller than the third argument:\n  - When 32 is not smaller than the third argument:\n    - it calls an external function receiveApproval of the first argument.\n  - When 32 is smaller than the third argument:\n    - When 64 is not smaller than the third argument:\n      - it calls an external function receiveApproval of the first argument.\n    - When 64 is smaller than the third argument:\n      - When 96 is not smaller than the third argument:\n        - it calls an external function receiveApproval of the first argument.\n      - When 96 is smaller than the third argument:\n        - When 128 is not smaller than the third argument:\n          - it calls an external function receiveApproval of the first argument.\n        - When 160 is not smaller than the third argument, and 128 is smaller than the third argument:\n          - it calls an external function receiveApproval of the first argument.\n\n.\n Here are some state variables with their corresponding types: public state variable `owner` is typed address,public state variable `standard` is typed string,public state variable `name` is typed string,public state variable `symbol` is typed string,public state variable `decimals` is typed uint8,public state variable `totalsupply` is typed uint256,public state variable `locked` is typed uint8,public state variable `icosince` is typed uint256,public state variable `icotill` is typed uint256,public state variable `balanceof` is typed mapping,public state variable `allowance` is typed mapping,public state variable `buyprice` is typed uint256.\n ",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following contract descriptions. Some state variables are provided to help you develop.The following is the description of the contract logic: For the approve function, it has 2 arguments and the type of each argument is as follows: address, uint256.\n- the allowance from caller to the first argument will be updated to the second argument.\n\nFor the setLocked function, it has one argument and its type is bool.\n- For owner:\n  - the state variable locked will be updated to the first argument.\n\nFor the payable fallback function.\n- Before icotill, and locked is 0, and buyprice is not 0, and the ether just received (i.e., msg.value) is greater than 0, and the balance of the address of this contract is not smaller than (the ether just received (i.e., msg.value)/buyprice), and after icosince:\n  - the balance of caller will be updated to ((the ether just received (i.e., msg.value)/buyprice)+the balance of caller).\n  - the balance of the address of this contract will be updated to (the balance of the address of this contract-(the ether just received (i.e., msg.value)/buyprice)).\n\nFor the transferFrom function, it has 3 arguments and the type of each argument is as follows: address, address, uint256.\n- When the third argument is greater than 0, and locked is 0, and the third argument is not greater than the allowance from the first argument to caller, and (the balance of the second argument+the third argument) is greater than the balance of the second argument, and the balance of the first argument is not smaller than the third argument:\n  - the balance of the first argument will be updated to (the balance of the first argument-the third argument).\n  - the balance of the second argument will be updated to (the third argument+the balance of the second argument).\n  - the allowance from the first argument to caller will be updated to (the allowance from the first argument to caller-the third argument).\n\nFor the setBuyPrice function, it has one argument and its type is uint256.\n- For owner:\n  - the state variable buyprice will be updated to the first argument.\n\nFor the icoFinished function.\n- After icotill, and for owner:\n  - the balance of owner will be updated to (the balance of the address of this contract+the balance of owner). Afterthat, \n    - the balance of the address of this contract will be updated to 0.\n\nFor the transfer function, it has 2 arguments and the type of each argument is as follows: address, uint256.\n- When (the balance of the first argument+the second argument) is greater than the balance of the first argument, and the balance of caller is not smaller than the second argument, and locked is 0:\n  - the balance of caller will be updated to (the balance of caller-the second argument).\n  - the balance of the first argument will be updated to (the second argument+the balance of the first argument).\n\nFor the transferEthers function.\n- For owner:\n  - it transfers ether valued the balance of the address of this contract to owner.\n\nFor the transferOwnership function, it has one argument and its type is address.\n- For owner:\n  - the state variable owner will be updated to the first argument.\n\nFor the approveAndCall function, it has 3 arguments and the type of each argument is as follows: address, uint256, bytes.\n- the allowance from caller to the first argument will be updated to the second argument.\n- When 0 is not smaller than the third argument:\n  - it calls an external function receiveApproval of the first argument.\n- When 0 is smaller than the third argument:\n  - When 32 is not smaller than the third argument:\n    - it calls an external function receiveApproval of the first argument.\n  - When 32 is smaller than the third argument:\n    - When 64 is not smaller than the third argument:\n      - it calls an external function receiveApproval of the first argument.\n    - When 64 is smaller than the third argument:\n      - When 96 is not smaller than the third argument:\n        - it calls an external function receiveApproval of the first argument.\n      - When 96 is smaller than the third argument:\n        - When 128 is not smaller than the third argument:\n          - it calls an external function receiveApproval of the first argument.\n        - When 160 is not smaller than the third argument, and 128 is smaller than the third argument:\n          - it calls an external function receiveApproval of the first argument.\n\n.\n Here are some state variables with their corresponding types: public state variable `owner` is typed address,public state variable `standard` is typed string,public state variable `name` is typed string,public state variable `symbol` is typed string,public state variable `decimals` is typed uint8,public state variable `totalsupply` is typed uint256,public state variable `locked` is typed uint8,public state variable `icosince` is typed uint256,public state variable `icotill` is typed uint256,public state variable `balanceof` is typed mapping,public state variable `allowance` is typed mapping,public state variable `buyprice` is typed uint256.\n ",
	"status": "1",
	"time_cost": 35.63012194633484,
	"usage": {
		"completion_tokens": 702,
		"prompt_tokens": 1137,
		"total_tokens": 1839
	}
}