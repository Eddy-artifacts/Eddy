{
	"address": "0xdf59f9b549305724b1fa868cb9d0898721404c1f",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here's the contract code according to the specifications:\n\n```solidity\npragma solidity ^0.5.0;\n\ncontract YourContract {\n    address public owner;\n    string public name;\n    string public symbol;\n    uint256 public decimals;\n    uint256 public totalsupply;\n    mapping (address => uint256) public balanceof;\n    mapping (address => mapping (address => uint256)) public allowance;\n    address public multisigwallet;\n    uint256 public amountraised;\n    uint256 public starttime;\n    uint256 public stoptime;\n    uint256 public fixedtotalsupply;\n    uint256 public price;\n    uint256 public minimuminvestment;\n    uint256 public crowdsaletarget;\n    bool private paused;\n    uint256 private rate;\n    \n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n    \n    function approve(address _spender, uint256 _value) public {\n        allowance[msg.sender][_spender] = _value;\n    }\n    \n    function setMinimumInvestment(uint256 _value) public onlyOwner {\n        minimuminvestment = _value;\n    }\n    \n    function setPrice(uint256 _value) public onlyOwner {\n        require(_value > 0);\n        price = _value;\n    }\n    \n    function startSale(uint256 _start, uint256 _stop, uint256 _price, address _wallet, uint256 _minInvest, uint256 _target) public onlyOwner {\n        require(_stop > now);\n        starttime = _start;\n        stoptime = _stop;\n        amountraised = 0;\n        paused = false;\n        if(_price > 0) {\n            price = _price;\n            multisigwallet = _wallet;\n            minimuminvestment = _minInvest;\n            crowdsaletarget = _target;\n        }\n    }\n    \n    function stopSale() public onlyOwner {\n        stoptime = now;\n        paused = true;\n    }\n    \n    function setMultiSigWallet(address _wallet) public onlyOwner {\n        multisigwallet = _wallet;\n    }\n    \n    function transferOwnership(address newOwner) public onlyOwner {\n        owner = newOwner;\n    }\n    \n    function setCrowdsaleTarget(uint256 _target) public onlyOwner {\n        crowdsaletarget = _target;\n    }\n    \n    function mintToken(address _to, uint256 _amount) public onlyOwner {\n        require(_amount > 0 && _amount + totalsupply <= fixedtotalsupply);\n        balanceof[_to] += _amount;\n        totalsupply += _amount;\n    }\n    \n    function transferFrom(address _from, address _to, uint256 _value) public {\n        require(_value <= balanceof[_from] && _to != address(0) && _value <= allowance[_from][msg.sender] && _value + balanceof[_to] > balanceof[_to]);\n        balanceof[_to] += _value;\n        balanceof[_from] -= _value;\n        allowance[_from][msg.sender] -= _value;\n    }\n\n    function transfer(address _to, uint256 _value) public {\n        require(_value + balanceof[_to] > balanceof[_to] && _to != address(0) && _value <= balanceof[msg.sender]);\n        balanceof[msg.sender] -= _value;\n        balanceof[_to] += _value;\n    }\n    \n    function () external payable {\n        require(msg.value >= minimuminvestment && now < stoptime && totalsupply <= fixedtotalsupply && !paused && (msg.value / 0xde0b6b3a7640000) + amountraised <= crowdsaletarget);\n        amountraised += (msg.value / 0xde0b6b3a7640000);\n    }\n}\n```\n\nThis code will compile in Solidity version 0.5.0. Please replace `\"YourContract\"` with the actual name of your contract.",
				"role": "assistant"
			}
		}
	],
	"created": 1702024394,
	"id": "chatcmpl-8TQaIvrjV8WZDFZ1rHQjxiejaRue5",
	"input_format": "LayedDescription",
	"ir": "For the approve function, it has 2 arguments and the type of each argument is as follows: address, uint256.\n- the allowance from caller to the first argument will be updated to the second argument.\n\nFor the setMinimumInvestment function, it has one argument and its type is uint256.\n- For owner:\n  - the state variable minimuminvestment will be updated to the first argument.\n\nFor the setPrice function, it has one argument and its type is uint256.\n- For owner, and the first argument is greater than 0:\n  - the state variable price will be updated to the first argument.\n\nFor the startSale function, it has 6 arguments and the type of each argument is as follows: uint256, uint256, uint256, address, uint256, uint256.\n- For owner, and the second argument is greater than current time:\n  - the state variable starttime will be updated to the first argument.\n  - the state variable stoptime will be updated to the second argument.\n  - the state variable amountraised will be updated to 0.\n  - the state variable paused will be updated to 0.\n  - When the third argument is greater than 0:\n    - the state variable price will be updated to the third argument.\n    - the state variable multisigwallet will be updated to the fourth argument.\n    - the state variable minimuminvestment will be updated to the fifth argument.\n    - the state variable crowdsaletarget will be updated to the sixth argument.\n\nFor the stopSale function.\n- For owner:\n  - the state variable stoptime will be updated to current time.\n  - the state variable paused will be updated to 1.\n\nFor the setMultiSigWallet function, it has one argument and its type is address.\n- For owner:\n  - the state variable multisigwallet will be updated to the first argument.\n\nFor the transferOwnership function, it has one argument and its type is address.\n- For owner:\n  - the state variable owner will be updated to the first argument.\n\nFor the setCrowdsaleTarget function, it has one argument and its type is uint256.\n- For owner:\n  - the state variable crowdsaletarget will be updated to the first argument.\n\nFor the mintToken function, it has 2 arguments and the type of each argument is as follows: address, uint256.\n- For owner, and the second argument is greater than 0, and (the second argument+totalsupply) is not greater than fixedtotalsupply:\n  - the balance of the first argument will be updated to (the second argument+the balance of the first argument).\n  - the state variable totalsupply will be updated to (the second argument+totalsupply).\n\nFor the transferFrom function, it has 3 arguments and the type of each argument is as follows: address, address, uint256.\n- When the third argument is not greater than the balance of the first argument, and the second argument is not 0, and the third argument is not greater than the allowance from the first argument to caller, and (the third argument+the balance of the second argument) is greater than the balance of the second argument:\n  - the balance of the second argument will be updated to (the third argument+the balance of the second argument).\n  - the balance of the first argument will be updated to (the balance of the first argument-the third argument).\n  - the allowance from the first argument to caller will be updated to (the allowance from the first argument to caller-the third argument).\n\nFor the transfer function, it has 2 arguments and the type of each argument is as follows: address, uint256.\n- When (the second argument+the balance of the first argument) is greater than the balance of the first argument, and the first argument is not 0, and the second argument is not greater than the balance of caller:\n  - the balance of caller will be updated to (the balance of caller-the second argument).\n  - the balance of the first argument will be updated to (the second argument+the balance of the first argument).\n\nFor the payable fallback function.\n- When the ether just received (i.e., msg.value) is not smaller than minimuminvestment, and before stoptime, and totalsupply is not greater than fixedtotalsupply, and paused is 0, and ((the ether just received (i.e., msg.value)/0xde0b6b3a7640000)+amountraised) is not greater than crowdsaletarget:\n  - the state variable amountraised will be updated to ((the ether just received (i.e., msg.value)/0xde0b6b3a7640000)+amountraised).\n  - the state variable totalsupply will be updated to totalsupply.\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following contract descriptions. Some state variables are provided to help you develop.",
			"role": "system"
		},
		{
			"content": "The following is the description of the contract logic: For the approve function, it has 2 arguments and the type of each argument is as follows: address, uint256.\n- the allowance from caller to the first argument will be updated to the second argument.\n\nFor the setMinimumInvestment function, it has one argument and its type is uint256.\n- For owner:\n  - the state variable minimuminvestment will be updated to the first argument.\n\nFor the setPrice function, it has one argument and its type is uint256.\n- For owner, and the first argument is greater than 0:\n  - the state variable price will be updated to the first argument.\n\nFor the startSale function, it has 6 arguments and the type of each argument is as follows: uint256, uint256, uint256, address, uint256, uint256.\n- For owner, and the second argument is greater than current time:\n  - the state variable starttime will be updated to the first argument.\n  - the state variable stoptime will be updated to the second argument.\n  - the state variable amountraised will be updated to 0.\n  - the state variable paused will be updated to 0.\n  - When the third argument is greater than 0:\n    - the state variable price will be updated to the third argument.\n    - the state variable multisigwallet will be updated to the fourth argument.\n    - the state variable minimuminvestment will be updated to the fifth argument.\n    - the state variable crowdsaletarget will be updated to the sixth argument.\n\nFor the stopSale function.\n- For owner:\n  - the state variable stoptime will be updated to current time.\n  - the state variable paused will be updated to 1.\n\nFor the setMultiSigWallet function, it has one argument and its type is address.\n- For owner:\n  - the state variable multisigwallet will be updated to the first argument.\n\nFor the transferOwnership function, it has one argument and its type is address.\n- For owner:\n  - the state variable owner will be updated to the first argument.\n\nFor the setCrowdsaleTarget function, it has one argument and its type is uint256.\n- For owner:\n  - the state variable crowdsaletarget will be updated to the first argument.\n\nFor the mintToken function, it has 2 arguments and the type of each argument is as follows: address, uint256.\n- For owner, and the second argument is greater than 0, and (the second argument+totalsupply) is not greater than fixedtotalsupply:\n  - the balance of the first argument will be updated to (the second argument+the balance of the first argument).\n  - the state variable totalsupply will be updated to (the second argument+totalsupply).\n\nFor the transferFrom function, it has 3 arguments and the type of each argument is as follows: address, address, uint256.\n- When the third argument is not greater than the balance of the first argument, and the second argument is not 0, and the third argument is not greater than the allowance from the first argument to caller, and (the third argument+the balance of the second argument) is greater than the balance of the second argument:\n  - the balance of the second argument will be updated to (the third argument+the balance of the second argument).\n  - the balance of the first argument will be updated to (the balance of the first argument-the third argument).\n  - the allowance from the first argument to caller will be updated to (the allowance from the first argument to caller-the third argument).\n\nFor the transfer function, it has 2 arguments and the type of each argument is as follows: address, uint256.\n- When (the second argument+the balance of the first argument) is greater than the balance of the first argument, and the first argument is not 0, and the second argument is not greater than the balance of caller:\n  - the balance of caller will be updated to (the balance of caller-the second argument).\n  - the balance of the first argument will be updated to (the second argument+the balance of the first argument).\n\nFor the payable fallback function.\n- When the ether just received (i.e., msg.value) is not smaller than minimuminvestment, and before stoptime, and totalsupply is not greater than fixedtotalsupply, and paused is 0, and ((the ether just received (i.e., msg.value)/0xde0b6b3a7640000)+amountraised) is not greater than crowdsaletarget:\n  - the state variable amountraised will be updated to ((the ether just received (i.e., msg.value)/0xde0b6b3a7640000)+amountraised).\n  - the state variable totalsupply will be updated to totalsupply.\n\n.\n Here are some state variables with their corresponding types: public state variable `owner` is typed address,public state variable `name` is typed string,public state variable `symbol` is typed string,public state variable `decimals` is typed uint256,public state variable `totalsupply` is typed uint256,public state variable `balanceof` is typed mapping,public state variable `allowance` is typed mapping,public state variable `multisigwallet` is typed address,public state variable `amountraised` is typed uint256,public state variable `starttime` is typed uint256,public state variable `stoptime` is typed uint256,public state variable `fixedtotalsupply` is typed uint256,public state variable `price` is typed uint256,public state variable `minimuminvestment` is typed uint256,public state variable `crowdsaletarget` is typed uint256,private state variable `paused` is typed bool,private state variable `rate` is typed uint256.\n ",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following contract descriptions. Some state variables are provided to help you develop.The following is the description of the contract logic: For the approve function, it has 2 arguments and the type of each argument is as follows: address, uint256.\n- the allowance from caller to the first argument will be updated to the second argument.\n\nFor the setMinimumInvestment function, it has one argument and its type is uint256.\n- For owner:\n  - the state variable minimuminvestment will be updated to the first argument.\n\nFor the setPrice function, it has one argument and its type is uint256.\n- For owner, and the first argument is greater than 0:\n  - the state variable price will be updated to the first argument.\n\nFor the startSale function, it has 6 arguments and the type of each argument is as follows: uint256, uint256, uint256, address, uint256, uint256.\n- For owner, and the second argument is greater than current time:\n  - the state variable starttime will be updated to the first argument.\n  - the state variable stoptime will be updated to the second argument.\n  - the state variable amountraised will be updated to 0.\n  - the state variable paused will be updated to 0.\n  - When the third argument is greater than 0:\n    - the state variable price will be updated to the third argument.\n    - the state variable multisigwallet will be updated to the fourth argument.\n    - the state variable minimuminvestment will be updated to the fifth argument.\n    - the state variable crowdsaletarget will be updated to the sixth argument.\n\nFor the stopSale function.\n- For owner:\n  - the state variable stoptime will be updated to current time.\n  - the state variable paused will be updated to 1.\n\nFor the setMultiSigWallet function, it has one argument and its type is address.\n- For owner:\n  - the state variable multisigwallet will be updated to the first argument.\n\nFor the transferOwnership function, it has one argument and its type is address.\n- For owner:\n  - the state variable owner will be updated to the first argument.\n\nFor the setCrowdsaleTarget function, it has one argument and its type is uint256.\n- For owner:\n  - the state variable crowdsaletarget will be updated to the first argument.\n\nFor the mintToken function, it has 2 arguments and the type of each argument is as follows: address, uint256.\n- For owner, and the second argument is greater than 0, and (the second argument+totalsupply) is not greater than fixedtotalsupply:\n  - the balance of the first argument will be updated to (the second argument+the balance of the first argument).\n  - the state variable totalsupply will be updated to (the second argument+totalsupply).\n\nFor the transferFrom function, it has 3 arguments and the type of each argument is as follows: address, address, uint256.\n- When the third argument is not greater than the balance of the first argument, and the second argument is not 0, and the third argument is not greater than the allowance from the first argument to caller, and (the third argument+the balance of the second argument) is greater than the balance of the second argument:\n  - the balance of the second argument will be updated to (the third argument+the balance of the second argument).\n  - the balance of the first argument will be updated to (the balance of the first argument-the third argument).\n  - the allowance from the first argument to caller will be updated to (the allowance from the first argument to caller-the third argument).\n\nFor the transfer function, it has 2 arguments and the type of each argument is as follows: address, uint256.\n- When (the second argument+the balance of the first argument) is greater than the balance of the first argument, and the first argument is not 0, and the second argument is not greater than the balance of caller:\n  - the balance of caller will be updated to (the balance of caller-the second argument).\n  - the balance of the first argument will be updated to (the second argument+the balance of the first argument).\n\nFor the payable fallback function.\n- When the ether just received (i.e., msg.value) is not smaller than minimuminvestment, and before stoptime, and totalsupply is not greater than fixedtotalsupply, and paused is 0, and ((the ether just received (i.e., msg.value)/0xde0b6b3a7640000)+amountraised) is not greater than crowdsaletarget:\n  - the state variable amountraised will be updated to ((the ether just received (i.e., msg.value)/0xde0b6b3a7640000)+amountraised).\n  - the state variable totalsupply will be updated to totalsupply.\n\n.\n Here are some state variables with their corresponding types: public state variable `owner` is typed address,public state variable `name` is typed string,public state variable `symbol` is typed string,public state variable `decimals` is typed uint256,public state variable `totalsupply` is typed uint256,public state variable `balanceof` is typed mapping,public state variable `allowance` is typed mapping,public state variable `multisigwallet` is typed address,public state variable `amountraised` is typed uint256,public state variable `starttime` is typed uint256,public state variable `stoptime` is typed uint256,public state variable `fixedtotalsupply` is typed uint256,public state variable `price` is typed uint256,public state variable `minimuminvestment` is typed uint256,public state variable `crowdsaletarget` is typed uint256,private state variable `paused` is typed bool,private state variable `rate` is typed uint256.\n ",
	"status": "1",
	"time_cost": 51.03512382507324,
	"usage": {
		"completion_tokens": 809,
		"prompt_tokens": 1252,
		"total_tokens": 2061
	}
}