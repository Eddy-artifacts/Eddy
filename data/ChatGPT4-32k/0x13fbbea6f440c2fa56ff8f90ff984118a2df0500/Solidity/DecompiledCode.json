{
	"address": "0x13fbbea6f440c2fa56ff8f90ff984118a2df0500",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Based on your provided EVM Bytecode, here is the corresponding Solidity smart contract:\n\n```solidity\npragma solidity ^0.6.0;\n\ncontract MyContract {\n\n    uint256 private _maxWei;\n    address private _withdraw;\n\n    event Winnings(uint256 value);\n\n    fallback() external payable { \n    }\n\n    function maxWei() public view returns (uint256) { \n        return _maxWei;\n    }\n\n    function withdraw(uint256 amount) public payable { \n        require(_withdraw == msg.sender, 'cannot withdraw');\n        (bool success, ) = _withdraw.call{value: amount, gas: !amount * 2300}(\"\");\n        require(success);\n    }\n\n    function send() public payable { \n        bool condition = msg.value <= 0x4563918244f40000;\n        if (condition) {\n            condition = msg.value < address(this).balance * 5 / 100;\n        }\n        require(condition, 'sending too much');\n        bytes memory data = new bytes(32);\n        if (32) {\n            data = abi.encodePacked(this);\n        }\n        if (uint256(keccak256(abi.encodePacked(block.difficulty + block.timestamp))) % 10 < 9) {\n            (bool success, ) = msg.sender.call{value: msg.value + msg.value * 9 / 100, gas: !(msg.value + msg.value * 9 / 100) * 2300}(\"\");\n            require(success);\n            emit Winnings(msg.value * 9 / 100);\n        }\n        emit Winnings(0);\n    }\n}\n```\n\nPlease note that this smart contract is quite specific and its functionality might not be as expected without knowing the context or the business logic it's supposed to implement.",
				"role": "assistant"
			}
		}
	],
	"created": 1701470769,
	"id": "chatcmpl-8R6YrrQeukcAj3zlXhLs7aN3p5Qny",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.16 21:37 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _maxWei; // STORAGE[0x1]\naddress _withdraw; // STORAGE[0x0] bytes 0 to 19\n\n// Events\nWinnings(uint256);\n\nfunction fallback() public payable { \n}\n\nfunction maxWei() public nonPayable { \n    return _maxWei;\n}\n\nfunction withdraw(uint256 varg0) public payable { \n    require(msg.data.length - 4 >= 32);\n    require(_withdraw == msg.sender, 'cannot withdraw');\n    v0 = _withdraw.call().value(varg0).gas(!varg0 * 2300);\n    require(v0); // checks call status, propagates error data on error\n}\n\nfunction send() public payable { \n    v0 = v1 = msg.value <= 0x4563918244f40000;\n    if (v1) {\n        v0 = v2 = msg.value < (address(this)).balance * 5 / 100;\n    }\n    require(v0, 'sending too much');\n    v3 = new bytes[](32);\n    if (32) {\n        MEM[(v3.data) len 32] = this.code[this.code.size len 32];\n    }\n    v4 = v3.length;\n    v5 = v3.data;\n    if (keccak256(block.difficulty + block.timestamp) % 10 < 9) {\n        v6 = msg.sender.call().value(msg.value + msg.value * 9 / 100).gas(!(msg.value + msg.value * 9 / 100) * 2300);\n        require(v6); // checks call status, propagates error data on error\n        emit Winnings(msg.value * 9 / 100);\n    }\n    emit Winnings(0);\n    return 0;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x68b7310 == function_selector >> 224) {\n            maxWei();\n        } else if (0x2e1a7d4d == function_selector >> 224) {\n            withdraw(uint256);\n        } else if (0xb46300ec == function_selector >> 224) {\n            send();\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.16 21:37 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _maxWei; // STORAGE[0x1]\naddress _withdraw; // STORAGE[0x0] bytes 0 to 19\n\n// Events\nWinnings(uint256);\n\nfunction fallback() public payable { \n}\n\nfunction maxWei() public nonPayable { \n    return _maxWei;\n}\n\nfunction withdraw(uint256 varg0) public payable { \n    require(msg.data.length - 4 >= 32);\n    require(_withdraw == msg.sender, 'cannot withdraw');\n    v0 = _withdraw.call().value(varg0).gas(!varg0 * 2300);\n    require(v0); // checks call status, propagates error data on error\n}\n\nfunction send() public payable { \n    v0 = v1 = msg.value <= 0x4563918244f40000;\n    if (v1) {\n        v0 = v2 = msg.value < (address(this)).balance * 5 / 100;\n    }\n    require(v0, 'sending too much');\n    v3 = new bytes[](32);\n    if (32) {\n        MEM[(v3.data) len 32] = this.code[this.code.size len 32];\n    }\n    v4 = v3.length;\n    v5 = v3.data;\n    if (keccak256(block.difficulty + block.timestamp) % 10 < 9) {\n        v6 = msg.sender.call().value(msg.value + msg.value * 9 / 100).gas(!(msg.value + msg.value * 9 / 100) * 2300);\n        require(v6); // checks call status, propagates error data on error\n        emit Winnings(msg.value * 9 / 100);\n    }\n    emit Winnings(0);\n    return 0;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x68b7310 == function_selector >> 224) {\n            maxWei();\n        } else if (0x2e1a7d4d == function_selector >> 224) {\n            withdraw(uint256);\n        } else if (0xb46300ec == function_selector >> 224) {\n            send();\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.16 21:37 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _maxWei; // STORAGE[0x1]\naddress _withdraw; // STORAGE[0x0] bytes 0 to 19\n\n// Events\nWinnings(uint256);\n\nfunction fallback() public payable { \n}\n\nfunction maxWei() public nonPayable { \n    return _maxWei;\n}\n\nfunction withdraw(uint256 varg0) public payable { \n    require(msg.data.length - 4 >= 32);\n    require(_withdraw == msg.sender, 'cannot withdraw');\n    v0 = _withdraw.call().value(varg0).gas(!varg0 * 2300);\n    require(v0); // checks call status, propagates error data on error\n}\n\nfunction send() public payable { \n    v0 = v1 = msg.value <= 0x4563918244f40000;\n    if (v1) {\n        v0 = v2 = msg.value < (address(this)).balance * 5 / 100;\n    }\n    require(v0, 'sending too much');\n    v3 = new bytes[](32);\n    if (32) {\n        MEM[(v3.data) len 32] = this.code[this.code.size len 32];\n    }\n    v4 = v3.length;\n    v5 = v3.data;\n    if (keccak256(block.difficulty + block.timestamp) % 10 < 9) {\n        v6 = msg.sender.call().value(msg.value + msg.value * 9 / 100).gas(!(msg.value + msg.value * 9 / 100) * 2300);\n        require(v6); // checks call status, propagates error data on error\n        emit Winnings(msg.value * 9 / 100);\n    }\n    emit Winnings(0);\n    return 0;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x68b7310 == function_selector >> 224) {\n            maxWei();\n        } else if (0x2e1a7d4d == function_selector >> 224) {\n            withdraw(uint256);\n        } else if (0xb46300ec == function_selector >> 224) {\n            send();\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 20.17130208015442,
	"usage": {
		"completion_tokens": 366,
		"prompt_tokens": 599,
		"total_tokens": 965
	}
}