{
	"address": "0xbd3e6b94cdb9d31a2d9d5a39aaf12a1296bbe092",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Sure, here is the Solidity contract code equivalent to the given decompiled code:\n\n```solidity\npragma solidity >=0.4.22 <0.9.0;\n\ncontract Contract {\n    mapping (address => uint256) private _balanceOf;\n    mapping (address => uint256) private _paymentDue;\n    address payable private _fallback;\n    \n    function paymentDue(address user) public view returns(uint256) {\n        return (_paymentDue[user] * 2) / 100 * (block.number - _paymentDue[user]) / 6000;\n    }\n    \n    function balanceOf(address user) public view returns(uint256) {\n        return _balanceOf[user];\n    }\n    \n    function fallback() public payable {\n        bool success = _fallback.call{value: msg.value / 20, gas: !(msg.value / 20) * 2300}(\"\");\n        require(success, \"Call failed\");\n        if (_balanceOf[msg.sender] > 0) {\n            bool success = msg.sender.call{value: (_paymentDue[msg.sender] * 2) / 100 * (block.number - _paymentDue[msg.sender]) / 6000, gas: 2300 * !((_paymentDue[msg.sender] * 2) / 100 * (block.number - _paymentDue[msg.sender]) / 6000)}(\"\");\n            require(success, \"Call failed\");\n        }\n        _paymentDue[msg.sender] = block.number;\n        _paymentDue[msg.sender] += msg.value;\n    }\n    \n    fallback() external payable {\n        fallback();\n    }\n    \n    function getFunctionSelector(bytes4 function_selector) public payable {\n        if (msg.data.length >= 4) {\n            if (function_selector == bytes4(keccak256(\"paymentDue(address)\"))) {\n                paymentDue(msg.sender);\n            } else if (bytes4(keccak256(\"balanceOf(address)\")) == function_selector) {\n                balanceOf(msg.sender);\n            }\n        }\n        fallback();\n    }\n}\n```\n\nPlease note that Solidity doesn't support the direct use of function selectors like EVM bytecode, so I've replaced them with the equivalent keccak256 hash of the function signatures in the `getFunctionSelector` function. Also, `nonPayable` is not a valid keyword in Solidity, so I replaced it with `view` for non-mutating functions.",
				"role": "assistant"
			}
		}
	],
	"created": 1701470779,
	"id": "chatcmpl-8R6Z1vTgOYBtQveYqpGkTWl41zqZf",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.16 08:21 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _paymentDue; // STORAGE[0x2]\naddress _fallback; // STORAGE[0x0] bytes 0 to 19\n\n\nfunction paymentDue(address varg0) public nonPayable { \n    return (_paymentDue[varg0] << 1) / 100 * (block.number - _paymentDue[varg0]) / 6000;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction fallback() public payable { \n    v0 = _fallback.call().value(msg.value / 20).gas(!(msg.value / 20) * 2300);\n    require(v0); // checks call status, propagates error data on error\n    if (_balanceOf[msg.sender]) {\n        v1 = msg.sender.call().value((_paymentDue[msg.sender] << 1) / 100 * (block.number - _paymentDue[msg.sender]) / 6000).gas(2300 * !((_paymentDue[msg.sender] << 1) / 100 * (block.number - _paymentDue[msg.sender]) / 6000));\n        require(v1); // checks call status, propagates error data on error\n    }\n    _paymentDue[msg.sender] = block.number;\n    _paymentDue[msg.sender] += msg.value;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x366f2d86) {\n            paymentDue(address);\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.16 08:21 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _paymentDue; // STORAGE[0x2]\naddress _fallback; // STORAGE[0x0] bytes 0 to 19\n\n\nfunction paymentDue(address varg0) public nonPayable { \n    return (_paymentDue[varg0] << 1) / 100 * (block.number - _paymentDue[varg0]) / 6000;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction fallback() public payable { \n    v0 = _fallback.call().value(msg.value / 20).gas(!(msg.value / 20) * 2300);\n    require(v0); // checks call status, propagates error data on error\n    if (_balanceOf[msg.sender]) {\n        v1 = msg.sender.call().value((_paymentDue[msg.sender] << 1) / 100 * (block.number - _paymentDue[msg.sender]) / 6000).gas(2300 * !((_paymentDue[msg.sender] << 1) / 100 * (block.number - _paymentDue[msg.sender]) / 6000));\n        require(v1); // checks call status, propagates error data on error\n    }\n    _paymentDue[msg.sender] = block.number;\n    _paymentDue[msg.sender] += msg.value;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x366f2d86) {\n            paymentDue(address);\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.16 08:21 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _paymentDue; // STORAGE[0x2]\naddress _fallback; // STORAGE[0x0] bytes 0 to 19\n\n\nfunction paymentDue(address varg0) public nonPayable { \n    return (_paymentDue[varg0] << 1) / 100 * (block.number - _paymentDue[varg0]) / 6000;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction fallback() public payable { \n    v0 = _fallback.call().value(msg.value / 20).gas(!(msg.value / 20) * 2300);\n    require(v0); // checks call status, propagates error data on error\n    if (_balanceOf[msg.sender]) {\n        v1 = msg.sender.call().value((_paymentDue[msg.sender] << 1) / 100 * (block.number - _paymentDue[msg.sender]) / 6000).gas(2300 * !((_paymentDue[msg.sender] << 1) / 100 * (block.number - _paymentDue[msg.sender]) / 6000));\n        require(v1); // checks call status, propagates error data on error\n    }\n    _paymentDue[msg.sender] = block.number;\n    _paymentDue[msg.sender] += msg.value;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x366f2d86) {\n            paymentDue(address);\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 25.047003269195557,
	"usage": {
		"completion_tokens": 489,
		"prompt_tokens": 506,
		"total_tokens": 995
	}
}