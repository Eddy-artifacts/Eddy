{
	"address": "0xc780b0272bbe7caedb6b47157d88ce51b324da58",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "The Solidity contract code that corresponds to the given decompiled code is as follows:\n\n```solidity\npragma solidity ^0.8.0;\n\ncontract SmartContract {\n    address private _depositAddress;\n    address private _owner;\n\n    constructor() {\n        _owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(_owner == msg.sender, 'only owner');\n        _;\n    }\n\n    function setOwner(address newOwner) public onlyOwner {\n        _owner = newOwner;\n    }\n\n    function depositAddress() public view returns (address) {\n        return _depositAddress;\n    }\n\n    function withdraw(uint256 amount) public onlyOwner {\n        (bool success,) = _owner.call{value: amount}(\"\");\n        require(success, \"Transfer failed.\");\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    function setDepositAddress(address newDepositAddress) public onlyOwner {\n        _depositAddress = newDepositAddress;\n    }\n\n    function kill() public onlyOwner {\n        selfdestruct(payable(_owner));\n    }\n\n    fallback() external payable {\n        if (address(this).balance > 1e18) {\n            (bool success,) = _depositAddress.call{value: 1e18}(\"\");\n            require(success, \"Transfer failed.\");\n        }\n    }\n}\n```\nThis contract code creates a contract with an owner and a deposit address. The owner can be changed by the current owner and the deposited Ether can be transferred by the owner. Also, the owner can set a new deposit address. The contract can be destroyed by the owner, and the remaining Ether will be sent to the owner. If the contract receives Ether via the fallback function and the balance exceeds 1 Ether, the contract automatically transfers 1 Ether to the deposit address.\n\nPlease note that this is a simplified version of the decompiled code and it does not include the function selector logic present in the original decompiled code.",
				"role": "assistant"
			}
		}
	],
	"created": 1701471402,
	"id": "chatcmpl-8R6j4JOJ56lJPC6MW716FWEcZRVp2",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.25 04:23 UTC\n\n// Data structures and variables inferred from the use of storage instructions\naddress _depositAddress; // STORAGE[0x0] bytes 0 to 19\naddress _owner; // STORAGE[0x1] bytes 0 to 19\n\n\nfunction setOwner(address varg0) public nonPayable { \n    require(_owner == msg.sender, 'only owner');\n    _owner = varg0;\n}\n\nfunction depositAddress() public nonPayable { \n    return _depositAddress;\n}\n\nfunction withdraw(uint256 varg0) public nonPayable { \n    require(_owner == msg.sender, 'only owner');\n    v0 = _owner.call().value(varg0).gas(!varg0 * 2300);\n    require(v0);\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction setDepositAddress(address varg0) public nonPayable { \n    require(_owner == msg.sender, 'only owner');\n    _depositAddress = varg0;\n}\n\nfunction ownerkill() public nonPayable { \n    require(_owner == msg.sender, 'only owner');\n    selfdestruct(_owner);\n}\n\nfunction fallback() public payable { \n    if ((address(this)).balance > 0x8ac7230489e80000) {\n        v0 = _depositAddress.call().value(0x8ac7230489e80000);\n        require(v0); // checks call status, propagates error data on error\n    }\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x13af4035 == function_selector) {\n            setOwner(address);\n        } else if (0x28f833b7 == function_selector) {\n            depositAddress();\n        } else if (0x2e1a7d4d == function_selector) {\n            withdraw(uint256);\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0xab18af27 == function_selector) {\n            setDepositAddress(address);\n        } else if (0xd263b7eb == function_selector) {\n            ownerkill();\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.25 04:23 UTC\n\n// Data structures and variables inferred from the use of storage instructions\naddress _depositAddress; // STORAGE[0x0] bytes 0 to 19\naddress _owner; // STORAGE[0x1] bytes 0 to 19\n\n\nfunction setOwner(address varg0) public nonPayable { \n    require(_owner == msg.sender, 'only owner');\n    _owner = varg0;\n}\n\nfunction depositAddress() public nonPayable { \n    return _depositAddress;\n}\n\nfunction withdraw(uint256 varg0) public nonPayable { \n    require(_owner == msg.sender, 'only owner');\n    v0 = _owner.call().value(varg0).gas(!varg0 * 2300);\n    require(v0);\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction setDepositAddress(address varg0) public nonPayable { \n    require(_owner == msg.sender, 'only owner');\n    _depositAddress = varg0;\n}\n\nfunction ownerkill() public nonPayable { \n    require(_owner == msg.sender, 'only owner');\n    selfdestruct(_owner);\n}\n\nfunction fallback() public payable { \n    if ((address(this)).balance > 0x8ac7230489e80000) {\n        v0 = _depositAddress.call().value(0x8ac7230489e80000);\n        require(v0); // checks call status, propagates error data on error\n    }\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x13af4035 == function_selector) {\n            setOwner(address);\n        } else if (0x28f833b7 == function_selector) {\n            depositAddress();\n        } else if (0x2e1a7d4d == function_selector) {\n            withdraw(uint256);\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0xab18af27 == function_selector) {\n            setDepositAddress(address);\n        } else if (0xd263b7eb == function_selector) {\n            ownerkill();\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.25 04:23 UTC\n\n// Data structures and variables inferred from the use of storage instructions\naddress _depositAddress; // STORAGE[0x0] bytes 0 to 19\naddress _owner; // STORAGE[0x1] bytes 0 to 19\n\n\nfunction setOwner(address varg0) public nonPayable { \n    require(_owner == msg.sender, 'only owner');\n    _owner = varg0;\n}\n\nfunction depositAddress() public nonPayable { \n    return _depositAddress;\n}\n\nfunction withdraw(uint256 varg0) public nonPayable { \n    require(_owner == msg.sender, 'only owner');\n    v0 = _owner.call().value(varg0).gas(!varg0 * 2300);\n    require(v0);\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction setDepositAddress(address varg0) public nonPayable { \n    require(_owner == msg.sender, 'only owner');\n    _depositAddress = varg0;\n}\n\nfunction ownerkill() public nonPayable { \n    require(_owner == msg.sender, 'only owner');\n    selfdestruct(_owner);\n}\n\nfunction fallback() public payable { \n    if ((address(this)).balance > 0x8ac7230489e80000) {\n        v0 = _depositAddress.call().value(0x8ac7230489e80000);\n        require(v0); // checks call status, propagates error data on error\n    }\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x13af4035 == function_selector) {\n            setOwner(address);\n        } else if (0x28f833b7 == function_selector) {\n            depositAddress();\n        } else if (0x2e1a7d4d == function_selector) {\n            withdraw(uint256);\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0xab18af27 == function_selector) {\n            setDepositAddress(address);\n        } else if (0xd263b7eb == function_selector) {\n            ownerkill();\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 13.710540294647217,
	"usage": {
		"completion_tokens": 400,
		"prompt_tokens": 580,
		"total_tokens": 980
	}
}