{
	"address": "0x17d7feb01444ab1ef6ee2643756b4740ae0140c7",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Sure, here is the Solidity contract code as per the decompiled EVM Bytecode:\n\n```solidity\npragma solidity >=0.4.22 <0.8.0;\n\ncontract MyToken {\n    mapping (address => uint256) private _balances;\n    uint256 private _totalSupply;\n    uint8 private _decimals;\n    string private _symbol;\n    string private _name;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    constructor (string memory name_, string memory symbol_, uint8 decimals_) {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = decimals_;\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    function burn(uint256 amount) public {\n        require(_balances[msg.sender] >= amount, \"Burn amount exceeds balance\");\n        _balances[msg.sender] -= amount;\n        _totalSupply -= amount;\n        emit Transfer(msg.sender, address(0), amount);\n    }\n\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    function mint(uint256 amount) public payable {\n        require(msg.value == amount, \"Ether value sent is not correct\");\n        _balances[msg.sender] += amount;\n        _totalSupply += amount;\n    }\n\n    function transfer(address recipient, uint256 amount) public returns (bool) {\n        require(_balances[msg.sender] >= amount, \"Transfer amount exceeds balance\");\n        _balances[msg.sender] -= amount;\n        _balances[recipient] += amount;\n        emit Transfer(msg.sender, recipient, amount);\n        return true;\n    }\n\n    function name() public view returns (string memory) {\n        return _name;\n    }\n}\n```\n\nThis contract implements a basic ERC20 token with functionality to mint and burn tokens. Please note that the above contract is a basic representation and does not include any security measures or standards usually found in production-ready contracts.",
				"role": "assistant"
			}
		}
	],
	"created": 1701470646,
	"id": "chatcmpl-8R6WsPAKn5AgKek4IulStHqvT6qia",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.23 18:37 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256[] _name; // STORAGE[0x0]\nuint256[] _symbol; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _mint; // STORAGE[0x2]\nuint256 _totalSupply; // STORAGE[0x3]\nuint8 _decimals; // STORAGE[0x4] bytes 0 to 0\n\n// Events\nTransfer(address, address, uint256);\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction burn(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(_mint[msg.sender] == varg0);\n    require(varg0 <= _mint[msg.sender], 'SafeMath: subtraction overflow');\n    _mint[msg.sender] = _mint[msg.sender] - varg0;\n    v0 = 0x8cd(0x1550f7dca70000, varg0);\n    v1 = msg.sender.call().value(v0).gas(!v0 * 2300);\n    require(v1); // checks call status, propagates error data on error\n    _totalSupply = _totalSupply - varg0;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[](_symbol.length);\n    v1 = v2 = v0.data;\n    if (_symbol.length) {\n        if (31 < _symbol.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _symbol.length <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 = v5 + 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction mint(uint256 varg0) public payable { \n    require(msg.data.length - 4 >= 32);\n    v0 = 0x8cd(0x1550f7dca70000, varg0);\n    require(msg.value == v0);\n    require(_mint[msg.sender] + varg0 >= _mint[msg.sender], 'SafeMath: addition overflow');\n    _mint[msg.sender] = _mint[msg.sender] + varg0;\n    _totalSupply = _totalSupply + varg0;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    require(_mint[msg.sender] >= varg1);\n    require(varg1 <= _mint[msg.sender], 'SafeMath: subtraction overflow');\n    _mint[msg.sender] = _mint[msg.sender] - varg1;\n    require(_mint[varg0] + varg1 >= _mint[varg0], 'SafeMath: addition overflow');\n    _mint[varg0] = _mint[varg0] + varg1;\n    emit Transfer(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction fallback() public payable { \n    revert();\n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[](_name.length);\n    v1 = v2 = v0.data;\n    if (_name.length) {\n        if (31 < _name.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _name.length <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 = v5 + 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction 0x8cd(uint256 varg0, uint256 varg1) private { \n    if (varg1 != 0) {\n        v0 = v1 = varg1 * varg0;\n        assert(varg1);\n        require(v1 / varg1 == varg0, 'SafeMath: multiplication overflow');\n    } else {\n        v0 = v2 = 0;\n    }\n    return v0;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x42966c68 == function_selector) {\n            burn(uint256);\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa0712d68 == function_selector) {\n            mint(uint256);\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.23 18:37 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256[] _name; // STORAGE[0x0]\nuint256[] _symbol; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _mint; // STORAGE[0x2]\nuint256 _totalSupply; // STORAGE[0x3]\nuint8 _decimals; // STORAGE[0x4] bytes 0 to 0\n\n// Events\nTransfer(address, address, uint256);\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction burn(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(_mint[msg.sender] == varg0);\n    require(varg0 <= _mint[msg.sender], 'SafeMath: subtraction overflow');\n    _mint[msg.sender] = _mint[msg.sender] - varg0;\n    v0 = 0x8cd(0x1550f7dca70000, varg0);\n    v1 = msg.sender.call().value(v0).gas(!v0 * 2300);\n    require(v1); // checks call status, propagates error data on error\n    _totalSupply = _totalSupply - varg0;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[](_symbol.length);\n    v1 = v2 = v0.data;\n    if (_symbol.length) {\n        if (31 < _symbol.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _symbol.length <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 = v5 + 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction mint(uint256 varg0) public payable { \n    require(msg.data.length - 4 >= 32);\n    v0 = 0x8cd(0x1550f7dca70000, varg0);\n    require(msg.value == v0);\n    require(_mint[msg.sender] + varg0 >= _mint[msg.sender], 'SafeMath: addition overflow');\n    _mint[msg.sender] = _mint[msg.sender] + varg0;\n    _totalSupply = _totalSupply + varg0;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    require(_mint[msg.sender] >= varg1);\n    require(varg1 <= _mint[msg.sender], 'SafeMath: subtraction overflow');\n    _mint[msg.sender] = _mint[msg.sender] - varg1;\n    require(_mint[varg0] + varg1 >= _mint[varg0], 'SafeMath: addition overflow');\n    _mint[varg0] = _mint[varg0] + varg1;\n    emit Transfer(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction fallback() public payable { \n    revert();\n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[](_name.length);\n    v1 = v2 = v0.data;\n    if (_name.length) {\n        if (31 < _name.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _name.length <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 = v5 + 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction 0x8cd(uint256 varg0, uint256 varg1) private { \n    if (varg1 != 0) {\n        v0 = v1 = varg1 * varg0;\n        assert(varg1);\n        require(v1 / varg1 == varg0, 'SafeMath: multiplication overflow');\n    } else {\n        v0 = v2 = 0;\n    }\n    return v0;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x42966c68 == function_selector) {\n            burn(uint256);\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa0712d68 == function_selector) {\n            mint(uint256);\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.23 18:37 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256[] _name; // STORAGE[0x0]\nuint256[] _symbol; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _mint; // STORAGE[0x2]\nuint256 _totalSupply; // STORAGE[0x3]\nuint8 _decimals; // STORAGE[0x4] bytes 0 to 0\n\n// Events\nTransfer(address, address, uint256);\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction burn(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(_mint[msg.sender] == varg0);\n    require(varg0 <= _mint[msg.sender], 'SafeMath: subtraction overflow');\n    _mint[msg.sender] = _mint[msg.sender] - varg0;\n    v0 = 0x8cd(0x1550f7dca70000, varg0);\n    v1 = msg.sender.call().value(v0).gas(!v0 * 2300);\n    require(v1); // checks call status, propagates error data on error\n    _totalSupply = _totalSupply - varg0;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[](_symbol.length);\n    v1 = v2 = v0.data;\n    if (_symbol.length) {\n        if (31 < _symbol.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _symbol.length <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 = v5 + 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction mint(uint256 varg0) public payable { \n    require(msg.data.length - 4 >= 32);\n    v0 = 0x8cd(0x1550f7dca70000, varg0);\n    require(msg.value == v0);\n    require(_mint[msg.sender] + varg0 >= _mint[msg.sender], 'SafeMath: addition overflow');\n    _mint[msg.sender] = _mint[msg.sender] + varg0;\n    _totalSupply = _totalSupply + varg0;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    require(_mint[msg.sender] >= varg1);\n    require(varg1 <= _mint[msg.sender], 'SafeMath: subtraction overflow');\n    _mint[msg.sender] = _mint[msg.sender] - varg1;\n    require(_mint[varg0] + varg1 >= _mint[varg0], 'SafeMath: addition overflow');\n    _mint[varg0] = _mint[varg0] + varg1;\n    emit Transfer(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction fallback() public payable { \n    revert();\n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[](_name.length);\n    v1 = v2 = v0.data;\n    if (_name.length) {\n        if (31 < _name.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _name.length <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 = v5 + 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction 0x8cd(uint256 varg0, uint256 varg1) private { \n    if (varg1 != 0) {\n        v0 = v1 = varg1 * varg0;\n        assert(varg1);\n        require(v1 / varg1 == varg0, 'SafeMath: multiplication overflow');\n    } else {\n        v0 = v2 = 0;\n    }\n    return v0;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x42966c68 == function_selector) {\n            burn(uint256);\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa0712d68 == function_selector) {\n            mint(uint256);\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 13.02937650680542,
	"usage": {
		"completion_tokens": 422,
		"prompt_tokens": 1453,
		"total_tokens": 1875
	}
}