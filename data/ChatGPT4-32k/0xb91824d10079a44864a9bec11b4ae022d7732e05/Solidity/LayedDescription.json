{
	"address": "0xb91824d10079a44864a9bec11b4ae022d7732e05",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Sure, here is a contract that implements the logic you described:\n\n```Solidity\npragma solidity ^0.5.0;\n\ncontract Crowdsale {\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n    uint256 public totalsupply;\n    mapping (address => uint256) public balanceof;\n    address payable public beneficiary;\n    uint256 public fundinggoal;\n    uint256 public amountraised;\n    uint256 public deadline;\n    uint256 public price;\n    bool public crowdsaleclosed = false;\n    bool public fundinggoalreached = false;\n\n    event GoalReached(address recipient, uint totalAmountRaised);\n    event FundTransfer(address backer, uint amount, bool isContribution);\n\n    constructor(\n        uint256 _fundinggoalInEthers,\n        uint256 _durationInMinutes,\n        uint256 _etherCostOfEachToken,\n        string memory _tokenName,\n        string memory _tokenSymbol\n    ) public {\n        beneficiary = msg.sender;\n        fundinggoal = _fundinggoalInEthers * 1 ether;\n        deadline = now + _durationInMinutes * 1 minutes;\n        price = _etherCostOfEachToken * 1 ether;\n        name = _tokenName;\n        symbol = _tokenSymbol;\n    }\n\n    function () external payable {\n        require(!crowdsaleclosed);\n        uint amount = msg.value;\n        balanceof[msg.sender] += amount;\n        amountraised += amount;\n        if(price != 0){\n            totalsupply += (amount / price) * 10 ** uint256(decimals);\n            balanceof[msg.sender] += (amount / price) * 10 ** uint256(decimals);\n        }\n        emit FundTransfer(msg.sender, amount, true);\n    }\n\n    function checkGoalReached() public {\n        if (now >= deadline) {\n            crowdsaleclosed = true;\n            if (amountraised >= fundinggoal){\n                fundinggoalreached = true;\n                emit GoalReached(beneficiary, amountraised);\n            }\n        }\n    }\n\n    function issue(address _to, uint256 _amount) public {\n        totalsupply += _amount;\n        balanceof[_to] += _amount;\n    }\n\n    function transfer(address _to, uint256 _amount) public {\n        require(balanceof[msg.sender] >= _amount);\n        balanceof[msg.sender] -= _amount;\n        balanceof[_to] += _amount;\n    }\n\n    function safeWithdrawal() public {\n        if (now >= deadline) {\n            if (!fundinggoalreached) {\n                uint amount = balanceof[msg.sender];\n                balanceof[msg.sender] = 0;\n                if (amount > 0) {\n                    msg.sender.transfer(amount);\n                    emit FundTransfer(msg.sender, amount, false);\n                }\n            }\n\n            if (fundinggoalreached && beneficiary == msg.sender) {\n                beneficiary.transfer(amountraised);\n                emit FundTransfer(beneficiary, amountraised, false);\n            }\n        }\n    }\n}\n```\n\nThis contract is a basic crowdfund/ICO contract where people can buy tokens by sending Ether to the contract. If the funding goal is not reached by the deadline, the contributors can withdraw their contributions. If the funding goal is reached, the beneficiary (the one who deployed the contract) can withdraw the funds.",
				"role": "assistant"
			}
		}
	],
	"created": 1701712718,
	"id": "chatcmpl-8S7VGcbmMgadGsQRVAZRrUCJyYuu5",
	"input_format": "LayedDescription",
	"ir": "For the payable fallback function.\n- When crowdsaleclosed is 0:\n  - the balance of caller will be updated to (the ether just received (i.e., msg.value)+the balance of caller).\n  - the state variable amountraised will be updated to (the ether just received (i.e., msg.value)+amountraised).\n  - When price is not 0:\n    - the state variable totalsupply will be updated to (((the ether just received (i.e., msg.value)/price)*10 EXP decimals)+totalsupply).\n    - the balance of caller will be updated to (((the ether just received (i.e., msg.value)/price)*10 EXP decimals)+the balance of caller).\n\nFor the checkGoalReached function.\n- After deadline:\n  - the state variable crowdsaleclosed will be updated to 1.\n  - When amountraised is not smaller than fundinggoal:\n    - the state variable fundinggoalreached will be updated to 1.\n\nFor the issue function, it has 2 arguments and the type of each argument is as follows: address, uint256.\n- the state variable totalsupply will be updated to (the second argument+totalsupply).\n- the balance of the first argument will be updated to (the second argument+the balance of the first argument).\n\nFor the transfer function, it has 2 arguments and the type of each argument is as follows: address, uint256.\n- the balance of caller will be updated to (the balance of caller-the second argument).\n- the balance of the first argument will be updated to (the second argument+the balance of the first argument).\n\nFor the safeWithdrawal function.\n- After deadline:\n  - When the balance of caller is greater than 0, and fundinggoalreached is 0:\n    - it transfers ether valued the balance of caller to caller. Afterthat, \n      - the balance of caller will be updated to 0.\n  - When fundinggoalreached is not 0, and for beneficiary:\n    - it transfers ether valued amountraised to beneficiary.\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following contract descriptions. Some state variables are provided to help you develop.",
			"role": "system"
		},
		{
			"content": "The following is the description of the contract logic: For the payable fallback function.\n- When crowdsaleclosed is 0:\n  - the balance of caller will be updated to (the ether just received (i.e., msg.value)+the balance of caller).\n  - the state variable amountraised will be updated to (the ether just received (i.e., msg.value)+amountraised).\n  - When price is not 0:\n    - the state variable totalsupply will be updated to (((the ether just received (i.e., msg.value)/price)*10 EXP decimals)+totalsupply).\n    - the balance of caller will be updated to (((the ether just received (i.e., msg.value)/price)*10 EXP decimals)+the balance of caller).\n\nFor the checkGoalReached function.\n- After deadline:\n  - the state variable crowdsaleclosed will be updated to 1.\n  - When amountraised is not smaller than fundinggoal:\n    - the state variable fundinggoalreached will be updated to 1.\n\nFor the issue function, it has 2 arguments and the type of each argument is as follows: address, uint256.\n- the state variable totalsupply will be updated to (the second argument+totalsupply).\n- the balance of the first argument will be updated to (the second argument+the balance of the first argument).\n\nFor the transfer function, it has 2 arguments and the type of each argument is as follows: address, uint256.\n- the balance of caller will be updated to (the balance of caller-the second argument).\n- the balance of the first argument will be updated to (the second argument+the balance of the first argument).\n\nFor the safeWithdrawal function.\n- After deadline:\n  - When the balance of caller is greater than 0, and fundinggoalreached is 0:\n    - it transfers ether valued the balance of caller to caller. Afterthat, \n      - the balance of caller will be updated to 0.\n  - When fundinggoalreached is not 0, and for beneficiary:\n    - it transfers ether valued amountraised to beneficiary.\n\n.\n Here are some state variables with their corresponding types: public state variable `name` is typed string,public state variable `symbol` is typed string,public state variable `decimals` is typed uint8,public state variable `totalsupply` is typed uint256,public state variable `balanceof` is typed mapping,public state variable `beneficiary` is typed address,public state variable `fundinggoal` is typed uint256,public state variable `amountraised` is typed uint256,public state variable `deadline` is typed uint256,public state variable `price` is typed uint256,public state variable `crowdsaleclosed` is typed bool,public state variable `fundinggoalreached` is typed bool,public state variable `balance` is typed mapping.\n ",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following contract descriptions. Some state variables are provided to help you develop.The following is the description of the contract logic: For the payable fallback function.\n- When crowdsaleclosed is 0:\n  - the balance of caller will be updated to (the ether just received (i.e., msg.value)+the balance of caller).\n  - the state variable amountraised will be updated to (the ether just received (i.e., msg.value)+amountraised).\n  - When price is not 0:\n    - the state variable totalsupply will be updated to (((the ether just received (i.e., msg.value)/price)*10 EXP decimals)+totalsupply).\n    - the balance of caller will be updated to (((the ether just received (i.e., msg.value)/price)*10 EXP decimals)+the balance of caller).\n\nFor the checkGoalReached function.\n- After deadline:\n  - the state variable crowdsaleclosed will be updated to 1.\n  - When amountraised is not smaller than fundinggoal:\n    - the state variable fundinggoalreached will be updated to 1.\n\nFor the issue function, it has 2 arguments and the type of each argument is as follows: address, uint256.\n- the state variable totalsupply will be updated to (the second argument+totalsupply).\n- the balance of the first argument will be updated to (the second argument+the balance of the first argument).\n\nFor the transfer function, it has 2 arguments and the type of each argument is as follows: address, uint256.\n- the balance of caller will be updated to (the balance of caller-the second argument).\n- the balance of the first argument will be updated to (the second argument+the balance of the first argument).\n\nFor the safeWithdrawal function.\n- After deadline:\n  - When the balance of caller is greater than 0, and fundinggoalreached is 0:\n    - it transfers ether valued the balance of caller to caller. Afterthat, \n      - the balance of caller will be updated to 0.\n  - When fundinggoalreached is not 0, and for beneficiary:\n    - it transfers ether valued amountraised to beneficiary.\n\n.\n Here are some state variables with their corresponding types: public state variable `name` is typed string,public state variable `symbol` is typed string,public state variable `decimals` is typed uint8,public state variable `totalsupply` is typed uint256,public state variable `balanceof` is typed mapping,public state variable `beneficiary` is typed address,public state variable `fundinggoal` is typed uint256,public state variable `amountraised` is typed uint256,public state variable `deadline` is typed uint256,public state variable `price` is typed uint256,public state variable `crowdsaleclosed` is typed bool,public state variable `fundinggoalreached` is typed bool,public state variable `balance` is typed mapping.\n ",
	"status": "1",
	"time_cost": 37.0295786857605,
	"usage": {
		"completion_tokens": 688,
		"prompt_tokens": 648,
		"total_tokens": 1336
	}
}