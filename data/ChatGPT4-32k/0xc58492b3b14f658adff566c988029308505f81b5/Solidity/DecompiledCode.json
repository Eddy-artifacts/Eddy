{
	"address": "0xc58492b3b14f658adff566c988029308505f81b5",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Sure, based on the decompiled code, here is the Solidity smart contract:\n\n```sol\npragma solidity ^0.8.0;\n\ncontract ContractLibrary {\n    uint256 private _round;\n    uint256 private _lastDepositorAmount;\n    uint256 private _startingAmount;\n    uint256 private _nextAmount;\n    address private _lastDepositor;\n\n    function round() public view returns (uint256) { \n        return _round;\n    }\n\n    function nextAmount() public view returns (uint256) { \n        return _nextAmount;\n    }\n\n    function startingAmount() public view returns (uint256) { \n        return _startingAmount;\n    }\n\n    function lastDepositorAmount() public view returns (uint256) { \n        return _lastDepositorAmount;\n    }\n\n    function lastDepositor() public view returns (address) { \n        return _lastDepositor;\n    }\n\n    function deposit() public payable { \n        if (_round != 1) {\n            require(msg.value == _lastDepositorAmount * 2, \"Deposit must be double the last deposit\");\n            (bool success, ) = _lastDepositor.call{value: msg.value, gas: 2300}(\"\");\n            require(success, \"Transfer failed.\");\n        } else {\n            require(msg.value == _startingAmount, \"Deposit must be equal to the starting amount\");\n        }\n        _lastDepositorAmount = msg.value;\n        _lastDepositor = msg.sender;\n        _nextAmount = msg.value * 2;\n        _round = _round + 1;\n    }\n}\n```\nThis contract uses the latest 0.8.0 version of Solidity. It defines a contract `ContractLibrary` with private variables `_round`, `_lastDepositorAmount`, `_startingAmount`, `_nextAmount`, and `_lastDepositor`. \n\nIt has functions to get the value of these variables, and a `deposit` function that depends on the round number and requires the sent value to be double the last deposit amount or equal to the starting amount. The deposit function also updates the last depositor, the last deposit amount, the next amount, and increments the round.",
				"role": "assistant"
			}
		}
	],
	"created": 1701470972,
	"id": "chatcmpl-8R6c8ylFMQbZBfUvdb5siUId3r0Bi",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.22 00:06 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _round; // STORAGE[0x0]\nuint256 _lastDepositorAmount; // STORAGE[0x2]\nuint256 _startingAmount; // STORAGE[0x3]\nuint256 _nextAmount; // STORAGE[0x4]\naddress _lastDepositor; // STORAGE[0x1] bytes 0 to 19\n\n\nfunction round() public payable { \n    assert(!msg.value);\n    return _round;\n}\n\nfunction nextAmount() public payable { \n    assert(!msg.value);\n    return _nextAmount;\n}\n\nfunction startingAmount() public payable { \n    assert(!msg.value);\n    return _startingAmount;\n}\n\nfunction lastDepositorAmount() public payable { \n    assert(!msg.value);\n    return _lastDepositorAmount;\n}\n\nfunction lastDepositor() public payable { \n    assert(!msg.value);\n    return _lastDepositor;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length) {\n        if (0x146ca531 == function_selector) {\n            round();\n        } else if (0x50f956db == function_selector) {\n            nextAmount();\n        } else if (0x544f113b == function_selector) {\n            startingAmount();\n        } else if (0x8ea95cbc == function_selector) {\n            lastDepositorAmount();\n        } else if (0xfd9f6856 == function_selector) {\n            lastDepositor();\n        }\n    }\n    if (_round != 1) {\n        require(msg.value == _lastDepositorAmount << 1);\n        v0 = _lastDepositor.call().value(msg.value).gas(!msg.value * 2300);\n    } else {\n        require(msg.value == _startingAmount);\n    }\n    _lastDepositorAmount = msg.value;\n    _lastDepositor = msg.sender;\n    _nextAmount = msg.value << 1;\n    _round = _round + 1;\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.22 00:06 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _round; // STORAGE[0x0]\nuint256 _lastDepositorAmount; // STORAGE[0x2]\nuint256 _startingAmount; // STORAGE[0x3]\nuint256 _nextAmount; // STORAGE[0x4]\naddress _lastDepositor; // STORAGE[0x1] bytes 0 to 19\n\n\nfunction round() public payable { \n    assert(!msg.value);\n    return _round;\n}\n\nfunction nextAmount() public payable { \n    assert(!msg.value);\n    return _nextAmount;\n}\n\nfunction startingAmount() public payable { \n    assert(!msg.value);\n    return _startingAmount;\n}\n\nfunction lastDepositorAmount() public payable { \n    assert(!msg.value);\n    return _lastDepositorAmount;\n}\n\nfunction lastDepositor() public payable { \n    assert(!msg.value);\n    return _lastDepositor;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length) {\n        if (0x146ca531 == function_selector) {\n            round();\n        } else if (0x50f956db == function_selector) {\n            nextAmount();\n        } else if (0x544f113b == function_selector) {\n            startingAmount();\n        } else if (0x8ea95cbc == function_selector) {\n            lastDepositorAmount();\n        } else if (0xfd9f6856 == function_selector) {\n            lastDepositor();\n        }\n    }\n    if (_round != 1) {\n        require(msg.value == _lastDepositorAmount << 1);\n        v0 = _lastDepositor.call().value(msg.value).gas(!msg.value * 2300);\n    } else {\n        require(msg.value == _startingAmount);\n    }\n    _lastDepositorAmount = msg.value;\n    _lastDepositor = msg.sender;\n    _nextAmount = msg.value << 1;\n    _round = _round + 1;\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.22 00:06 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _round; // STORAGE[0x0]\nuint256 _lastDepositorAmount; // STORAGE[0x2]\nuint256 _startingAmount; // STORAGE[0x3]\nuint256 _nextAmount; // STORAGE[0x4]\naddress _lastDepositor; // STORAGE[0x1] bytes 0 to 19\n\n\nfunction round() public payable { \n    assert(!msg.value);\n    return _round;\n}\n\nfunction nextAmount() public payable { \n    assert(!msg.value);\n    return _nextAmount;\n}\n\nfunction startingAmount() public payable { \n    assert(!msg.value);\n    return _startingAmount;\n}\n\nfunction lastDepositorAmount() public payable { \n    assert(!msg.value);\n    return _lastDepositorAmount;\n}\n\nfunction lastDepositor() public payable { \n    assert(!msg.value);\n    return _lastDepositor;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length) {\n        if (0x146ca531 == function_selector) {\n            round();\n        } else if (0x50f956db == function_selector) {\n            nextAmount();\n        } else if (0x544f113b == function_selector) {\n            startingAmount();\n        } else if (0x8ea95cbc == function_selector) {\n            lastDepositorAmount();\n        } else if (0xfd9f6856 == function_selector) {\n            lastDepositor();\n        }\n    }\n    if (_round != 1) {\n        require(msg.value == _lastDepositorAmount << 1);\n        v0 = _lastDepositor.call().value(msg.value).gas(!msg.value * 2300);\n    } else {\n        require(msg.value == _startingAmount);\n    }\n    _lastDepositorAmount = msg.value;\n    _lastDepositor = msg.sender;\n    _nextAmount = msg.value << 1;\n    _round = _round + 1;\n}\n.",
	"status": "1",
	"time_cost": 17.400386571884155,
	"usage": {
		"completion_tokens": 459,
		"prompt_tokens": 546,
		"total_tokens": 1005
	}
}