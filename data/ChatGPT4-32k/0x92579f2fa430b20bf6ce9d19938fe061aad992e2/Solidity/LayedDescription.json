{
	"address": "0x92579f2fa430b20bf6ce9d19938fe061aad992e2",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is the contract code based on the description:\n\n```solidity\npragma solidity >=0.7.0 <0.9.0;\n\ninterface IToken {\n    function transfer(address receiver, uint amount) external returns (bool success);\n    function getBalanceOf(address account) external view returns (uint256);\n}\n\ncontract CrowdSale {\n    \n    address public beneficiary;\n    uint256 public fundinggoal;\n    uint256 public amountraised;\n    uint256 public deadline;\n    uint256 public price;\n    address public tokenreward;\n    uint256 public tokensleft;\n    mapping(address => uint256) public balanceof;\n    bool public crowdsaleclosed = false;\n    bool public fundinggoalreached = false;\n    \n    IToken private token;\n\n    constructor() {\n        beneficiary = msg.sender;\n        fundinggoal = 1000;\n        deadline = block.timestamp + 7 days;\n        price = 1;\n        tokenreward = address(0); // replace with address of the token contract\n        token = IToken(tokenreward);\n    }\n    \n    function checkGoalReached() public {\n        require(block.timestamp > deadline);\n        if (amountraised >= fundinggoal){\n            fundinggoalreached = true;\n            crowdsaleclosed = true;\n        }\n    }\n    \n    fallback() external payable {\n        require(!crowdsaleclosed);\n        require(tokensleft >= 0);\n        uint amount = msg.value;\n        balanceof[msg.sender] += amount;\n        amountraised += amount;\n        require(token.transfer(msg.sender, amount / price));\n        uint256 v0 = token.getBalanceOf(address(this));\n        tokensleft = v0;\n        if (v0 == 0) {\n            crowdsaleclosed = true;\n        }\n    }\n    \n    function bringBackTokens() external {\n        require(block.timestamp > deadline);\n        require(tokensleft > 0);\n        require(msg.sender == beneficiary);\n        require(token.transfer(beneficiary, tokensleft));\n        tokensleft = token.getBalanceOf(address(this));\n    }\n    \n    function updateTokensAvailable() public {\n        uint256 v0 = token.getBalanceOf(address(this));\n        tokensleft = v0;\n    }\n    \n    function safeWithdrawal() public {\n        require(block.timestamp > deadline);\n        if (!fundinggoalreached) {\n            uint amount = balanceof[msg.sender];\n            balanceof[msg.sender] = 0;\n            if (amount > 0) {\n                if (!payable(msg.sender).send(amount)) {\n                    balanceof[msg.sender] = amount;\n                }\n            }\n        } else if (fundinggoalreached && msg.sender == beneficiary) {\n            if (!payable(beneficiary).send(amountraised)) {\n                fundinggoalreached = false;\n            }\n        }\n    }\n}\n```\nPlease replace the `tokenreward` address in the constructor with the actual token contract address. \n\nBefore deploying this contract, you should test this contract in a local environment and do a proper security audit. If there is a lot of money involved, you should consider getting your contract audited by a professional security company.",
				"role": "assistant"
			}
		}
	],
	"created": 1702483913,
	"id": "chatcmpl-8VM7tD0B8NFLhEhVpwTi5zxwvxBm1",
	"input_format": "LayedDescription",
	"ir": "For the checkGoalReached function.\n- After deadline, and amountraised is not smaller than fundinggoal:\n  - the state variable fundinggoalreached will be updated to 1.\n  - the state variable crowdsaleclosed will be updated to 1.\n\nFor the payable fallback function.\n- When crowdsaleclosed is 0, and tokensleft is not smaller than 0:\n  - the balance of caller will be updated to (the ether just received (i.e., msg.value)+the balance of caller).\n  - the state variable amountraised will be updated to (the ether just received (i.e., msg.value)+amountraised).\n  - it calls an external function transfer of the external contract tokenreward with the following argument list: caller, and (the ether just received (i.e., msg.value)/price).\n  - When the call or transfer succeeds:\n    - it calls an external function getBalanceOf of the external contract tokenreward with the address of this contract as the argument, and gets the returned value as v0.\n    - When the call or transfer succeeds:\n      - the state variable tokensleft will be updated to v0.\n      - When v0 is 0:\n        - the state variable crowdsaleclosed will be updated to 1.\n\nFor the bringBackTokens function.\n- After deadline, and tokensleft is greater than 0, and for beneficiary:\n  - it calls an external function transfer of the external contract tokenreward with the following argument list: beneficiary, and tokensleft.\n  - When the call or transfer succeeds:\n    - it calls an external function getBalanceOf of the external contract tokenreward with the address of this contract as the argument, and gets the returned value as v0.\n    - When the call or transfer succeeds:\n      - the state variable tokensleft will be updated to v0.\n\nFor the updateTokensAvailable function.\n- it calls an external function getBalanceOf of the external contract tokenreward with the address of this contract as the argument, and gets the returned value as v0.\n- When the call or transfer succeeds:\n  - the state variable tokensleft will be updated to v0.\n\nFor the safeWithdrawal function.\n- After deadline:\n  - When fundinggoalreached is 0:\n    - the balance of caller will be updated to 0.\n    - When the balance of caller is greater than 0:\n      - it transfers ether valued the balance of caller to caller.\n      - When the call or transfer fails:\n        - the balance of caller will be updated to the balance of caller.\n  - When fundinggoalreached is not 0, and for beneficiary:\n    - it transfers ether valued amountraised to beneficiary.\n    - When the call or transfer fails:\n      - the state variable fundinggoalreached will be updated to 0.\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following contract descriptions. Some state variables are provided to help you develop.",
			"role": "system"
		},
		{
			"content": "The following is the description of the contract logic: For the checkGoalReached function.\n- After deadline, and amountraised is not smaller than fundinggoal:\n  - the state variable fundinggoalreached will be updated to 1.\n  - the state variable crowdsaleclosed will be updated to 1.\n\nFor the payable fallback function.\n- When crowdsaleclosed is 0, and tokensleft is not smaller than 0:\n  - the balance of caller will be updated to (the ether just received (i.e., msg.value)+the balance of caller).\n  - the state variable amountraised will be updated to (the ether just received (i.e., msg.value)+amountraised).\n  - it calls an external function transfer of the external contract tokenreward with the following argument list: caller, and (the ether just received (i.e., msg.value)/price).\n  - When the call or transfer succeeds:\n    - it calls an external function getBalanceOf of the external contract tokenreward with the address of this contract as the argument, and gets the returned value as v0.\n    - When the call or transfer succeeds:\n      - the state variable tokensleft will be updated to v0.\n      - When v0 is 0:\n        - the state variable crowdsaleclosed will be updated to 1.\n\nFor the bringBackTokens function.\n- After deadline, and tokensleft is greater than 0, and for beneficiary:\n  - it calls an external function transfer of the external contract tokenreward with the following argument list: beneficiary, and tokensleft.\n  - When the call or transfer succeeds:\n    - it calls an external function getBalanceOf of the external contract tokenreward with the address of this contract as the argument, and gets the returned value as v0.\n    - When the call or transfer succeeds:\n      - the state variable tokensleft will be updated to v0.\n\nFor the updateTokensAvailable function.\n- it calls an external function getBalanceOf of the external contract tokenreward with the address of this contract as the argument, and gets the returned value as v0.\n- When the call or transfer succeeds:\n  - the state variable tokensleft will be updated to v0.\n\nFor the safeWithdrawal function.\n- After deadline:\n  - When fundinggoalreached is 0:\n    - the balance of caller will be updated to 0.\n    - When the balance of caller is greater than 0:\n      - it transfers ether valued the balance of caller to caller.\n      - When the call or transfer fails:\n        - the balance of caller will be updated to the balance of caller.\n  - When fundinggoalreached is not 0, and for beneficiary:\n    - it transfers ether valued amountraised to beneficiary.\n    - When the call or transfer fails:\n      - the state variable fundinggoalreached will be updated to 0.\n\n.\n Here are some state variables with their corresponding types: public state variable `name` is typed string,public state variable `beneficiary` is typed address,public state variable `fundinggoal` is typed uint256,public state variable `amountraised` is typed uint256,public state variable `deadline` is typed uint256,public state variable `price` is typed uint256,public state variable `tokenreward` is typed address,public state variable `tokensleft` is typed uint256,public state variable `balanceof` is typed mapping,public state variable `crowdsaleclosed` is typed bool,public state variable `fundinggoalreached` is typed bool.\n ",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following contract descriptions. Some state variables are provided to help you develop.The following is the description of the contract logic: For the checkGoalReached function.\n- After deadline, and amountraised is not smaller than fundinggoal:\n  - the state variable fundinggoalreached will be updated to 1.\n  - the state variable crowdsaleclosed will be updated to 1.\n\nFor the payable fallback function.\n- When crowdsaleclosed is 0, and tokensleft is not smaller than 0:\n  - the balance of caller will be updated to (the ether just received (i.e., msg.value)+the balance of caller).\n  - the state variable amountraised will be updated to (the ether just received (i.e., msg.value)+amountraised).\n  - it calls an external function transfer of the external contract tokenreward with the following argument list: caller, and (the ether just received (i.e., msg.value)/price).\n  - When the call or transfer succeeds:\n    - it calls an external function getBalanceOf of the external contract tokenreward with the address of this contract as the argument, and gets the returned value as v0.\n    - When the call or transfer succeeds:\n      - the state variable tokensleft will be updated to v0.\n      - When v0 is 0:\n        - the state variable crowdsaleclosed will be updated to 1.\n\nFor the bringBackTokens function.\n- After deadline, and tokensleft is greater than 0, and for beneficiary:\n  - it calls an external function transfer of the external contract tokenreward with the following argument list: beneficiary, and tokensleft.\n  - When the call or transfer succeeds:\n    - it calls an external function getBalanceOf of the external contract tokenreward with the address of this contract as the argument, and gets the returned value as v0.\n    - When the call or transfer succeeds:\n      - the state variable tokensleft will be updated to v0.\n\nFor the updateTokensAvailable function.\n- it calls an external function getBalanceOf of the external contract tokenreward with the address of this contract as the argument, and gets the returned value as v0.\n- When the call or transfer succeeds:\n  - the state variable tokensleft will be updated to v0.\n\nFor the safeWithdrawal function.\n- After deadline:\n  - When fundinggoalreached is 0:\n    - the balance of caller will be updated to 0.\n    - When the balance of caller is greater than 0:\n      - it transfers ether valued the balance of caller to caller.\n      - When the call or transfer fails:\n        - the balance of caller will be updated to the balance of caller.\n  - When fundinggoalreached is not 0, and for beneficiary:\n    - it transfers ether valued amountraised to beneficiary.\n    - When the call or transfer fails:\n      - the state variable fundinggoalreached will be updated to 0.\n\n.\n Here are some state variables with their corresponding types: public state variable `name` is typed string,public state variable `beneficiary` is typed address,public state variable `fundinggoal` is typed uint256,public state variable `amountraised` is typed uint256,public state variable `deadline` is typed uint256,public state variable `price` is typed uint256,public state variable `tokenreward` is typed address,public state variable `tokensleft` is typed uint256,public state variable `balanceof` is typed mapping,public state variable `crowdsaleclosed` is typed bool,public state variable `fundinggoalreached` is typed bool.\n ",
	"status": "1",
	"time_cost": 39.617390871047974,
	"usage": {
		"completion_tokens": 636,
		"prompt_tokens": 784,
		"total_tokens": 1420
	}
}