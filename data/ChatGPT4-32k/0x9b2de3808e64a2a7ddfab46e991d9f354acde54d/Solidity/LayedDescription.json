{
	"address": "0x9b2de3808e64a2a7ddfab46e991d9f354acde54d",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is the contract code based on the provided description:\n\n```solidity\npragma solidity ^0.4.24;\n\ncontract Crowdfunding {\n    address public beneficiary;\n    uint256 public fundinggoal;\n    uint256 public amountraised;\n    uint256 public deadline;\n    uint256 public price;\n    address public tokenreward;\n    mapping(address => uint256) public balanceof;\n    uint8 private paused;\n    bool private paused1;\n\n    constructor() public payable {\n        beneficiary = msg.sender;\n        fundinggoal = 10000;\n        deadline = now + 7 * 1 days;\n        price = 1 ether;\n        tokenreward = 0x0000000000000000000000000000000000000000;\n        paused = 0;\n        paused1 = false;\n    }\n\n    function checkGoalReached() public {\n        require(now >= deadline);\n        paused = 1;\n        if (amountraised >= fundinggoal) {\n            paused1 = true;\n        }\n    }\n\n    function() public payable {\n        require(paused == 0);\n        balanceof[msg.sender] += msg.value;\n        amountraised += msg.value;\n        if (price != 0) {\n            uint256 amount = msg.value / price;\n            if (msg.value <= 0x8ac7230489e80000) {\n                tokenreward.call(bytes4(keccak256(\"transfer(address,uint256)\")), msg.sender, amount + amount/2);\n            } else {\n                tokenreward.call(bytes4(keccak256(\"transfer(address,uint256)\")), msg.sender, amount + amount/2 + amount/20);\n            }\n        }\n    }\n\n    function withdrawCoins() public {\n        require(msg.sender == beneficiary);\n        selfdestruct(beneficiary);\n    }\n\n    function safeWithdrawal() public {\n        require(now >= deadline);\n        if (!paused1) {\n            uint256 amount = balanceof[msg.sender];\n            balanceof[msg.sender] = 0;\n            if (amount > 0) {\n                if (msg.sender.send(amount)) {\n                    balanceof[msg.sender] = balanceof[msg.sender];\n                }\n            }\n        } else if (msg.sender == beneficiary) {\n            if (beneficiary.send(amountraised)) {\n                paused1 = false;\n            }\n        }\n    }\n}\n```\n\nPlease note that this is a simple contract and does not handle all possible edge cases. It would be best to conduct proper testing in a safe environment before deploying it on the main network. Also, consider using OpenZeppelin's SafeMath library to prevent overflows and underflows.",
				"role": "assistant"
			}
		}
	],
	"created": 1701715205,
	"id": "chatcmpl-8S89NtPwu1bhxbiGkh5pePvkUqtXK",
	"input_format": "LayedDescription",
	"ir": "For the payable constructor function.\n- the state variable paused1 will be updated to 0.\n- the state variable paused will be updated to 0.\n\nFor the checkGoalReached function.\n- After deadline:\n  - the state variable paused will be updated to 1.\n  - When amountraised is not smaller than fundinggoal:\n    - the state variable paused1 will be updated to 1.\n\nFor the payable fallback function.\n- When paused is 0:\n  - the balance of caller will be updated to (the balance of caller+the ether just received (i.e., msg.value)).\n  - the state variable amountraised will be updated to (amountraised+the ether just received (i.e., msg.value)).\n  - When price is not 0:\n    - When the ether just received (i.e., msg.value) is not greater than 0x8ac7230489e80000:\n      - it calls an external function transfer of the external contract tokenreward with the following argument list: caller, and ((the ether just received (i.e., msg.value)/price)+((the ether just received (i.e., msg.value)/price)/2)).\n    - When the ether just received (i.e., msg.value) is greater than 0x8ac7230489e80000:\n      - it calls an external function transfer of the external contract tokenreward with the following argument list: caller, and (((the ether just received (i.e., msg.value)/price)+((the ether just received (i.e., msg.value)/price)/2))+((the ether just received (i.e., msg.value)/price)/20)).\n\nFor the withdrawCoins function.\n- For beneficiary:\n  - the contract will be destroyed and its balance will be sent to beneficiary.\n\nFor the safeWithdrawal function.\n- After deadline:\n  - When paused1 is 0:\n    - the balance of caller will be updated to 0.\n    - When the balance of caller is greater than 0:\n      - it transfers ether valued the balance of caller to caller. Afterthat, \n        - the balance of caller will be updated to the balance of caller.\n  - For beneficiary, and paused1 is not 0:\n    - it transfers ether valued amountraised to beneficiary.\n    - the state variable paused1 will be updated to 0.\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following contract descriptions. Some state variables are provided to help you develop.",
			"role": "system"
		},
		{
			"content": "The following is the description of the contract logic: For the payable constructor function.\n- the state variable paused1 will be updated to 0.\n- the state variable paused will be updated to 0.\n\nFor the checkGoalReached function.\n- After deadline:\n  - the state variable paused will be updated to 1.\n  - When amountraised is not smaller than fundinggoal:\n    - the state variable paused1 will be updated to 1.\n\nFor the payable fallback function.\n- When paused is 0:\n  - the balance of caller will be updated to (the balance of caller+the ether just received (i.e., msg.value)).\n  - the state variable amountraised will be updated to (amountraised+the ether just received (i.e., msg.value)).\n  - When price is not 0:\n    - When the ether just received (i.e., msg.value) is not greater than 0x8ac7230489e80000:\n      - it calls an external function transfer of the external contract tokenreward with the following argument list: caller, and ((the ether just received (i.e., msg.value)/price)+((the ether just received (i.e., msg.value)/price)/2)).\n    - When the ether just received (i.e., msg.value) is greater than 0x8ac7230489e80000:\n      - it calls an external function transfer of the external contract tokenreward with the following argument list: caller, and (((the ether just received (i.e., msg.value)/price)+((the ether just received (i.e., msg.value)/price)/2))+((the ether just received (i.e., msg.value)/price)/20)).\n\nFor the withdrawCoins function.\n- For beneficiary:\n  - the contract will be destroyed and its balance will be sent to beneficiary.\n\nFor the safeWithdrawal function.\n- After deadline:\n  - When paused1 is 0:\n    - the balance of caller will be updated to 0.\n    - When the balance of caller is greater than 0:\n      - it transfers ether valued the balance of caller to caller. Afterthat, \n        - the balance of caller will be updated to the balance of caller.\n  - For beneficiary, and paused1 is not 0:\n    - it transfers ether valued amountraised to beneficiary.\n    - the state variable paused1 will be updated to 0.\n\n.\n Here are some state variables with their corresponding types: public state variable `beneficiary` is typed address,public state variable `fundinggoal` is typed uint256,public state variable `amountraised` is typed uint256,public state variable `deadline` is typed uint256,public state variable `price` is typed uint256,public state variable `tokenreward` is typed address,public state variable `balanceof` is typed mapping,private state variable `paused` is typed uint8,private state variable `paused1` is typed bool.\n ",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following contract descriptions. Some state variables are provided to help you develop.The following is the description of the contract logic: For the payable constructor function.\n- the state variable paused1 will be updated to 0.\n- the state variable paused will be updated to 0.\n\nFor the checkGoalReached function.\n- After deadline:\n  - the state variable paused will be updated to 1.\n  - When amountraised is not smaller than fundinggoal:\n    - the state variable paused1 will be updated to 1.\n\nFor the payable fallback function.\n- When paused is 0:\n  - the balance of caller will be updated to (the balance of caller+the ether just received (i.e., msg.value)).\n  - the state variable amountraised will be updated to (amountraised+the ether just received (i.e., msg.value)).\n  - When price is not 0:\n    - When the ether just received (i.e., msg.value) is not greater than 0x8ac7230489e80000:\n      - it calls an external function transfer of the external contract tokenreward with the following argument list: caller, and ((the ether just received (i.e., msg.value)/price)+((the ether just received (i.e., msg.value)/price)/2)).\n    - When the ether just received (i.e., msg.value) is greater than 0x8ac7230489e80000:\n      - it calls an external function transfer of the external contract tokenreward with the following argument list: caller, and (((the ether just received (i.e., msg.value)/price)+((the ether just received (i.e., msg.value)/price)/2))+((the ether just received (i.e., msg.value)/price)/20)).\n\nFor the withdrawCoins function.\n- For beneficiary:\n  - the contract will be destroyed and its balance will be sent to beneficiary.\n\nFor the safeWithdrawal function.\n- After deadline:\n  - When paused1 is 0:\n    - the balance of caller will be updated to 0.\n    - When the balance of caller is greater than 0:\n      - it transfers ether valued the balance of caller to caller. Afterthat, \n        - the balance of caller will be updated to the balance of caller.\n  - For beneficiary, and paused1 is not 0:\n    - it transfers ether valued amountraised to beneficiary.\n    - the state variable paused1 will be updated to 0.\n\n.\n Here are some state variables with their corresponding types: public state variable `beneficiary` is typed address,public state variable `fundinggoal` is typed uint256,public state variable `amountraised` is typed uint256,public state variable `deadline` is typed uint256,public state variable `price` is typed uint256,public state variable `tokenreward` is typed address,public state variable `balanceof` is typed mapping,private state variable `paused` is typed uint8,private state variable `paused1` is typed bool.\n ",
	"status": "1",
	"time_cost": 19.153808116912842,
	"usage": {
		"completion_tokens": 536,
		"prompt_tokens": 660,
		"total_tokens": 1196
	}
}