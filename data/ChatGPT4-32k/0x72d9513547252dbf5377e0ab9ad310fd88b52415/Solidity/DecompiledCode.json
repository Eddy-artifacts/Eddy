{
	"address": "0x72d9513547252dbf5377e0ab9ad310fd88b52415",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is the Solidity code:\n\n```solidity\npragma solidity ^0.8.0;\n\ncontract InvestmentContract {\n    mapping (address => uint256) private _checkInvestments;\n    mapping (address => uint256) private _checkWithdrawals;\n    mapping (address => uint256) private owner_1;\n    \n    uint256 private _minimum;\n    uint256 private _step;\n    \n    address private _ownerWallet;\n    address private _bountyManager;\n    address private stor_8_0_19;\n\n\n    event Invest(address indexed investor, uint256 amount);\n    event Withdraw(address indexed investor, uint256 amount);\n\n\n    function withdraw() public {\n        require(owner_1[msg.sender] > 0);\n        uint256 v0 = calculateBalance(msg.sender);\n        require(address(this).balance > v0);\n        _checkWithdrawals[msg.sender] += v0;\n        (bool success, ) = msg.sender.call{value: v0}(\"\");\n        require(success);\n        emit Withdraw(msg.sender, v0);\n    }\n\n    function minimum() public view returns (uint256) {\n        return _minimum;\n    }\n\n    function checkInvestments(address addr) public view returns (uint256) {\n        return _checkInvestments[addr];\n    }\n\n    function ownerWallet() public view returns (address) {\n        return _ownerWallet;\n    }\n\n    function checkWithdrawals(address addr) public view returns (uint256) {\n        return _checkWithdrawals[addr];\n    }\n\n    function bountyManager() public view returns (address) {\n        return _bountyManager;\n    }\n\n    function checkBalance() public view returns (uint256) {\n        return calculateBalance(msg.sender);\n    }\n\n    function step() public view returns (uint256) {\n        return _step;\n    }\n\n    function getBalance(address addr) public view returns (uint256) {\n        return calculateBalance(addr);\n    }\n\n    function calculateBalance(address addr) private view returns (uint256) {\n        uint256 v2 = _step * _checkInvestments[addr];\n        uint256 v3 = ((block.timestamp - owner_1[addr]) / 60) * (v2 / 100);\n        return (v3 / 0x11940) - _checkWithdrawals[addr];\n    }\n\n    fallback() external payable {\n        require(msg.value >= _minimum);\n        if (_checkInvestments[msg.sender] > 0) {\n            withdraw();\n            _checkWithdrawals[msg.sender] = 0;\n        }\n        _checkInvestments[msg.sender] += msg.value;\n        owner_1[msg.sender] = block.timestamp;\n        uint256 v1 = calculateShare(5, msg.value);\n        (bool success, ) = _ownerWallet.call{value: v1}(\"\");\n        require(success);\n        uint256 v3 = calculateShare(5, msg.value);\n        (success, ) = stor_8_0_19.call{value: v3}(\"\");\n        require(success);\n        emit Invest(msg.sender, msg.value);\n    }\n\n    function calculateShare(uint256 varg0, uint256 varg1) private pure returns (uint256) {\n        if (varg1 != 0) {\n            return varg1 * varg0;\n        } else {\n            return 0;\n        }\n    }\n}\n```\n\nPlease note that the \"__function_selector__\" function in the decompiled code is not needed in the original Solidity code because the EVM will automatically route calls to the correct function based on their function signatures.",
				"role": "assistant"
			}
		}
	],
	"created": 1701466903,
	"id": "chatcmpl-8R5YVRv0BUDY5k06U0BXqZkFZDqMU",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.16 09:10 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _checkInvestments; // STORAGE[0x0]\nmapping (uint256 => [uint256]) owner_1; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _checkWithdrawals; // STORAGE[0x2]\nuint256 _minimum; // STORAGE[0x3]\nuint256 _step; // STORAGE[0x4]\naddress _ownerWallet; // STORAGE[0x5] bytes 0 to 19\nuint160 _owner; // STORAGE[0x6] bytes 0 to 19\nuint160 _bountyManager; // STORAGE[0x7] bytes 0 to 19\naddress stor_8_0_19; // STORAGE[0x8] bytes 0 to 19\n\n// Events\nInvest(address, uint256);\nWithdraw(address, uint256);\n\nfunction withdraw() public nonPayable { \n    v0 = 0x66c();\n    return v0;\n}\n\nfunction minimum() public nonPayable { \n    return _minimum;\n}\n\nfunction checkInvestments(address varg0) public nonPayable { \n    return _checkInvestments[varg0];\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction ownerWallet() public nonPayable { \n    return _ownerWallet;\n}\n\nfunction checkWithdrawals(address varg0) public nonPayable { \n    return _checkWithdrawals[varg0];\n}\n\nfunction bountyManager() public nonPayable { \n    return _bountyManager;\n}\n\nfunction checkBalance() public nonPayable { \n    v0 = 0x9dd(msg.sender);\n    return v0;\n}\n\nfunction step() public nonPayable { \n    return _step;\n}\n\nfunction getBalance(address varg0) public nonPayable { \n    v0 = 0x9dd(varg0);\n    return v0;\n}\n\nfunction 0x66c() private { \n    require(owner_1[msg.sender] > 0);\n    v0 = 0x9dd(msg.sender);\n    if ((address(this)).balance <= v0) {\n        v1 = v2 = 0;\n    } else {\n        if (v0 > 0) {\n            assert(_checkWithdrawals[msg.sender] + v0 >= _checkWithdrawals[msg.sender]);\n            _checkWithdrawals[msg.sender] = _checkWithdrawals[msg.sender] + v0;\n            v3 = msg.sender.call().value(v0).gas(!v0 * 2300);\n            require(v3); // checks call status, propagates error data on error\n            emit Withdraw(msg.sender, v0);\n        }\n        v1 = v4 = 1;\n    }\n    return v1;\n}\n\nfunction 0x883(uint256 varg0, uint256 varg1) private { \n    if (varg1 != 0) {\n        v0 = v1 = varg1 * varg0;\n        assert(varg1);\n        assert(v1 / varg1 == varg0);\n    } else {\n        v0 = v2 = 0;\n    }\n    return v0;\n}\n\nfunction 0x9dd(uint256 varg0) private { \n    v0 = address(varg0);\n    assert(owner_1[v0] <= block.timestamp);\n    assert(60);\n    v1 = address(varg0);\n    v2 = 0x883(_step, _checkInvestments[v1]);\n    assert(100);\n    v3 = 0x883((block.timestamp - owner_1[v0]) / 60, v2 / 100);\n    assert(0x11940);\n    v4 = address(varg0);\n    assert(_checkWithdrawals[v4] <= v3 / 0x11940);\n    return v3 / 0x11940 - _checkWithdrawals[v4];\n}\n\nfunction fallback() public payable { \n    require(msg.value >= _minimum);\n    if (_checkInvestments[msg.sender] > 0) {\n        v0 = 0x66c();\n        if (v0) {\n            _checkWithdrawals[msg.sender] = 0;\n        }\n    }\n    assert(_checkInvestments[msg.sender] + msg.value >= _checkInvestments[msg.sender]);\n    _checkInvestments[msg.sender] = _checkInvestments[msg.sender] + msg.value;\n    owner_1[msg.sender] = block.timestamp;\n    assert(100);\n    v1 = 0x883(5, msg.value / 100);\n    v2 = _ownerWallet.call().value(v1).gas(!v1 * 2300);\n    require(v2); // checks call status, propagates error data on error\n    assert(100);\n    v3 = 0x883(5, msg.value / 100);\n    v4 = stor_8_0_19.call().value(v3).gas(!v3 * 2300);\n    require(v4); // checks call status, propagates error data on error\n    emit Invest(msg.sender, msg.value);\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x3ccfd60b == function_selector) {\n            withdraw();\n        } else if (0x52d6804d == function_selector) {\n            minimum();\n        } else if (0x835c1154 == function_selector) {\n            checkInvestments(address);\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x9335dcb7 == function_selector) {\n            ownerWallet();\n        } else if (0x9d9fcc72 == function_selector) {\n            checkWithdrawals(address);\n        } else if (0xb36b9ffd == function_selector) {\n            bountyManager();\n        } else if (0xc71daccb == function_selector) {\n            checkBalance();\n        } else if (0xe25fe175 == function_selector) {\n            step();\n        } else if (0xf8b2cb4f == function_selector) {\n            getBalance(address);\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.16 09:10 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _checkInvestments; // STORAGE[0x0]\nmapping (uint256 => [uint256]) owner_1; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _checkWithdrawals; // STORAGE[0x2]\nuint256 _minimum; // STORAGE[0x3]\nuint256 _step; // STORAGE[0x4]\naddress _ownerWallet; // STORAGE[0x5] bytes 0 to 19\nuint160 _owner; // STORAGE[0x6] bytes 0 to 19\nuint160 _bountyManager; // STORAGE[0x7] bytes 0 to 19\naddress stor_8_0_19; // STORAGE[0x8] bytes 0 to 19\n\n// Events\nInvest(address, uint256);\nWithdraw(address, uint256);\n\nfunction withdraw() public nonPayable { \n    v0 = 0x66c();\n    return v0;\n}\n\nfunction minimum() public nonPayable { \n    return _minimum;\n}\n\nfunction checkInvestments(address varg0) public nonPayable { \n    return _checkInvestments[varg0];\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction ownerWallet() public nonPayable { \n    return _ownerWallet;\n}\n\nfunction checkWithdrawals(address varg0) public nonPayable { \n    return _checkWithdrawals[varg0];\n}\n\nfunction bountyManager() public nonPayable { \n    return _bountyManager;\n}\n\nfunction checkBalance() public nonPayable { \n    v0 = 0x9dd(msg.sender);\n    return v0;\n}\n\nfunction step() public nonPayable { \n    return _step;\n}\n\nfunction getBalance(address varg0) public nonPayable { \n    v0 = 0x9dd(varg0);\n    return v0;\n}\n\nfunction 0x66c() private { \n    require(owner_1[msg.sender] > 0);\n    v0 = 0x9dd(msg.sender);\n    if ((address(this)).balance <= v0) {\n        v1 = v2 = 0;\n    } else {\n        if (v0 > 0) {\n            assert(_checkWithdrawals[msg.sender] + v0 >= _checkWithdrawals[msg.sender]);\n            _checkWithdrawals[msg.sender] = _checkWithdrawals[msg.sender] + v0;\n            v3 = msg.sender.call().value(v0).gas(!v0 * 2300);\n            require(v3); // checks call status, propagates error data on error\n            emit Withdraw(msg.sender, v0);\n        }\n        v1 = v4 = 1;\n    }\n    return v1;\n}\n\nfunction 0x883(uint256 varg0, uint256 varg1) private { \n    if (varg1 != 0) {\n        v0 = v1 = varg1 * varg0;\n        assert(varg1);\n        assert(v1 / varg1 == varg0);\n    } else {\n        v0 = v2 = 0;\n    }\n    return v0;\n}\n\nfunction 0x9dd(uint256 varg0) private { \n    v0 = address(varg0);\n    assert(owner_1[v0] <= block.timestamp);\n    assert(60);\n    v1 = address(varg0);\n    v2 = 0x883(_step, _checkInvestments[v1]);\n    assert(100);\n    v3 = 0x883((block.timestamp - owner_1[v0]) / 60, v2 / 100);\n    assert(0x11940);\n    v4 = address(varg0);\n    assert(_checkWithdrawals[v4] <= v3 / 0x11940);\n    return v3 / 0x11940 - _checkWithdrawals[v4];\n}\n\nfunction fallback() public payable { \n    require(msg.value >= _minimum);\n    if (_checkInvestments[msg.sender] > 0) {\n        v0 = 0x66c();\n        if (v0) {\n            _checkWithdrawals[msg.sender] = 0;\n        }\n    }\n    assert(_checkInvestments[msg.sender] + msg.value >= _checkInvestments[msg.sender]);\n    _checkInvestments[msg.sender] = _checkInvestments[msg.sender] + msg.value;\n    owner_1[msg.sender] = block.timestamp;\n    assert(100);\n    v1 = 0x883(5, msg.value / 100);\n    v2 = _ownerWallet.call().value(v1).gas(!v1 * 2300);\n    require(v2); // checks call status, propagates error data on error\n    assert(100);\n    v3 = 0x883(5, msg.value / 100);\n    v4 = stor_8_0_19.call().value(v3).gas(!v3 * 2300);\n    require(v4); // checks call status, propagates error data on error\n    emit Invest(msg.sender, msg.value);\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x3ccfd60b == function_selector) {\n            withdraw();\n        } else if (0x52d6804d == function_selector) {\n            minimum();\n        } else if (0x835c1154 == function_selector) {\n            checkInvestments(address);\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x9335dcb7 == function_selector) {\n            ownerWallet();\n        } else if (0x9d9fcc72 == function_selector) {\n            checkWithdrawals(address);\n        } else if (0xb36b9ffd == function_selector) {\n            bountyManager();\n        } else if (0xc71daccb == function_selector) {\n            checkBalance();\n        } else if (0xe25fe175 == function_selector) {\n            step();\n        } else if (0xf8b2cb4f == function_selector) {\n            getBalance(address);\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.16 09:10 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _checkInvestments; // STORAGE[0x0]\nmapping (uint256 => [uint256]) owner_1; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _checkWithdrawals; // STORAGE[0x2]\nuint256 _minimum; // STORAGE[0x3]\nuint256 _step; // STORAGE[0x4]\naddress _ownerWallet; // STORAGE[0x5] bytes 0 to 19\nuint160 _owner; // STORAGE[0x6] bytes 0 to 19\nuint160 _bountyManager; // STORAGE[0x7] bytes 0 to 19\naddress stor_8_0_19; // STORAGE[0x8] bytes 0 to 19\n\n// Events\nInvest(address, uint256);\nWithdraw(address, uint256);\n\nfunction withdraw() public nonPayable { \n    v0 = 0x66c();\n    return v0;\n}\n\nfunction minimum() public nonPayable { \n    return _minimum;\n}\n\nfunction checkInvestments(address varg0) public nonPayable { \n    return _checkInvestments[varg0];\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction ownerWallet() public nonPayable { \n    return _ownerWallet;\n}\n\nfunction checkWithdrawals(address varg0) public nonPayable { \n    return _checkWithdrawals[varg0];\n}\n\nfunction bountyManager() public nonPayable { \n    return _bountyManager;\n}\n\nfunction checkBalance() public nonPayable { \n    v0 = 0x9dd(msg.sender);\n    return v0;\n}\n\nfunction step() public nonPayable { \n    return _step;\n}\n\nfunction getBalance(address varg0) public nonPayable { \n    v0 = 0x9dd(varg0);\n    return v0;\n}\n\nfunction 0x66c() private { \n    require(owner_1[msg.sender] > 0);\n    v0 = 0x9dd(msg.sender);\n    if ((address(this)).balance <= v0) {\n        v1 = v2 = 0;\n    } else {\n        if (v0 > 0) {\n            assert(_checkWithdrawals[msg.sender] + v0 >= _checkWithdrawals[msg.sender]);\n            _checkWithdrawals[msg.sender] = _checkWithdrawals[msg.sender] + v0;\n            v3 = msg.sender.call().value(v0).gas(!v0 * 2300);\n            require(v3); // checks call status, propagates error data on error\n            emit Withdraw(msg.sender, v0);\n        }\n        v1 = v4 = 1;\n    }\n    return v1;\n}\n\nfunction 0x883(uint256 varg0, uint256 varg1) private { \n    if (varg1 != 0) {\n        v0 = v1 = varg1 * varg0;\n        assert(varg1);\n        assert(v1 / varg1 == varg0);\n    } else {\n        v0 = v2 = 0;\n    }\n    return v0;\n}\n\nfunction 0x9dd(uint256 varg0) private { \n    v0 = address(varg0);\n    assert(owner_1[v0] <= block.timestamp);\n    assert(60);\n    v1 = address(varg0);\n    v2 = 0x883(_step, _checkInvestments[v1]);\n    assert(100);\n    v3 = 0x883((block.timestamp - owner_1[v0]) / 60, v2 / 100);\n    assert(0x11940);\n    v4 = address(varg0);\n    assert(_checkWithdrawals[v4] <= v3 / 0x11940);\n    return v3 / 0x11940 - _checkWithdrawals[v4];\n}\n\nfunction fallback() public payable { \n    require(msg.value >= _minimum);\n    if (_checkInvestments[msg.sender] > 0) {\n        v0 = 0x66c();\n        if (v0) {\n            _checkWithdrawals[msg.sender] = 0;\n        }\n    }\n    assert(_checkInvestments[msg.sender] + msg.value >= _checkInvestments[msg.sender]);\n    _checkInvestments[msg.sender] = _checkInvestments[msg.sender] + msg.value;\n    owner_1[msg.sender] = block.timestamp;\n    assert(100);\n    v1 = 0x883(5, msg.value / 100);\n    v2 = _ownerWallet.call().value(v1).gas(!v1 * 2300);\n    require(v2); // checks call status, propagates error data on error\n    assert(100);\n    v3 = 0x883(5, msg.value / 100);\n    v4 = stor_8_0_19.call().value(v3).gas(!v3 * 2300);\n    require(v4); // checks call status, propagates error data on error\n    emit Invest(msg.sender, msg.value);\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x3ccfd60b == function_selector) {\n            withdraw();\n        } else if (0x52d6804d == function_selector) {\n            minimum();\n        } else if (0x835c1154 == function_selector) {\n            checkInvestments(address);\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x9335dcb7 == function_selector) {\n            ownerWallet();\n        } else if (0x9d9fcc72 == function_selector) {\n            checkWithdrawals(address);\n        } else if (0xb36b9ffd == function_selector) {\n            bountyManager();\n        } else if (0xc71daccb == function_selector) {\n            checkBalance();\n        } else if (0xe25fe175 == function_selector) {\n            step();\n        } else if (0xf8b2cb4f == function_selector) {\n            getBalance(address);\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 30.394654989242554,
	"usage": {
		"completion_tokens": 728,
		"prompt_tokens": 1434,
		"total_tokens": 2162
	}
}